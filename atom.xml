<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[shihuacivis' life]]></title>
  <subtitle><![CDATA[西斗门路前端手艺人]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.shihua.im/"/>
  <updated>2016-01-07T17:00:10.000Z</updated>
  <id>http://www.shihua.im/</id>
  
  <author>
    <name><![CDATA[石华]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[prototype.function与this.function的区别]]></title>
    <link href="http://www.shihua.im/2016/01/08/20160108_prototype/"/>
    <id>http://www.shihua.im/2016/01/08/20160108_prototype/</id>
    <published>2016-01-07T17:00:00.000Z</published>
    <updated>2016-01-07T17:00:10.000Z</updated>
    <content type="html"><![CDATA[<p>当我们在用javascript中的function做面向对象开发时，可能会有这样的疑惑，<br>prototype.function与this.function都可以定义对象的方法，那二者有何区别呢？<br><a id="more"></a></p>
<h2 id="初步分析">初步分析</h2><p>先用一段代码来说明二者的区别：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> actor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> param = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">this</span>.act = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> param;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">actor.prototype.play = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> param;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> man1 = <span class="keyword">new</span> actor();</span><br><span class="line"><span class="keyword">var</span> man2 = <span class="keyword">new</span> actor();</span><br><span class="line"><span class="built_in">console</span>.log(man1.act === man2.act);   <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(man1.play === man2.play); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(man1.act()); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(man1.play()); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<h2 id="方法指向的内存地址不同">方法指向的内存地址不同</h2><p>此时我们会发现，man1、man2虽然是同一个『类』new出来的对象，但是他们的<code>act</code>方法却不相等，也就是说，两个对象的的act方法的各自占据一块内存区域。<br>而用<code>prototype</code>定义的<code>play</code>方法，则指向单一的同一块内存区域。</p>
<p><strong>由此可见，如果一个对象被实例化多次，prototype定义的方法相对会更节省内存。</strong></p>
<h2 id="闭包内的参数">闭包内的参数</h2><p>当闭包中的param参数没有提供外露句柄时(如this.param = XXX)，play方法是获取不到它的。</p>
<h2 id="如何取舍">如何取舍</h2><ol>
<li>如果我们定义的方法里经常需要调用闭包中的变量（如上面的param），这时候使用this.function会更加便捷。</li>
<li>当我们定义的类会生成多个对象，而对象中的某些方法，执行的过程中不需要太多的访问闭包中的参数，从性能优化的角度会优先考虑prototype。</li>
<li>当在单例模式下（即一个对象在程序中只保持一个实例），这时候两者定义的方法从内存消耗上基本上是持平的，因此主要参考第一条中的原则。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>当我们在用javascript中的function做面向对象开发时，可能会有这样的疑惑，<br>prototype.function与this.function都可以定义对象的方法，那二者有何区别呢？<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[初识HTML5音频播放api——webaudio]]></title>
    <link href="http://www.shihua.im/2016/01/07/20160106_webaudio/"/>
    <id>http://www.shihua.im/2016/01/07/20160106_webaudio/</id>
    <published>2016-01-07T15:00:00.000Z</published>
    <updated>2016-01-06T16:26:39.000Z</updated>
    <content type="html"><![CDATA[<p>HTML5除了提供一个最基础的audio标签之外，还额外提供了一个更高性能的音频播放api——webaudio。<br>可以用来实现如果用audio标签难以实现的高频、重叠的音效，如枪击游戏中的枪击声。</p>
<a id="more"></a>
<h2 id="初步分析">初步分析</h2><p>在webaudio中，<br>我们可以创建一个<code>AudioContext</code>对象<br><code>AudioContext</code>中的<code>decodeAudioData</code>允许我们将<code>arrayBufer</code>格式的二进制流解码成为浏览器所支持的音频数据流。<br>此外，<code>AudioContext</code>还可以创建<code>AudioBufferSourceNode</code>对象，它包含了父类<code>AudioNode</code>中的属性和方法，即包括了我们需要用到的音频数据流的读取play方法。可以用来播放音频数据流。</p>
<p>利用webaudio播放音乐一般需要下面几步：</p>
<h2 id="1-加载音频文件读取为arrayBuffer格式的二进制流">1.加载音频文件读取为arrayBuffer格式的二进制流</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  request.open(<span class="string">'GET'</span>, url, <span class="literal">true</span>);</span><br><span class="line">  request.responseType = <span class="string">'arraybuffer'</span>;</span><br><span class="line">  request.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arrayBuffer = request.response；</span><br><span class="line">    <span class="comment">// todo 去往下一步</span></span><br><span class="line">  &#125;;</span><br><span class="line">  request.send();</span><br></pre></td></tr></table></figure>
<h2 id="2-将arrayBuffer格式的二进制流读出成音频数据流">2.将arrayBuffer格式的二进制流读出成音频数据流</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> context = <span class="keyword">new</span> (<span class="built_in">window</span>.AudioContext || <span class="built_in">window</span>.webkitAudioContext || <span class="built_in">window</span>.mozAudioContext)();</span><br><span class="line">  context.decodeAudioData(request.response, <span class="function"><span class="keyword">function</span>(<span class="params">buffer</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 去往下一步</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="3-创建AudioBufferSourceNode，播放音频数据流">3.创建AudioBufferSourceNode，播放音频数据流</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> audio = context.createBufferSource(); <span class="comment">// 创建AudioBufferSourceNode</span></span><br><span class="line">audio.buffer = buffer; <span class="comment">// 设置数据流</span></span><br><span class="line">audio.connect(destination); <span class="comment">// 将AudioBufferSourceNode『部署』到播放终端上</span></span><br><span class="line"><span class="comment">// 下面三个方法都是执行播放动作，由于不同时期的webaudio的api差异很大，所以调用方法有所不同</span></span><br><span class="line"><span class="keyword">if</span> (audio.start) &#123;</span><br><span class="line">  audio.start(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (audio[<span class="string">'noteGrainOn'</span>]) &#123;</span><br><span class="line">  <span class="keyword">var</span> duration = audio.buffer.duration;</span><br><span class="line">  audio[<span class="string">'noteGrainOn'</span>](<span class="number">0</span>, <span class="number">0</span>, duration);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  audio[<span class="string">'noteOn'</span>](<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="http://demo.shihua.im/webaudio-demo/" target="_blank" rel="external">webaudio的demo地址</a></p>
<p><a href="https://github.com/shihuacivis/webaudio-demo" target="_blank" rel="external">github地址</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>HTML5除了提供一个最基础的audio标签之外，还额外提供了一个更高性能的音频播放api——webaudio。<br>可以用来实现如果用audio标签难以实现的高频、重叠的音效，如枪击游戏中的枪击声。</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[构思一个轻量级的HTML5棋牌游戏框架]]></title>
    <link href="http://www.shihua.im/2016/01/05/20160105_framework/"/>
    <id>http://www.shihua.im/2016/01/05/20160105_framework/</id>
    <published>2016-01-05T13:00:00.000Z</published>
    <updated>2016-01-06T16:27:25.000Z</updated>
    <content type="html"><![CDATA[<p>我在思考如何构思一个通用的HTML5棋牌游戏框架<br>希望能够通过这套框架，降低游戏的开发复杂度，提高效率<br><a id="more"></a></p>
<p>有下面几个简单目标：</p>
<ul>
<li>1.游戏引擎基于目前所使用的cocos2d-js-lite，但未来可能要替换成别的，甚至用纯HTML开发</li>
<li>2.游戏界面能够基于配置开发，不需要有太重界面的构建代码</li>
<li>3.组件化开发，希望游戏像拼装积木一样简单，在一定范围内自由增减</li>
<li>4.只做游戏的核心玩法部分，至于房间列表、商城、个人中心等等这些个性化的功能部分交给HTML去做吧。整个混合式H5游戏开发，听起来就高大上。</li>
</ul>
<p>为了将来能够替换掉引擎，所以首先要先隔离引擎。<br>就像汽车只提供方向盘和档案，至于里面用的是DSG还是AT、是涡轮增压还是自然吸气不用去管。<br>简而言之就是封装引擎底层方法，构建一套独立于引擎的游戏模型。</p>
<p>根据之前斗地主开发的经验<br>这个框架需要实现下面几大功能：</p>
<blockquote>
<ul>
<li>界面渲染模块<ul>
<li>场景（底层容器）</li>
<li>容器（分层）</li>
<li>元素（静态）</li>
<li>按钮（动态）</li>
<li>动画</li>
</ul>
</li>
<li>界面通用组件<ul>
<li>背景</li>
<li>卡牌</li>
<li>出牌区域</li>
<li>手牌区域</li>
<li>菜单</li>
<li>动画交互区域</li>
<li>触控区域</li>
</ul>
</li>
<li>游戏通用功能<ul>
<li>卡牌排序</li>
<li>发布/订阅事件管理器</li>
</ul>
</li>
<li>环境适配功能<ul>
<li>资源加载管理</li>
<li>屏幕自适应</li>
<li>声音引擎</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="全局变量">全局变量</h2><blockquote>
<ul>
<li>卡牌种类和尺寸</li>
</ul>
</blockquote>
<h2 id="界面渲染模块">界面渲染模块</h2><h3 id="场景生成器">场景生成器</h3><p>作为游戏的父容器，并定义游戏中包含哪些容器层</p>
<h3 id="容器分层">容器分层</h3><p>通过配置项定义游戏模型，将场景分层，常见的如背景层、卡牌层、菜单层、动画层、交互层。<br>参照css的思维,预设一下参数,用于生成场景层:</p>
<blockquote>
<ul>
<li>尺寸宽高  width height</li>
<li>背景图片  background</li>
<li>是否显示  display</li>
<li>布局位置  position (left top)   </li>
<li>父容器id  #id</li>
<li>显示层级  z-index</li>
</ul>
</blockquote>
<p>容器还会有一个children list列表，里面会包含容器层内所有的元素</p>
<h3 id="元素">元素</h3><p>一般用于生成某张图片对应的元素:</p>
<blockquote>
<ul>
<li>尺寸宽高  width height</li>
<li>背景图片  background</li>
<li>图片位置  spirte position雪碧图位置</li>
<li>是否显示  display</li>
<li>布局位置  position (left top)   </li>
<li>父容器id  #id</li>
<li>显示层级  z-index</li>
</ul>
</blockquote>
<p>元素除了自身的属性，还会包含一些动画及其执行方法。</p>
<h3 id="动画">动画</h3><p>定义卡牌游戏中常见的几种动画：move、fadein、fadeout……<br>由于不同引擎对动画的支持不一样，所以动画这块可以自己进行封装，不做太多统一。</p>
<h3 id="按钮">按钮</h3><p>按钮基本上跟元素一致，但是会多了几个属性：</p>
<blockquote>
<ul>
<li>disabled样式</li>
<li>active样式</li>
<li>点击事件的回调</li>
</ul>
</blockquote>
<h2 id="界面通用组件">界面通用组件</h2><h3 id="背景">背景</h3><h3 id="卡牌">卡牌</h3><p>基于<code>元素</code>，根据配置生成不同大小、花色的卡牌，包含牌的升起和降下动画</p>
<h3 id="出牌区域">出牌区域</h3><p>可设定出牌区域的大小、位置、每行显示的卡牌数、排列方向</p>
<h3 id="手牌区域">手牌区域</h3><p>手牌区域大小、位置、发牌动画、控制其中的卡牌升起降下的方法</p>
<h3 id="菜单">菜单</h3><p>将按钮组合起来，布局到界面上</p>
<h2 id="环境适配功能">环境适配功能</h2><h3 id="资源加载管理">资源加载管理</h3><p>配置项的设计，便于合图、和加载读取</p>
<h3 id="屏幕自适应">屏幕自适应</h3><p>cocos2d-js中倒是相对粗暴一些</p>
<h3 id="声音引擎">声音引擎</h3><p>音效的配置项设计</p>
<h2 id="游戏通用功能">游戏通用功能</h2><h3 id="卡牌排序">卡牌排序</h3><p>基本现成了</p>
<h3 id="发布/订阅事件管理器">发布/订阅事件管理器</h3><p>基本现成了</p>
<p><strong>完事具备，就差一个程序猿了</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我在思考如何构思一个通用的HTML5棋牌游戏框架<br>希望能够通过这套框架，降低游戏的开发复杂度，提高效率<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[在Iframe子窗口调用父级窗口方法]]></title>
    <link href="http://www.shihua.im/2016/01/05/20160105_iframe/"/>
    <id>http://www.shihua.im/2016/01/05/20160105_iframe/</id>
    <published>2016-01-05T12:00:00.000Z</published>
    <updated>2016-01-05T13:02:21.000Z</updated>
    <content type="html"><![CDATA[<p>iframe子窗口调用父级窗口方法分为两种情况，跨越及同域调用</p>
<a id="more"></a>
<h2 id="iframe子窗口调用父级窗口">iframe子窗口调用父级窗口</h2><p>假设父级窗口index.html中有一个<code>closeModal</code>方法，和一个iframe，我们想在iframe中调用这个方法。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">iframe</span> <span class="attribute">id</span>=<span class="value">"ifr"</span> <span class="attribute">src</span>=<span class="value">""</span>&gt;</span><span class="tag">&lt;/<span class="title">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="actionscript"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">closeModal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// todo</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当iframe打开的页面与父窗口在同一个域名下时，我们通过window.parent拿到父窗口的window句柄，从而调用到父窗口window句柄下的方法<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- iframe content --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">  <span class="built_in">window</span>.parent.closeModal();</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>由于js对跨域权限做了限制，当iframe打开的是另一个域名下的地址时，我们可以通过下面这种方法“巧妙”的调用到父窗口下的方法——在iframe中再嵌入一层子iframe用于打开一个与父级同域名的页面，由于这个子iframe与父级同域，因此可以通过他调用我们需要的方法<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- iframe content --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">iframe</span> <span class="attribute">id</span>=<span class="value">"child"</span> <span class="attribute">src</span>=<span class="value">""</span>&gt;</span><span class="tag">&lt;/<span class="title">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- child content --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">  <span class="built_in">window</span>.parent.parent.closeModal();</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上述方法非常的“投机”，那么下面这种方法则可以说是名门正派了。</p>
<p>##HTML5中的postMessage<br>HTML5提供了新的通信api——<code>postMessage</code>，可以允许父容器与子容器间进行通信<br>那么实现的过程就如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">iframe</span> <span class="attribute">id</span>=<span class="value">"ifr"</span> <span class="attribute">src</span>=<span class="value">""</span>&gt;</span><span class="tag">&lt;/<span class="title">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">closeModal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// todo</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="string">'closeModal'</span> == e.data &amp;&amp; closeModal();</span><br><span class="line">  &#125;,<span class="literal">false</span>);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>iframe中通过postMessage向父窗口发消息<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- iframe.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="actionscript"></span><br><span class="line">  parent.postMessage(<span class="string">'closeModal'</span>, <span class="string">'*'</span>);</span><br><span class="line">  <span class="comment">/*</span><br><span class="line">    postMessage(data, origin);</span><br><span class="line">    参数：data    消息内容</span><br><span class="line">          origin  发送消息窗口的源（协议+主机+端口号）</span><br><span class="line">  */</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>iframe子窗口调用父级窗口方法分为两种情况，跨越及同域调用</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[js在浏览器端对二进制流进行AES加密和解密]]></title>
    <link href="http://www.shihua.im/2015/12/29/20151229_aes/"/>
    <id>http://www.shihua.im/2015/12/29/20151229_aes/</id>
    <published>2015-12-29T13:00:00.000Z</published>
    <updated>2015-12-29T13:34:57.000Z</updated>
    <content type="html"><![CDATA[<p>最近有一个项目，需要前端通过websocket与服务端连接，服务端直接向前端发二进制的数据协议包，但是这个协议包的内容是经过AES加密的，需要前端来解密。</p>
<p>网上大部分的AES算法以及DEMO教程（特别是中文社区）都是简单告诉你，JS如何去加密/解密一个字符串。但由于某些不可抗力，我要做的是在<strong>浏览器端</strong>对二进制字节流直接进行加密解密。</p>
<a id="more"></a>
<h2 id="开始解密">开始解密</h2><p>简单了解一下所用的的AES加密算法，我们用的是AES的CFB加密方式，服务端会提供给我一个key和iv的二进制字节串。密文也是二进制字节串。</p>
<p>我用的加密/解密插件: <a href="http://code.google.com/p/crypto-js" target="_blank" rel="external">crypto-js</a></p>
<p>一般的应用场景下，key和iv以及密文都是字符串，按照网上的教程基本上很快就能搞出来了。<br><strong>这里只简述一下key、iv、密文均为二进制字节串的情况下怎么用crypto-js来解密。</strong></p>
<p>需要引进下面几个js：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"aes.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"mode-cfb.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"pad-nopadding.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"lib-typedarrays.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"enc-base64.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/lib/enc-u8array.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span> <span class="comment">&lt;!-- 注意一下这个，并不在插件源文件中 --&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>注意一下最后一个文件，是我从网上摘录的，在插件源文件中是没有的。内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">CryptoJS.enc.u8array = &#123;</span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Converts a word array to a Uint8Array.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;WordArray&#125; wordArray The word array.</span><br><span class="line">   *</span><br><span class="line">   * @return &#123;Uint8Array&#125; The Uint8Array.</span><br><span class="line">   *</span><br><span class="line">   * @static</span><br><span class="line">   *</span><br><span class="line">   * @example</span><br><span class="line">   *</span><br><span class="line">   *     var u8arr = CryptoJS.enc.u8array.stringify(wordArray);</span><br><span class="line">   */</span></span><br><span class="line">  stringify: <span class="function"><span class="keyword">function</span> (<span class="params">wordArray</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Shortcuts</span></span><br><span class="line">      <span class="keyword">var</span> words = wordArray.words;</span><br><span class="line">      <span class="keyword">var</span> sigBytes = wordArray.sigBytes;</span><br><span class="line">      <span class="comment">// Convert</span></span><br><span class="line">      <span class="keyword">var</span> u8 = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(sigBytes);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; sigBytes; i++) &#123;</span><br><span class="line">          <span class="keyword">var</span> byte = (words[i &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; (<span class="number">24</span> - (i % <span class="number">4</span>) * <span class="number">8</span>)) &amp; <span class="number">0xff</span>;</span><br><span class="line">          u8[i]=byte;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> u8;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span><br><span class="line">   * Converts a Uint8Array to a word array.</span><br><span class="line">   *</span><br><span class="line">   * @param &#123;string&#125; u8Str The Uint8Array.</span><br><span class="line">   *</span><br><span class="line">   * @return &#123;WordArray&#125; The word array.</span><br><span class="line">   *</span><br><span class="line">   * @static</span><br><span class="line">   *</span><br><span class="line">   * @example</span><br><span class="line">   *</span><br><span class="line">   *     var wordArray = CryptoJS.enc.u8array.parse(u8arr);</span><br><span class="line">   */</span></span><br><span class="line">  parse: <span class="function"><span class="keyword">function</span> (<span class="params">u8arr</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Shortcut</span></span><br><span class="line">      <span class="keyword">var</span> len = u8arr.length;</span><br><span class="line">      <span class="comment">// Convert</span></span><br><span class="line">      <span class="keyword">var</span> words = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">          words[i &gt;&gt;&gt; <span class="number">2</span>] |= (u8arr[i] &amp; <span class="number">0xff</span>) &lt;&lt; (<span class="number">24</span> - (i % <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> CryptoJS.lib.WordArray.create(words, len);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>插件本身提供一个key、iv、明文均是WordArray的加密方法，而这个WordArray的数据格式长得非常像uint8数据，而<br>这个组件的组件的功能就是是uint8数组和WordArray之间的互相转换。<br>那么有了它我们就可以进行加解密了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 服务端提供的32位key</span></span><br><span class="line"><span class="keyword">var</span> akey = [<span class="number">0x26</span>,<span class="number">0xAF</span>,<span class="number">0xE2</span>,<span class="number">0x1A</span>,<span class="number">0x0C</span>,<span class="number">0x16</span>,<span class="number">0x73</span>,<span class="number">0x54</span>,<span class="number">0x13</span>,<span class="number">0xFD</span>,<span class="number">0x68</span>,<span class="number">0xDD</span>,<span class="number">0x8F</span>,<span class="number">0xA0</span>,<span class="number">0xB7</span>,<span class="number">0xC1</span>,<span class="number">0x57</span>,<span class="number">0xA6</span>,<span class="number">0x90</span>,<span class="number">0xFF</span>,<span class="number">0xCD</span>,<span class="number">0xB3</span>,<span class="number">0x54</span>,<span class="number">0x61</span>,<span class="number">0x10</span>,<span class="number">0x07</span>,<span class="number">0xD5</span>,<span class="number">0x7E</span>,<span class="number">0xDB</span>,<span class="number">0x1E</span>,<span class="number">0x4C</span>,<span class="number">0xE9</span>];</span><br><span class="line"><span class="comment">// 服务端提供的16位iv</span></span><br><span class="line"><span class="keyword">var</span> aiv = [<span class="number">0x15</span>,<span class="number">0x4C</span>,<span class="number">0xD3</span>,<span class="number">0x55</span>,<span class="number">0xFE</span>,<span class="number">0xA1</span>,<span class="number">0xFF</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x34</span>,<span class="number">0xAB</span>,<span class="number">0x22</span>,<span class="number">0x08</span>,<span class="number">0x4F</span>,<span class="number">0x13</span>,<span class="number">0x07</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将key和iv转换成uint8数组</span></span><br><span class="line"><span class="keyword">var</span> keyBv = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(akey);</span><br><span class="line"><span class="keyword">var</span> ivBv = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(aiv);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将key和iv转换成WordArray</span></span><br><span class="line">keyWA = CryptoJS.enc.u8array.parse(keyBv);</span><br><span class="line">ivWA = CryptoJS.enc.u8array.parse(ivBv);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密方法 传入密文的uint8数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decryptU8arry</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> acontent = array;</span><br><span class="line">  <span class="comment">// 将密文转换成WordArray</span></span><br><span class="line">  contentWA = CryptoJS.enc.u8array.parse(acontent);</span><br><span class="line">  <span class="comment">// 插件要求密文是base64格式</span></span><br><span class="line">  <span class="keyword">var</span> dcBase64String = contentWA.toString(CryptoJS.enc.Base64);</span><br><span class="line">  <span class="comment">// 解密 选定mode是CFB类型，无偏移量</span></span><br><span class="line">  <span class="keyword">var</span> decrypted = CryptoJS.AES.decrypt(dcBase64String, keyWA, &#123; iv: ivWA,mode:CryptoJS.mode.CFB,padding:CryptoJS.pad.NoPadding&#125;);</span><br><span class="line">  <span class="comment">// 将解密后的明文转回uint8数组</span></span><br><span class="line">  <span class="keyword">var</span> bv = CryptoJS.enc.u8array.stringify(decrypted);</span><br><span class="line">  <span class="keyword">return</span> bv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密方法 传入明文的uint8数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encryptU8arry</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> acontent = array;</span><br><span class="line">  <span class="comment">// 将明文转换成WordArray</span></span><br><span class="line">  contentWA = CryptoJS.enc.u8array.parse(acontent);</span><br><span class="line">  <span class="comment">// 插件要求明文是base64格式</span></span><br><span class="line">  <span class="keyword">var</span> dcBase64String = contentWA.toString(CryptoJS.enc.Base64);</span><br><span class="line">  <span class="comment">// 加密 选定mode是CFB类型，无偏移量</span></span><br><span class="line">  <span class="keyword">var</span> encrypted = CryptoJS.AES.encrypt(contentWA, keyWA, &#123; iv: ivWA,mode:CryptoJS.mode.CFB,padding:CryptoJS.pad.NoPadding&#125;);</span><br><span class="line">  <span class="comment">// 将密文转回uint8数组</span></span><br><span class="line">  <span class="keyword">var</span> bv = CryptoJS.enc.u8array.stringify(encrypted.ciphertext);</span><br><span class="line">  <span class="keyword">return</span> bv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由此可以对二进制流进行加密解密了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aData = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> dv = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(aData);</span><br><span class="line"><span class="keyword">var</span> enu8 = encryptU8arry(dv); <span class="comment">// 加密后的二进制流</span></span><br><span class="line"><span class="built_in">console</span>.log(enu8);</span><br><span class="line"><span class="keyword">var</span> deu8 = decryptU8arry(enu8); <span class="comment">// 解密后的二进制流</span></span><br><span class="line"><span class="built_in">console</span>.log(deu8);</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近有一个项目，需要前端通过websocket与服务端连接，服务端直接向前端发二进制的数据协议包，但是这个协议包的内容是经过AES加密的，需要前端来解密。</p>
<p>网上大部分的AES算法以及DEMO教程（特别是中文社区）都是简单告诉你，JS如何去加密/解密一个字符串。但由于某些不可抗力，我要做的是在<strong>浏览器端</strong>对二进制字节流直接进行加密解密。</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[TypeArray、ArrayBuffer、Blob的相互转换]]></title>
    <link href="http://www.shihua.im/2015/12/29/20151229_arrayBuffer/"/>
    <id>http://www.shihua.im/2015/12/29/20151229_arrayBuffer/</id>
    <published>2015-12-29T12:00:00.000Z</published>
    <updated>2016-01-05T14:41:43.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><code>Blob</code>是现代浏览器中提供的能够装载二进制流（文件）的容器对象。</li>
<li><code>ArrayBuffer</code>是能够装载<code>Blob</code>（二进制流）数据的原始缓冲区，<code>ArrayBuffer</code>不能直接通过js读写。</li>
<li><code>TypeArray</code>是<code>ArrayBuffer</code>的一种类数组的视图对象，可以将<code>ArrayBuffer</code>按不同字节数读取成类似数组形式的数据类型，从而可以向读写数组元素一样，实现对<code>ArrayBuffer</code>数据的读写。常见的<code>TypeArray</code>包括<code>Uint8Array</code>,<code>Uint16Array</code>,<code>Uint32Array</code>等。<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="external">点这里查看所有的TypedArray</a></li>
</ul>
<p>所以我对三者的理解是： <code>Blob</code> &lt;-&gt; <code>ArrayBuffer</code> &lt;-&gt; <code>TypeArray</code> &lt;—-&gt; <code>Array</code><br>由于<code>TypeArray</code>和<code>Array</code>有些相似，因此往往我会选择在<code>TypeArray</code>这层做处理。<br>下面是<code>TypeArray</code>、<code>ArrayBuffer</code>和<code>Blob</code>之间相互转换的方法。</p>
<a id="more"></a>
<h2 id="Blob_to_ArrayBuffer_（二进制流转ArrayBuffer）">Blob to ArrayBuffer （二进制流转ArrayBuffer）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* websocket的情况下二进制流的获取 */</span></span><br><span class="line"><span class="keyword">var</span> svip = <span class="string">'websocket'</span>;</span><br><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(svip);</span><br><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> message = e.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> blob = message;</span><br><span class="line"><span class="keyword">var</span> fileReader = <span class="keyword">new</span> FileReader();</span><br><span class="line">fileReader.onload  = <span class="function"><span class="keyword">function</span>(<span class="params">progressEvent</span>) </span>&#123;</span><br><span class="line">  arrayBuffer = <span class="keyword">this</span>.result; <span class="comment">// arrayBuffer即为blob对应的arrayBuffer</span></span><br><span class="line">&#125;;</span><br><span class="line">fileReader.readAsArrayBuffer(message);</span><br></pre></td></tr></table></figure>
<h2 id="ArrayBuffer_to_Blob_（ArrayBuffer转Blob）">ArrayBuffer to Blob （ArrayBuffer转Blob）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">32</span>);</span><br><span class="line"><span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([ab]); <span class="comment">// 注意必须包裹[]</span></span><br></pre></td></tr></table></figure>
<h2 id="ArrayBuffer_to_Uint8_（ArrayBuffer转Uint8数组）">ArrayBuffer to Uint8 （ArrayBuffer转Uint8数组）</h2><p>Uint8数组可以直观的看到ArrayBuffer中每个字节（1字节 == 8位）的值。一般我们要将ArrayBuffer转成Uint类型数组后才能对其中的字节进行存取操作。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ab = arrayBuffer; <span class="comment">// arrayBuffer为要转换的值</span></span><br><span class="line"><span class="keyword">var</span> u8 = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(ab);</span><br></pre></td></tr></table></figure>
<h2 id="Uint8_to_ArrayBuffer（Uint数组转ArrayBuffer）">Uint8 to ArrayBuffer（Uint数组转ArrayBuffer）</h2><p>我们Uint8数组可以直观的看到ArrayBuffer中每个字节（1字节 == 8位）的值。一般我们要将ArrayBuffer转成Uint类型数组后才能对其中的字节进行存取操作。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> u8 = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>();</span><br><span class="line"><span class="keyword">var</span> ab = u8.buffer; <span class="comment">// ab即是u8对应的arrayBuffer</span></span><br></pre></td></tr></table></figure>
<h2 id="Array_to_ArrayBuffer（普通数组转ArrayBuffer）">Array to ArrayBuffer（普通数组转ArrayBuffer）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">0x15</span>,<span class="number">0xFF</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x34</span>,<span class="number">0xAB</span>,<span class="number">0x11</span>];</span><br><span class="line"><span class="keyword">var</span> u8 = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(arr);</span><br><span class="line"><span class="keyword">var</span> ab = u8.buffer;</span><br><span class="line"><span class="built_in">console</span>.log(ab); <span class="comment">// ab为要解析的ArrayBuffer</span></span><br></pre></td></tr></table></figure>
<h2 id="获取/设置ArrayBuffer对应的数值">获取/设置ArrayBuffer对应的数值</h2><p>一串ArrayBuffer是可以被“理解”为很多个值的，以下面这个值为例，</p>
<p>按照服务端的协议，这串数据流的格式如下：<br>1 unsign byte (1字节) + 1 unsign int (4字节) + 1 unsign short (2字节)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x03</span>];</span><br><span class="line"><span class="keyword">var</span> u8 = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(arr);</span><br><span class="line"><span class="keyword">var</span> ab = u8.buffer;</span><br><span class="line"><span class="built_in">console</span>.log(ab); <span class="comment">// ab为要解析的ArrayBuffer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> u8 = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(ab, <span class="number">0</span>, <span class="number">1</span>); <span class="comment">// (arraybuffer, 字节解析的起点, 解析的长度)</span></span><br><span class="line"><span class="keyword">var</span> val_byte = u8[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">console</span>.log(val_byte);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析unsign int</span></span><br><span class="line"><span class="comment">// 由于Uint32Array的解析起点必须是4的整数倍，而在流中该数据的起点是1，所以选择先“裁剪”(slice)出要解析的流片段，再用Uint32去解析该片段</span></span><br><span class="line"><span class="keyword">var</span> u32buff = ab.slice(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> u32 = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(u32buff);</span><br><span class="line"><span class="keyword">var</span> val_uint = u32[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">console</span>.log(val_uint);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析unsign short</span></span><br><span class="line"><span class="keyword">var</span> u16buff = ab.slice(<span class="number">5</span>, <span class="number">7</span>);</span><br><span class="line"><span class="keyword">var</span> u16 = <span class="keyword">new</span> <span class="built_in">Uint16Array</span>(u16buff);</span><br><span class="line"><span class="keyword">var</span> val_short = u16[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">console</span>.log(val_short);</span><br></pre></td></tr></table></figure>
<h2 id="TypeArray_to_Array">TypeArray to Array</h2><p>在上文中可以看到，普通数组可以轻松的转换成TypeArray。<br>但TypeArray并不是Array的子集，所以它没有Array的许多方法，比如<code>push</code><br>TypeArray的方法参见：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="external">TypedArray的方法</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x03</span>];</span><br><span class="line"><span class="keyword">var</span> u8 = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(arr);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> u8.push);</span><br></pre></td></tr></table></figure>
<p>所以需要进行转换。<br>TypeArray to Array的方法,在ES6中可以用Array.form实现 （<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="external">什么是Array.form</a>）</p>
<p>也可以比较简单的封装一下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Uint8Array2Array</span>(<span class="params">u8a</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> arr = [];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; u8a.length; i++) &#123;</span><br><span class="line">		arr.push(u8a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li><code>Blob</code>是现代浏览器中提供的能够装载二进制流（文件）的容器对象。</li>
<li><code>ArrayBuffer</code>是能够装载<code>Blob</code>（二进制流）数据的原始缓冲区，<code>ArrayBuffer</code>不能直接通过js读写。</li>
<li><code>TypeArray</code>是<code>ArrayBuffer</code>的一种类数组的视图对象，可以将<code>ArrayBuffer</code>按不同字节数读取成类似数组形式的数据类型，从而可以向读写数组元素一样，实现对<code>ArrayBuffer</code>数据的读写。常见的<code>TypeArray</code>包括<code>Uint8Array</code>,<code>Uint16Array</code>,<code>Uint32Array</code>等。<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray">点这里查看所有的TypedArray</a></li>
</ul>
<p>所以我对三者的理解是： <code>Blob</code> &lt;-&gt; <code>ArrayBuffer</code> &lt;-&gt; <code>TypeArray</code> &lt;—-&gt; <code>Array</code><br>由于<code>TypeArray</code>和<code>Array</code>有些相似，因此往往我会选择在<code>TypeArray</code>这层做处理。<br>下面是<code>TypeArray</code>、<code>ArrayBuffer</code>和<code>Blob</code>之间相互转换的方法。</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[初识arrayBuffer和typeArray]]></title>
    <link href="http://www.shihua.im/2015/12/21/20151221_typearray/"/>
    <id>http://www.shihua.im/2015/12/21/20151221_typearray/</id>
    <published>2015-12-20T16:00:00.000Z</published>
    <updated>2015-12-21T16:48:10.000Z</updated>
    <content type="html"><![CDATA[<p>之前很少接触到这么冷门的知识点，直到最近有一个项目，需要前端通过websocket与服务端连接，服务端直接向前端发二进制的数据包，我才知道js还有这么arrayBuffer和typeArray这两货。我们可以用他们来解析服务端发来的二进制包。</p>
<a id="more"></a>
<h2 id="知识回顾">知识回顾</h2><p>本来以为从事前端就再也不会接触进制、字节等这些晦涩的概念。</p>
<p>没想到苍天饶过谁……</p>
<h3 id="二进制包的相关概念">二进制包的相关概念</h3><p>一般服务端会事先跟我们约定好发来的二进制包的格式，我们称之为<code>协议</code></p>
<p>首先，一般一条二进制包数据会包含多个<code>字节</code>，光凭字节串我们是不能解析出里面的数据含义的。</p>
<p><strong>协议</strong>的作用在于约定了二进制包的数据格式。我们通过协议可以知道二进制串中，从第几个字节到第几个字节表示什么类型数据，从而得出其准确的值。</p>
<p>回归正题，我们先了解一下如何从websocket中读取二进制数据。</p>
<h2 id="如何读取二进制数据">如何读取二进制数据</h2><p><strong>二进制数据是不能直接像其它js的基本数据类型一样直接通过等号获得和显示的。</strong></p>
<p>我们需要用到<code>FileReader</code>对象的<code>readAsArrayBuffer</code>方法读出其中的所有字节并将其转换成js能读取的arrayBuffer数据对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> message = e.data;</span><br><span class="line">  blob = message;</span><br><span class="line">  <span class="keyword">var</span> fileReader     = <span class="keyword">new</span> FileReader();</span><br><span class="line">  fileReader.onload  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// this.result为读取到的二进制包内容</span></span><br><span class="line">      arrayBufferNew = <span class="keyword">this</span>.result;</span><br><span class="line">  &#125;;</span><br><span class="line">  fileReader.readAsArrayBuffer(blob);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ArrayBuffer会在内存中新建一块缓冲区域，用于装载原始的数据包，<br>我们可以理解成，它创建了一个缓冲数组，然后把原始数据包的每个<code>字节</code>的值单独存放于一个数组元素中，但这个数组并不能直接进行读取。<br>我们还需要新建一个<code>TypeArray</code>对象，来读取这个缓冲区域的数据。</p>
<p><code>TypeArray</code>包含下面几种类型。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th style="text-align:center">大小</th>
<th style="text-align:right">描述</th>
<th style="text-align:right">C语言中的等效类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>Int8Array</td>
<td style="text-align:center">1</td>
<td style="text-align:right">8-bit</td>
<td style="text-align:right">signed char</td>
</tr>
<tr>
<td>Uint8Array</td>
<td style="text-align:center">1</td>
<td style="text-align:right">8-bit</td>
<td style="text-align:right">unsigned char</td>
</tr>
<tr>
<td>Int16Array</td>
<td style="text-align:center">2</td>
<td style="text-align:right">16-bit</td>
<td style="text-align:right">short</td>
</tr>
<tr>
<td>Uint16Array</td>
<td style="text-align:center">2</td>
<td style="text-align:right">16-bit</td>
<td style="text-align:right">unsigned short</td>
</tr>
<tr>
<td>Int32Array</td>
<td style="text-align:center">4</td>
<td style="text-align:right">32-bit</td>
<td style="text-align:right">int</td>
</tr>
<tr>
<td>Uint32Array</td>
<td style="text-align:center">4</td>
<td style="text-align:right">32-bit</td>
<td style="text-align:right">unsigned int</td>
</tr>
<tr>
<td>Float32Array</td>
<td style="text-align:center">4</td>
<td style="text-align:right">32-bit</td>
<td style="text-align:right">float</td>
</tr>
<tr>
<td>Float64Array</td>
<td style="text-align:center">8</td>
<td style="text-align:right">64-bit</td>
<td style="text-align:right">double</td>
</tr>
</tbody>
</table>
<p><strong>重点来了</strong></p>
<p>以一个例子为例,首先协议体如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> flag;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> id;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> num;</span><br></pre></td></tr></table></figure>
<p>当我们收到如下面这个字节包时:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x01</span>  <span class="number">0x02</span>   <span class="number">0x03</span>   <span class="number">0x04</span>   <span class="number">0xFF</span>   <span class="number">0xDD</span>   <span class="number">0x4c</span> <span class="number">0x8f</span></span><br></pre></td></tr></table></figure>
<p>我们知道，一个字节占8位，那么我们可以用Uint8Array读取占1字节的数据，可以用Uint16Array读取占2字节的数据。</p>
<p>那么我们可以用Uint8Array来显示数据的每个字节的内容：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arrayBufferNew = <span class="keyword">this</span>.result;</span><br><span class="line">arr  = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(arrayBufferNew);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure></p>
<p>根据协议体，我们知道前2个字节即为flag（char型占2字节），第3-4个字节是id（short型占2字节），而后4个字节则为num（int型占4字节）。</p>
<p>那么读取数据的过程如下： </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fileReader.onload  = <span class="function"><span class="keyword">function</span>(<span class="params">progressEvent</span>) </span>&#123;</span><br><span class="line">  arrayBufferNew = <span class="keyword">this</span>.result;</span><br><span class="line">   <span class="comment">// 从第1个字节索引开始读取1个Uint16Array（即16位，2字节）</span></span><br><span class="line">  cFlag  = <span class="keyword">new</span> <span class="built_in">Uint16Array</span>(arrayBufferNew, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 从第3个字节索引开始读取1个Uint16Array（即16位，2字节）</span></span><br><span class="line">  sID = <span class="keyword">new</span> <span class="built_in">Uint16Array</span>(arrayBufferNew, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 从第5个字节索引开始读取1个Uint32Array（即32位，4字节）</span></span><br><span class="line">  nNum  = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(arrayBufferNew, <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(cFlag[<span class="number">0</span>],sID[<span class="number">0</span>],nNum[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上我们就完成了一条协议数据的读取。</p>
<h2 id="字符串和arrayBuffer的转换">字符串和arrayBuffer的转换</h2><p>如何快速对字符串和arrayBuffer进行转换：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ab2str</span>(<span class="params">buf</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">String</span>.fromCharCode.apply(<span class="literal">null</span>, <span class="keyword">new</span> <span class="built_in">Uint16Array</span>(buf));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str2ab</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(str.length * <span class="number">2</span>); <span class="comment">// 2 bytes for each char</span></span><br><span class="line">  <span class="keyword">var</span> bufView = <span class="keyword">new</span> <span class="built_in">Uint16Array</span>(buf);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, strLen = str.length; i &lt; strLen; i++) &#123;</span><br><span class="line">    bufView[i] = str.charCodeAt(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后，我们就可以将生成的arrayBuffer转成Blob对象（即二进制流），发送给后台：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ab = str2ab(<span class="string">'test'</span>);</span><br><span class="line"><span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([ab]);</span><br></pre></td></tr></table></figure></p>
<p>当然，一般我们在做websocket通讯时还会对数据进行加密，我自己目前也正深陷加密的无底洞中……等从洞里爬出来再总结一下加密相关的内容……</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前很少接触到这么冷门的知识点，直到最近有一个项目，需要前端通过websocket与服务端连接，服务端直接向前端发二进制的数据包，我才知道js还有这么arrayBuffer和typeArray这两货。我们可以用他们来解析服务端发来的二进制包。</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于Rem自适应布局方案的思考]]></title>
    <link href="http://www.shihua.im/2015/12/20/20151220_rem/"/>
    <id>http://www.shihua.im/2015/12/20/20151220_rem/</id>
    <published>2015-12-19T16:00:00.000Z</published>
    <updated>2015-12-21T14:35:26.000Z</updated>
    <content type="html"><![CDATA[<p>最近大半年都在做cocos2d-js方面的项目，所以越来越少接触HTML的业务了，但最近机缘巧合要做一个关于rem分享，之前自己也看网上的一些方法，做了一些rem自适应的case。<br>这次又去对比了一下其它人（厂）的用法，对rem有了新的理解。</p>
<a id="more"></a>
<h2 id="为什么是rem">为什么是rem</h2><p>首先，由于目前大部分团队的设计都只出一种分辨率的设计稿（一般是完美匹配iphone6分辨率），那么一般对于屏幕自适应的思路就是，根据设备屏幕实际的分辨率和设计稿的分辨率进行比较，对页面元素进等比缩放。</p>
<p>最早我们使用的是<code>绝对定位 + 百分比大小</code>的方案，但是这个方案有个明显的软肋是元素的高度不能很好的按百分比进行设置。<br>所以早期的自适应都只是对宽度进行自适应，而元素的高度往往是固定的。或者通过媒体查询进行针对性的适配。</p>
<p>但是随着iphone6的普及，随之而来的是设计稿尺寸的扩大。另外单页应用也越来越火（如各种招聘页面），同时手机设备也越来越多。人们需要寻找一种更好的方案。</p>
<p>我相信rem应该不是为了自适应而生的。rem最初应该只是一个类似于em一样表示相对于根元素字体大小的尺寸单位，即1rem = 1倍html根元素的字体大小，似乎只是为了解决em这个单位只能继承父元素的字体大小的问题。但是它具有下面两个非常重要的特性。</p>
<ul>
<li>与em的其它单位属性不同的是，rem的参照物只有根元素（html）一个。</li>
<li>另外，当根元素的字体大小发生变化时，浏览器会自动将所有元素进行重绘。</li>
</ul>
<p>有机智的人看中了它这种一对多的特性，即只要修改根元素（html标签）的字体大小，页面中所有元素的以rem为单位的css属性都会进行影响。而不需要多余js再去做元素扫描和属性筛选。</p>
<p>这种『一处修改，多处受用』的特点，赋予了原本静态的css样式动态变化的能力，仿佛赋予了css一个全局变量。<br>それでは，我们可以通过修改这个变量的值来一次性调整多个甚至全部元素的属性。</p>
<p><strong>另外，通过rem，我们还可以按高度进行等比例缩放，解决了业界一大痛点</strong></p>
<h2 id="rem的用法">rem的用法</h2><p>正所谓『条条大路通罗马』，关于rem的用法的确很多。我总结了一下网上的一些教程、手机淘宝以及其它几个团队的方案，区别主要在下面两个地方：</p>
<ul>
<li>1、在工作流程上有所区别。</li>
<li>2、在根元素字体大小设定上有区别。</li>
</ul>
<h4 id="工作流上的区别">工作流上的区别</h4><p>在手淘等自动化工具的使用率比较高团队中，前端人员在编写css样式时，是先「以px为单位」完成布局，再由自动化工具自动将这份px作单位的css样式转化成以rem作单位的css文件。</p>
<p>而比如我所在的团队，自动化工具的使用频率很低，因此更倾向于在编写css样式时，直接使用rem赋值。</p>
<p>这也就决定了在rem值的设定上会有一些区别。</p>
<h4 id="rem数值的设定">rem数值的设定</h4><h5 id="手机淘宝的数值设定">手机淘宝的数值设定</h5><p>手机淘宝的思路是 将设计稿的宽度认定为10rem。那么在750px的设计稿上来说，假如元素的设计宽度的150px,即屏幕宽度的10分之2，所以它的宽度是2rem。</p>
<h4 id="手动计算的rem数值设定">手动计算的rem数值设定</h4><p>正如前文所说，对于没有自动化工具而需要手写css的我们来说，我们需要自行计算每个属性的rem的值。</p>
<p>以一个实际例子为例，一般现在主流的设计稿尺寸是750px宽，当我们要布局一个350px X 200px的元素时：</p>
<p>网上有一些教程会让大家将html的font-size设置为10px,那么该元素的样式就是<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">html</span> <span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">10px</span></span></span>; </span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.ele</span> <span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">35rem</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">20rem</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>但是这个方案针对很坑爹啊！！！</strong><br>因为在<code>webkit</code>浏览器中，font-size的最小值是12px啊，因此rem的值就不准了！</p>
<p>所以有的人提出了改进的方案，将font-size设置为20px，上述最小字体的问题就得意解决了：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">html</span> <span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">20px</span></span></span>; </span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.ele</span> <span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">17.5rem</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">10rem</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>但美中不足的是，当布局时，我们还需要去一下 350 / 20 = 17.5，半年下来心算能力肯定要爆表了！</p>
<p>所以，我们寻求一个更好的数值，不仅没有最小字体的问题，还能更好的计算，那就是100px了。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">html</span> <span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">100px</span></span></span>; </span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.ele</span> <span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">3.5rem</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">2rem</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="两者异同">两者异同</h4><p>上面两种方法大同小异，区别主要在于参照物，淘宝的方案对比的是设计稿的宽度，而第二个方法则对比的是一个确切的px值。<br><strong>但从根本上说，两种方法实际上是通过比例的换算，对设计稿进行建模，由此得出的页面实际上是一个比例模型，而rem就变成了调整页面缩放比的入口。</strong>比如当我们设置根元素的字体大小放大一倍时，我们得到的就是放大一倍后的界面。同理当根元素字体缩小一倍，那得到的就是缩小一倍的界面。</p>
<p>那么，实际上，我们要做的就是：根据设备的实际屏幕宽度，调整html字体大小，让界面等比缩放到合适的尺寸。<br>怎么做呢？</p>
<h2 id="动态调整html字体大小">动态调整html字体大小</h2><h4 id="媒体查询">媒体查询</h4><p>一般的项目没有页面高度的限制时，我们可以直接通过媒体查询对常见的设备直接进行适配。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 默认是iphone6 */</span></span><br><span class="line"><span class="tag">html</span><span class="rules">&#123; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">50px</span></span></span>; &#125;</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> screen and (max-width:<span class="number">359px</span>) and (orientation:portrait) </span>&#123;</span><br><span class="line">    <span class="tag">html</span> <span class="rules">&#123; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">46.667px</span></span></span>; &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 常见的安卓机 */</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> screen and (min-width:<span class="number">360px</span>) and (max-width:<span class="number">374px</span>) and (orientation:portrait) </span>&#123;</span><br><span class="line">    <span class="tag">html</span> <span class="rules">&#123; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">48px</span></span></span>; &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 某些冷门的安卓机 如nexus4 */</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> screen and (min-width:<span class="number">384px</span>) and (max-width:<span class="number">399px</span>) and (orientation:portrait) </span>&#123;</span><br><span class="line">    <span class="tag">html</span> <span class="rules">&#123; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">51.333px</span></span></span>; &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 某些冷门的安卓机 如nexus6 */</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> screen and (min-width:<span class="number">400px</span>) and (max-width:<span class="number">413px</span>) and (orientation:portrait) </span>&#123;</span><br><span class="line">    <span class="tag">html</span> <span class="rules">&#123; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">53.333px</span></span></span>; &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* iphone6 plus */</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> screen and (min-width:<span class="number">414px</span>) and (max-width:<span class="number">431px</span>) and (orientation:portrait)</span>&#123;</span><br><span class="line">    <span class="tag">html</span> <span class="rules">&#123; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">55.2px</span></span></span>; &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 以下是其它设备 */</span></span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> screen and (min-width:<span class="number">432px</span>) and (max-width:<span class="number">479px</span>) and (orientation:portrait)</span>&#123;</span><br><span class="line">    <span class="tag">html</span> <span class="rules">&#123; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">57.6px</span></span></span>; &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> screen and (min-width:<span class="number">480px</span>)and (max-width:<span class="number">639px</span>) and (orientation:portrait)</span>&#123;</span><br><span class="line">   <span class="tag">html</span><span class="rules">&#123; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">64px</span></span></span>;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="at_rule">@<span class="keyword">media</span> screen and (min-width:<span class="number">640px</span>) and (orientation:portrait)</span>&#123;</span><br><span class="line">   <span class="tag">html</span><span class="rules">&#123; <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">85.333px</span></span></span>;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="通过js动态调整">通过js动态调整</h4><p>通过媒体查询只是能大致的对屏幕进行适配，但不能做到十分精准的适配。<br>另外，当我们在做一些单页应用时，需要把所有内容都装在一屏范围内，这就不可避免的考虑一些屏幕比较短的手机的情况了。</p>
<p>比如目前设计稿基本都是针对iphone6的尺寸进行设计（375*667）。那么如果按照宽度等比缩放时，iphone4s/4这种最高只有480px的短屏是装不完的。</p>
<p>それでは，这种情况下我们要根据屏幕高度进行缩放。</p>
<p>通过js实现如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在设计稿中通常我们会去掉微信浏览器头部的128px，所以设计稿页面高度认为是1206px</span></span><br><span class="line"><span class="keyword">var</span> px = $(<span class="built_in">window</span>).height() / $(<span class="built_in">window</span>).width() &lt; <span class="number">1.5</span> ? ($(<span class="built_in">window</span>).width() / <span class="number">750</span> * <span class="number">100</span> + <span class="string">'px'</span>) : $(<span class="built_in">window</span>).height() / <span class="number">1206</span> * <span class="number">100</span> + <span class="string">'px'</span>);</span><br><span class="line">$(<span class="string">'html'</span>).css(<span class="string">'font-size'</span>, px);</span><br></pre></td></tr></table></figure>
<p>这里不得不提一下<code>viewport</code>，通常情况下，我们把viewport的scale=1就可以应对绝大多数的页面了。<br>但是可能有一些同学也知道，<strong>在scale=1的情况下，ios这种视网膜屏幕（通常所说的1倍屏、2倍屏）是显示不了1px的细线的。</strong><br>首先在产品设计层面，如果可以避免这些细线的出现，那就可以少掉一些工作。<br>解决1px细线的办法其实不少。<br>这里我们可以参照淘宝的做法，当设备是ios设备时，根据屏幕的像素比，动态设置viewport<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ua = navigator.userAgent.toLowerCase();</span><br><span class="line"><span class="keyword">if</span> (<span class="regexp">/iphone|ipad|ipod/</span>.test(ua)) &#123;</span><br><span class="line">  <span class="keyword">var</span> sc = <span class="number">1</span> / <span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line">  $(<span class="string">'meta[name="viewport"]'</span>).attr(<span class="string">'content'</span>, <span class="string">'initial-scale='</span>+ sc +<span class="string">', maximum-scale='</span>+ sc +<span class="string">', minimum-scale='</span>+ sc +<span class="string">', user-scalable=no'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>需要注意的是，<code>viewport</code>必须在<code>font-size</code>之前设置，否则在获取屏幕宽度时候取到的值不准确。</strong></p>
<h2 id="总结">总结</h2><p>总的来说，rem的自适应方案的思路就是利用了rem这个相对尺寸的特性，将设计稿转化成为一个比例模型，然后再根据设备的屏幕尺寸，通过调整rem的实际大小（即根元素的字体大小），将这一比例模型缩放到合适的大小，进而实现屏幕自适应。</p>
<p>只是这个比例模型的参照系可能不一样（如有的以100px作为参照，而有的以屏幕宽度作为参照），另外，如何计算出这个比例模型的方式可能不一样（如有的团队使用自动化工具，而有的团队通过人工计算）。<br>那这些问题是留给每个团队自己去思考的了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近大半年都在做cocos2d-js方面的项目，所以越来越少接触HTML的业务了，但最近机缘巧合要做一个关于rem分享，之前自己也看网上的一些方法，做了一些rem自适应的case。<br>这次又去对比了一下其它人（厂）的用法，对rem有了新的理解。</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[用Cocos2d-Js-lite快速开发H5游戏]]></title>
    <link href="http://www.shihua.im/2015/12/01/20151220_cocos2dGame/"/>
    <id>http://www.shihua.im/2015/12/01/20151220_cocos2dGame/</id>
    <published>2015-11-30T16:00:00.000Z</published>
    <updated>2015-12-20T14:31:59.000Z</updated>
    <content type="html"><![CDATA[<p>cocos2d-js-lite是一个cocos2d的轻量化精简版本，只保留了cocos2d-js的一些核心方法。<br>它所包含的特性列表如下：</p>
<pre><code><span class="bullet">+ </span>Canvas渲染器 (不支持WebGL)
<span class="bullet">+ </span>场景和图层
<span class="bullet">+ </span>事件管理器
<span class="bullet">+ </span>计时器
<span class="bullet">+ </span>精灵和贴图
<span class="bullet">+ </span>TTF文本
<span class="bullet">+ </span>声音
<span class="bullet">+ </span>动作
<span class="bullet">+ </span>菜单和菜单项
</code></pre><p>与cocos2d-js完整版一个最大的不同就是，lite版把引擎的所有模块都放到一个文件里，，开发者只需像引入一个jQuery库一样引入一个文件即可。<strong>另外，lite是基于纯原生js编写，所以无须像<code>白鹭引擎</code>（基于Typescript）要先经过编译才能在浏览器中打开，因此在开发体验上感觉与传统前端开发更为接近。</strong></p>
<a id="more"></a>
<p>从lite版包含的特性来看，它更适合开发轻度的H5游戏。</p>
<h2 id="为何要用cocos2d-js-lite">为何要用cocos2d-js-lite</h2><p>在不使用游戏引擎的前提下，也可以用纯原生js + canvas + div + css制作出一款H5游戏。<br>所以所以要明白用这个游戏引擎能给我们带来什么好处。由此来决定我们需不需要它。</p>
<p>cocos下面几个特性可以提升游戏的开发进度和质量。</p>
<blockquote>
<ol>
<li>提供了资源预加载的方法，可以加载多种资源</li>
<li>可以非常简单的制作各种位移、拉伸、旋转等动画</li>
<li>提供了事件的监听和管理</li>
<li>提供了强大无脑的屏幕自适应方案</li>
<li>提供了高性能的声音及音效的播放功能</li>
<li>引擎仅300kb，对于H5应用可以接受</li>
</ol>
</blockquote>
<h2 id="cocos2d的世界中的元素">cocos2d的世界中的元素</h2><p><strong>好戏开场了</strong></p>
<p>在制作游戏时，我们主要会用到下面四层元素：</p>
<blockquote>
<p>view：可以看作是一个视窗，即游戏内容的载体（可以比作舞台）。<br>Scene：舞台中一级容器就是场景。<br>Layer：场景中又可以分成很多『层』。<br>Sprite：每一个层中又可以包含很多个小的元素(如舞台上的角色）。</p>
</blockquote>
<p>跟HTML中的div盒模型做类比，以上元素的对应关系大致如下：</p>
<blockquote>
<p>view —— document、window<br>Scene —— html<br>Layer —— body<br>Sprite —— div、p等</p>
</blockquote>
<h2 id="引擎的游戏入口">引擎的游戏入口</h2><h2 id="1-如何启动引擎">1.如何启动引擎</h2><p>lite版本中启动引擎的方法非常简单，只需像引入jquery一样在html中引入’cocos2d-js-v3.7-lite.js’文件即可。<br>然后在在body中加入一个canvas元素，然后在游戏配置文件（即根目录下的project.json）的<code>id</code>字段中填入该canvas的id即可。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"cocos2d-js-v3.7-lite.js"</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">canvas</span> <span class="attribute">id</span>=<span class="value">"gameCanvas"</span> <span class="attribute">width</span>=<span class="value">"750"</span> <span class="attribute">height</span>=<span class="value">"1334"</span>&gt;</span><span class="tag">&lt;/<span class="title">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-如何开启游戏">2.如何开启游戏</h2><p>首先看看游戏配置文件（即根目录下的project.json）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"debugMode"</span>     : <span class="number">1</span>,</span><br><span class="line">    <span class="string">"frameRate"</span>     : <span class="number">60</span>,</span><br><span class="line">    <span class="string">"id"</span>            : <span class="string">"gameCanvas"</span>,</span><br><span class="line">    <span class="string">"renderMode"</span>    : <span class="number">1</span>,</span><br><span class="line">    <span class="string">"showFPS"</span>       : <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"jsList"</span>        : [</span><br><span class="line">      <span class="string">"j/GameScene.js"</span></span><br><span class="line">    , <span class="string">"j/StartScene.js"</span></span><br><span class="line">    , <span class="string">"j/GameControler.js"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以在该文件中设置调试模式、帧数、渲染模式、是否显示FPS信息等等。</p>
<p>可以看demo中的index.html,当游戏引擎文件加载完毕时，会触发window.onload事件，然后我们就可以通过run方法来启动游戏了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">cc.game.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当游戏开始run后，它首先根游戏的配置文件进行初始化设置调试魔术、帧数、渲染模式等，然后加载配置文件的「jsList」中的js文件。一般这些js文件就是游戏的各个模块。<br>当这些js文件都加载完毕后，就会触发一个cc.game.onStart事件，这时候游戏就算启动完毕了。<br>当然，当游戏onStart完毕后，引擎只是提供了一块随时待命的舞台（即canvas），我们还需要自己去做一些适配、资源加载等准备工作，最后再进入游戏的初始场景。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cc.game.onStart = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 检测浏览器环境，如果是ios下则启动retina模式，有助于增强引擎渲染效果（可选项）</span></span><br><span class="line">  <span class="keyword">if</span> (cc.sys.IOS || cc.sys.OS_OSX) &#123;</span><br><span class="line">    cc.view.enableRetina(<span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 设置游戏的预设大小（即设计稿大小）和适配方案</span></span><br><span class="line">  cc.view.setDesignResolutionSize(<span class="number">750</span>, <span class="number">1334</span>, cc.ResolutionPolicy.EXACT_FIT);</span><br><span class="line">  <span class="comment">// 让游戏随着浏览器屏幕大小伸缩变化</span></span><br><span class="line">  cc.view.resizeWithBrowserSize(<span class="literal">true</span>);</span><br><span class="line">  <span class="comment">//加载静态资源，包括图片、声音、字体等资源，res_list是一个包含资源路径的数组</span></span><br><span class="line">  cc.LoaderScene.preload(res_list, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">      cc.director.runScene(<span class="keyword">new</span> GameScene());</span><br><span class="line">  &#125;, <span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="自适应方案">自适应方案</h2><p>引擎提供了屏幕的五种适配方案，我们只需要设置好游戏预设的大小（即设计稿的大小）以及<a href="http://http://www.cocos2d-x.org/docs/manual/framework/html5/v2/resolution-policy-design/zh" target="_blank" rel="external">适配的方案</a>, 引擎就会自动完成游戏适配工作。<br>与此同时，我们在游戏中对元素的布局可以完全根据设计稿来1：1的制作，而再也不用自己费心去做适配的计算和处理啦！<br>比如这个游戏的设计稿是iphone6的屏幕大小，然后我选用的适配方案是全拉伸到覆盖屏幕的全部区域。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc.view.setDesignResolutionSize(<span class="number">750</span>, <span class="number">1334</span>, cc.ResolutionPolicy.EXACT_FIT);</span><br></pre></td></tr></table></figure></p>
<h2 id="预加载">预加载</h2><p>引擎自带了一个预加载模块（页面），只需要调用cc.LoaderScene.preload即可。</p>
<p>但是这个preload的界面默认会有cocos2d的logo呀，这样似乎不太好看呀。<br>这时候我们可以打开引擎的源文件，然后搜索<code>_loaderImage</code>，把这个图片（base64格式）替换成自己的图片。<br>同理，还可以将preload加载时显示的文字和其它属性进行修改。这里不多做扩展。</p>
<p><strong>当然也可以通过cc.Loader.load方法完全自定义一个加载模块</strong></p>
<p>当资源加载完毕后，我们可以调用cc.director.runScene()进入某以个场景，如上面代码中的GameScene。</p>
<h2 id="游戏场景_Scene">游戏场景 Scene</h2><p>在开启一个场景(Scene)前,我们要先定义它，首先用cc.Scene.extend方法返回一个Scene对象，<br>这里的entend类似java等oop语言中的<code>继承</code>的概念……<br>简单的说就是通过这个方法，新生成的这个类就具备了跟<code>原始类</code>（cc.Scene）的属性和方法。同时我们可以对原始类中定义书属性和方法进行<code>重写</code>。<br>比如下面的代码中，我们对onEnter方法进行了重写。<br>onEnter是Scene的入口方法，当我们new一个Scene时会首先进入这个方法（类似Java中的Main）。通常我习惯在这个时候对将Layer元素插入到Scene中。</p>
<p>但要注意这里不能省去调用this._super()方法，这个方法的含义是去继承父类的<code>构造函数</code>（即cc.Scene的构造函数），将GameScene类<code>实例化</code>，当我们把类实例化之后，才能愉快的调用（访问）它的各个方法和变量。</p>
<p>简单的说，在进入场景时，我们要先初始化场景，调用this._super(),然后再进行其它操作。 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> GameScene = cc.Scene.extend(&#123;</span><br><span class="line">  onEnter:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._super();</span><br><span class="line">&#125;）</span><br></pre></td></tr></table></figure>
<h2 id="场景分层_Layer">场景分层 Layer</h2><p>Scene的下一层容器即为Layer，当然，Scene也可以直接插入Sprite元素。<br><strong>实际上cocos2d中这些元素都只是一个虚构的概念，从属关系并没有这么严格，除了scene必须作为第一层容器之外，sprite<br>、layer等层级都没有严格的规定，</strong></p>
<p>比如sprite可以直接插入到一个Scene中，而Sprite也可以插入到另一个Sprite中。</p>
<p>Layer和Sprite也有一定的区别：</p>
<blockquote>
<ol>
<li>Layer容器默认大小是全屏（即一个全空的Layer默认和屏幕一样大），而Sprite默认大小为0x0。</li>
<li>Layer容器的的锚点默认在容器的左下角，而Sprite的锚点则在的中点（水平和垂直的中点）</li>
</ol>
</blockquote>
<p>这里讲到一个<code>锚点</code>的概念，实际上就是元素布局对齐时的基准点。<br>说到基准点，首先回到HTML和CSS的世界的定位系统，当我们用 <code>绝对定位 + left + top</code> 的组合对div进行定位时，div的锚点（基准点）就是div的左上角啦，而整个世界的定位的坐标系的出发点就是视窗的左上角，这时候我们所定义的left和top值就是div的左上角相对于视窗左上角的距离了。所以按前端习惯的工作流，我们在切设计稿时所测量的距离一般都是元素跟设计稿左上角的距离。</p>
<p>那么回到cocos的世界，不得不说，cocos的定位系统就是很反前端的，首先这个世界的坐标系默认出发点是左下角，也就是说，当我们要对元素进行布局时，默认的参考点就变成设计稿的左下角了。其次，更坑爹的是，当元素是Sprite时，你要量的距离不是设计稿左下角到元素左下角的距离，而是到元素中点的距离。<br>由于这个锚点会影响到元素的运动和裁切等功能，所以这个设定可能会让习惯了HTML世界开发的前端感到难以接受……</p>
<p>纯天然的Layer默认是透明的，当我们想创建一个带颜色的Layer时，可以继承一个Layer的派生类LayerColor，这样就可以生生成一个带背景色的Layer了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bg = <span class="keyword">new</span> cc.LayerColor(cc.color(<span class="number">42</span>, <span class="number">89</span>, <span class="number">132</span>));</span><br><span class="line">bg.setContentSize(<span class="number">100</span>,<span class="number">200</span>);</span><br><span class="line">bg.setPosition(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">this</span>.addChild(bg);</span><br></pre></td></tr></table></figure></p>
<p>另外提一下cc.color这个方法，它可以返回一个cocos中默认的颜色数据，所以你用RGB的值（<code>cc.color(R, G, B)</code>）或者十六进制的形式（<code>cc.color(#000000)</code>）都可以生成颜色，非常方便。<br>此外cocos还提供了类似的一些方法，都会返回cocos默认的数据格式，比如：</p>
<pre><code><span class="number">1</span>. cc.<span class="function"><span class="title">p</span><span class="params">()</span></span> 返回元素定位数据
<span class="number">2</span>. cc.<span class="function"><span class="title">size</span><span class="params">()</span></span> 返回元素大小数据
<span class="number">3</span>. cc.<span class="function"><span class="title">rect</span><span class="params">()</span></span> 返回要一个矩形选区的数据（类似ps中的选区概念）
</code></pre><h2 id="精灵元素_Sprite">精灵元素 Sprite</h2><p>精灵就是游戏中最基本的元素了，常用的精灵包括Sprite（显示图片）、LabelTTF（显示图片）、和MenuItemSprite（显示按钮）。</p>
<h3 id="生成Sprite">生成Sprite</h3><p>Sprite生成的方法跟Layer类似，我们在create方法中传入图片的路径，即可得到该图片相对应的Sprite。<br>注意到create方法中的第二个参数rect，可以有cc.rect(x, y, width,height)获得，rect是一个矩形选区的概念，如果传入该值，那么引擎就会从传入的图片中截取选中区域的图片。<br>因此，雪碧图在游戏开发时非常好用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.hand = cc.Sprite.create(oRes[<span class="string">'hand'</span>][<span class="string">'src'</span>], rect);</span><br><span class="line"><span class="keyword">this</span>.hand.setPosition(size.width / <span class="number">2</span> + <span class="number">100</span>, oRes[<span class="string">'hand'</span>][<span class="string">'height'</span>] / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">this</span>.addChild(<span class="keyword">this</span>.hand);</span><br></pre></td></tr></table></figure></p>
<h3 id="生成LabelTTF">生成LabelTTF</h3><p>LabelTTF似乎已经是lite版本中动态显示图片的唯一方案了，在生成一个LabelTTF对象时，我们可以指定它的内容、所用的字体（ttf格式的字体或者系统自带字体）、字体大小、元素所占区域大小、对齐方式等等）;<br>然后我们可以通过getString方法和setString获取、设置label的内容；<br>还可以通过setColor设置文字的颜色。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.lbMoney = cc.LabelTTF.create(<span class="string">'0'</span>, <span class="string">'Arial'</span>, <span class="number">64</span>, cc.size(<span class="number">200</span>, <span class="number">64</span>), cc.TEXT_ALIGNMENT_RIGHT);</span><br><span class="line"><span class="keyword">this</span>.lbMoney.setPosition(size.width / <span class="number">2</span>  + <span class="number">50</span>, size.height / <span class="number">2</span> + <span class="number">455</span>);</span><br><span class="line"><span class="keyword">this</span>.lbMoney.setColor(cc.color(<span class="string">'#2a5984'</span>))</span><br><span class="line"><span class="keyword">this</span>.addChild(<span class="keyword">this</span>.lbMoney, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">this</span>.lbMoney.setString(nData);</span><br></pre></td></tr></table></figure></p>
<h2 id="生成按钮">生成按钮</h2><p>由于引擎基于canvas绘制，所以绘制的元素就不能逐一的绑定通常我们所认知的click、hover等这些html世界中的事件。<br>所以按钮似乎是cocos世界里唯一可以个简单的一对一绑定点击事件的方法了。<br>在cocos中按钮又叫菜单，它的结构必须是这样的 菜单（menu） -》 菜单项（menuItem）<br>因此我们首先要生成1个和多个menuItem，然后再把它（们）添加到menu（类似于Layer）中，这样每个menuItem才能发挥作用。<br>首先在创建item时，item分为两种方法：</p>
<ol>
<li><p>MenuItemSprite</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sp1 = cc.Sprite.create(oRes1[<span class="string">'src'</span>], rect1);</span><br><span class="line"><span class="keyword">var</span> sp2 = cc.Sprite.create(oRes2[<span class="string">'src'</span>], rect2);</span><br><span class="line"><span class="keyword">var</span> mis = cc.MenuItemSprite.create(sp1, sp2, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;, <span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>MenuItemImage</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oRes = sResName;</span><br><span class="line"><span class="keyword">var</span> mii = cc.MenuItemImage.create(oRes[<span class="string">'src'</span>], oRes[<span class="string">'src'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>所以机智的你一定知道怎样做文字的按钮啦，两个LabelTTF完事：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sp1 = cc.LabelTTF.create(<span class="string">'start'</span>, <span class="string">'Arial'</span>, <span class="number">64</span>, cc.size(<span class="number">100</span>, <span class="number">64</span>), cc.TEXT_ALIGNMENT_RIGHT);</span><br><span class="line">sp2 = cc.LabelTTF.create(<span class="string">'start'</span>, <span class="string">'Arial'</span>, <span class="number">64</span>, cc.size(<span class="number">100</span>, <span class="number">64</span>), cc.TEXT_ALIGNMENT_RIGHT);</span><br><span class="line"><span class="keyword">var</span> mi = cc.MenuItemSprite.create(sp1, sp2, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1111</span>);</span><br><span class="line">&#125;, <span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">var</span> me = cc.Menu.create(mi);</span><br></pre></td></tr></table></figure></p>
<h2 id="动作">动作</h2><p>cocos中的动作是引擎的一大优势，用起来非常简单，以位移动作为例：<br>以cc.moveBy方法可以创建一个相对位移的动作，比如这样先相对Y轴唯一40px;<br>然后FadeIn和FadeOut顾名思义是淡入淡出的动作。<br>然后注意到spawn方法，这个返回的是多个动作同时执行的效果。<br>而Sequence方法则可以返回多个动作按顺序依次执行的效果。</p>
<p>当想要在某些动作之后想执行某个方法时，可以用cc.callFunc生成一个callback对象，加入到sequenece对象中即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m0 = cc.FadeIn.create(<span class="number">0.3</span>);</span><br><span class="line"><span class="keyword">var</span> m1 = cc.moveBy(<span class="number">.3</span>, cc.p(<span class="number">0</span>,<span class="number">40</span>));</span><br><span class="line"><span class="keyword">var</span> m2 = cc.moveBy(<span class="number">.3</span>, cc.p(<span class="number">0</span>, <span class="number">10</span>));</span><br><span class="line"><span class="keyword">var</span> m3 = cc.FadeOut.create(<span class="number">0.7</span>);</span><br><span class="line"><span class="keyword">var</span> m4 = cc.Spawn.create(m0, m1);</span><br><span class="line"><span class="keyword">var</span> m5 = cc.Spawn.create(m2, m3);</span><br><span class="line"><span class="keyword">var</span> m6 = cc.moveBy(<span class="number">.3</span>, cc.p(<span class="number">0</span>, -<span class="number">50</span>));</span><br><span class="line"><span class="keyword">var</span> callback = <span class="keyword">new</span> cc.CallFunc(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// todo</span></span><br><span class="line">&#125;, self);</span><br><span class="line"><span class="keyword">var</span> m = cc.Sequence.create(m4, m5, m6, callback);</span><br></pre></td></tr></table></figure>
<h2 id="事件监听和碰撞检测">事件监听和碰撞检测</h2><p>前面提到过，游戏中事件监听很难单独对某个元素绑定事件，所以得转变一下思路。<br>当我们要监听某些元素的touch等一系列事件时，<br>首先我们可以监听到的是整个窗口的touchbegan、onTouchesMoved、onTouchesEnded等事件，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">cc.eventManager.addListener(&#123;</span><br><span class="line">  event: cc.EventListener.TOUCH_ONE_BY_ONE</span><br><span class="line">, swallowTouches: <span class="literal">true</span></span><br><span class="line">, onTouchBegan: <span class="function"><span class="keyword">function</span>(<span class="params">touch, event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> location = touch.getLocation();</span><br><span class="line">    <span class="keyword">var</span> oRealLc = self.convertToNodeSpace(location);</span><br><span class="line">    <span class="keyword">var</span> _x = oRealLc.x;</span><br><span class="line">    <span class="keyword">var</span> _y = oRealLc.y;</span><br><span class="line">    <span class="comment">// sth to do</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="keyword">this</span>);</span><br><span class="line">cc.eventManager.addListener(&#123;</span><br><span class="line">  prevTouchId: -<span class="number">1</span></span><br><span class="line">, swallowTouches: <span class="literal">true</span></span><br><span class="line">, event: cc.EventListener.TOUCH_ALL_AT_ONCE</span><br><span class="line">, onTouchesMoved:<span class="function"><span class="keyword">function</span> (<span class="params">touches, event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> touch = touches[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> location = touch.getLocation();</span><br><span class="line">    <span class="keyword">var</span> oRealLc = self.convertToNodeSpace(location);</span><br><span class="line">    <span class="keyword">var</span> _x = oRealLc.x;</span><br><span class="line">    <span class="keyword">var</span> _y = oRealLc.y;</span><br><span class="line">    <span class="comment">// sth to do</span></span><br><span class="line">  &#125;</span><br><span class="line">, onTouchesEnded: <span class="function"><span class="keyword">function</span>(<span class="params">touches, event</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// sth to do</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="keyword">this</span>);</span><br></pre></td></tr></table></figure></p>
<p>然后我们可以判断事件的触发点是否在我们要绑定的元素上。<br>所以问题就变成了，如何判断某个坐标点是否在某个元素显示的区域上，<br>这个问题其实和检测两个元素是否发生碰撞类似，都会用到一个rectContainsPoint的方法，首先用cc.rect获取要判断的元素的矩形选中区域，然后oPoint为事件触发的坐标点，那么这个方法即可返回oPoint是否再oRect中了（上面的代码中中convertToNodeSpace可以将坐标点转化成指定元素为基准的坐标点）;</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oRect = cc.rect(startX, startY, w, h);</span><br><span class="line"><span class="keyword">var</span> oPoint = cc.p(_x, _y);</span><br><span class="line">cc.rectContainsPoint(oRect, oPoint)</span><br></pre></td></tr></table></figure>
<h2 id="播放声音">播放声音</h2><p>传入参数：声音url、是否循环<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cc.audioEngine.playEffect(sSoundUrl, <span class="literal">false</span>);</span><br><span class="line">cc.audioEngine.playMusic(sSoundUrl, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p>
<h2 id="定时器">定时器</h2><p>定时器也是cocos中一个非常方便的功能，当然也可以用其它方法实现。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cc.director.getScheduler().scheduleCallbackForTarget(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// sth to do</span></span><br><span class="line">&#125;, <span class="number">1</span>, <span class="number">0</span> , <span class="number">1</span>);</span><br></pre></td></tr></table></figure></p>
<h2 id="简单总结优缺点">简单总结优缺点</h2><p><em>首先要吐槽一下lite版本不支持的2个实用功能</em></p>
<blockquote>
<ol>
<li>不支持位图字体labelBMFont方法</li>
<li>不支持从plist生成元素（当然传统前端并不知道这有啥用）</li>
</ol>
</blockquote>
<h3 id="优点">优点</h3><blockquote>
<ol>
<li>框架轻巧，适合web方向的游戏开发</li>
<li>系统功能完善，提供了预加载、截取雪碧图、绘图、动画、事件监听管理、定时器等调用方法非常简单的方法</li>
</ol>
</blockquote>
<p>很多缺点都是见仁见智的，这里我只举几个我认为比较硬伤的问题。</p>
<h3 id="缺点">缺点</h3><blockquote>
<ol>
<li><p>引擎将需要引入的js文件罗列在一个project.json的文件中，而这个json文件是在引擎启动后再通过XHR加载的，加之引擎本身的版本号管理功能不是很完善，很容易由于现代浏览器强力的缓存机制而造成项目文件不易更替。因此不适合用在需要经常变更版本或代码的游戏上，当然这点可以通过修改引擎源码解决。</p>
</li>
<li><p>引擎的预加载方法没有提供回调，当资源加载失败时不能很好的做一些补救措施。举一个实际碰到的问题：在我们的项目中用到了CDN的加速方案，这时候图片其实都是访问CDN获取的，但是由于<strong>某些坑爹的网络提供商的流氓拦截</strong>、<strong>用户使用了某些网络加速器</strong>、<strong>CDN有万分之几的访问失败几率</strong>造成CDN上的图片资源不能正常加载，这个时候引擎就有可能会报错了。而实际上这时候我们更希望引擎能够做一些<code>回源</code>的处理，访问源服务器上的资源，这样出错而造成游戏不能玩的几率可能会大大降低。当然这点也可以通过修改引擎解决……</p>
</li>
<li><p>自适应方案看上去很厉害，但是在一些特殊运用时还是不尽如人意，比如想在竖屏环境下自动将横版游戏旋转过来，就不是很好做，通过自适应方案得出来的结果也会怪怪的。感兴趣的可以自己试试。</p>
</li>
<li><p>声音加载时在安卓手机上有bug，会在加载时把音效播放出来……</p>
</li>
</ol>
</blockquote>
<h3 id="demo地址">demo地址</h3><p><strong><em> <a href="https://github.com/shihuacivis/gameCountMoney" target="_blank" rel="external">DEMO的github地址</a> </em></strong></p>
<p><strong>未完待续</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>cocos2d-js-lite是一个cocos2d的轻量化精简版本，只保留了cocos2d-js的一些核心方法。<br>它所包含的特性列表如下：</p>
<pre><code><span class="bullet">+ </span>Canvas渲染器 (不支持WebGL)
<span class="bullet">+ </span>场景和图层
<span class="bullet">+ </span>事件管理器
<span class="bullet">+ </span>计时器
<span class="bullet">+ </span>精灵和贴图
<span class="bullet">+ </span>TTF文本
<span class="bullet">+ </span>声音
<span class="bullet">+ </span>动作
<span class="bullet">+ </span>菜单和菜单项
</code></pre><p>与cocos2d-js完整版一个最大的不同就是，lite版把引擎的所有模块都放到一个文件里，，开发者只需像引入一个jQuery库一样引入一个文件即可。<strong>另外，lite是基于纯原生js编写，所以无须像<code>白鹭引擎</code>（基于Typescript）要先经过编译才能在浏览器中打开，因此在开发体验上感觉与传统前端开发更为接近。</strong></p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[此处功能日后必改，不要写死]]></title>
    <link href="http://www.shihua.im/2015/11/18/20150918_codeBeter/"/>
    <id>http://www.shihua.im/2015/11/18/20150918_codeBeter/</id>
    <published>2015-11-17T16:00:00.000Z</published>
    <updated>2015-12-20T08:54:40.000Z</updated>
    <content type="html"><![CDATA[<p>最近有一张神图，大意是产品说『此处功能日后必改，不要写死』</p>
<p>间接的吐槽了产品狗就是喜欢糊逼改需求，因此我们的代码千万不能写成hardcode。</p>
<p>也许你曾经听过hardcode，有的人用它来形容很难懂的代码，很形象，你的代码很硬，所以不能适应变化。</p>
<p>而这里我想说的是一种编码习惯：</p>
<p><strong>将程序体中要调用的变量直接写死代码中。</strong></p>
<a id="more"></a>
<p>比如我们要计算一个边长是100的正方形面积：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span> * <span class="number">100</span>;</span><br></pre></td></tr></table></figure></p>
<p>因为我们会习惯性的认为100是一个确定的值，我们就直接用数字里表明，而不是一个变量。</p>
<p>那么这个时候就会带来两个问题：</p>
<ol>
<li>100这个数值的含义不清楚。当代码交到别人手上，或者过了一段时间后自己再回来看时，可能就不清楚这个100是什么意思了。这就变成了传说中的<code>magic number</code>；</li>
<li>如果有一天，正方形的边长变了，是不是就要把数值改变了呢？假设这个边长在程序中多个地方进行运算，与此同时如果程序中有其它变量的值也是100，那么改起来就头疼了；</li>
</ol>
<p>所以一个良好的编程习惯就是少用hardcode。这会让你的代码质量（可读性、复用性等）有一个质的飞跃</p>
<p><strong>注意，避免hardcode是一种编程的思想，而不是简单的把数值变量化</strong></p>
<h2 id="目的">目的</h2><p>首先要先清楚去除hardcode的目的：</p>
<blockquote>
<ol>
<li>让代码更加语义化。让自己/他人在阅读（审查）代码时都能很快的看懂某一个变量、方法等的意思；</li>
<li>提高代码的复用性。在去除hardcode的过程中，其实我们已经将数值相同的变量的入口提取出来（抽取共性），这样就只需要一处修改、多处受用了。</li>
<li>提高效率。避免在编码过程中认为输错某些字符而出错……</li>
</ol>
</blockquote>
<h2 id="几个经典的应用：">几个经典的应用：</h2><h3 id="ajax的url">ajax的url</h3><p>很多时候某个请求地址的用途很难从url字面看懂（如a.php），如果我们将其提取出来，放到一个oUrl[‘getUserInfo’]对象中。<br>那么首先它的作用就可以从字面上理解了，getUserInfo嘛。<br>其实还有一个更大好处，在实际项目中，当前后端分工明确时，前端常常需要自己测试ajax模块，而不是直接去调实际PHP给出的接口（又或者说前端往往先于PHP开发），当我们在本地测试时，ajax的请求地址就和线上的不同了。<br>如果我们采取这种写法，将地址的配置参数暴露出来，当我们提交给PHP后，他只需要修改这几个配置项就可以了。而不需要再改我们的js代码了。<br>假如程序中很多个（假设10个）模块都需要访问a.php调数据，那么如果有一天，接口的地址换了（比如上面这种前后端分离后前端交付js给php后的情景），那么我就不需要10个模块都一一的去改。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oUrl = &#123;</span><br><span class="line">  <span class="string">'getUserInfo'</span>: <span class="string">'a.php'</span></span><br><span class="line">, <span class="string">'setUserInfo'</span>: <span class="string">'b.php'</span></span><br><span class="line">&#125;;</span><br><span class="line">$ajax(&#123;</span><br><span class="line">  <span class="string">'url'</span>: oUrl[<span class="string">'getUserInfo'</span>]</span><br><span class="line">, <span class="string">'type'</span>: <span class="string">'GET'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="事件绑定">事件绑定</h3><p>ajax的例子中已经把优点说的很明显了，下面再分享一种在事件绑定中的应用：<br>我们知道，在pc端我们的点击事件一般都是绑定click，而移动端我们为了更快的响应则往往绑定touchstart事件，于是就会发现在pc端上调试touchstart事件不太方便而在移动端click又不是我们想要的结果。</p>
<p>因此，我们把要绑定的事件抽取成变量，先判断系统环境然后再给变量赋值，这样就可以快捷的在pc和手机上切换啦。(判断方法仅供参考)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fCheckMoblie</span>(<span class="params"></span>)  </span><br><span class="line"></span>&#123;  </span><br><span class="line">  <span class="keyword">var</span> aUserAgentInfo = navigator.userAgent;  </span><br><span class="line">  <span class="keyword">var</span> aMoblieAgent = [<span class="string">'Android'</span>, <span class="string">'iPhone'</span>, <span class="string">'SymbianOS'</span>, <span class="string">'Windows Phone'</span>, <span class="string">'iPad'</span>, <span class="string">'iPod'</span>];</span><br><span class="line">  <span class="keyword">var</span> bFlag = <span class="literal">false</span>;  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aMoblieAgent.length; i++) &#123;  </span><br><span class="line">     <span class="keyword">if</span> (aUserAgentInfo.indexOf(Agents[i]) &gt; <span class="number">0</span>) &#123; </span><br><span class="line">      bFlag = <span class="literal">true</span>; </span><br><span class="line">      <span class="keyword">break</span>; </span><br><span class="line">     &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">return</span> bFlag;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> bMobile = fCheckMoblie();</span><br><span class="line"><span class="keyword">var</span> sClickType = bMobile ? <span class="string">'touchstart'</span> : <span class="string">'click'</span>;</span><br><span class="line">$(<span class="string">'#aaa'</span>).on(sClickType, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// todo</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="思路拓展_——_抽取方法（代码片段）">思路拓展 —— 抽取方法（代码片段）</h3><p>上面两个案例可以看到将变量提取出来的优点，其实这样的思路不仅对于变量受用，对于方法（或者是一整段的逻辑代码）也同样适用。</p>
<p>我们刚开始接触一些业务复杂的js时可能都会写过下面几种代码：</p>
<ul>
<li><ol>
<li>超级多的if else<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">functon aaa(sCity) &#123;</span><br><span class="line">  if ('shanghai' == sCity) &#123;</span><br><span class="line">    // 这里是50行逻辑代码代码</span><br><span class="line">  &#125; else if ('beijing' == sCity) &#123;</span><br><span class="line">    / 这里是50行逻辑代码代码</span><br><span class="line">  &#125; else if ('guangzhou' == sCity) &#123;</span><br><span class="line">    / 这里是50行逻辑代码代码</span><br><span class="line">  &#125; else if ('hangzhou' == sCity) &#123;</span><br><span class="line">    / 这里是50行逻辑代码代码</span><br><span class="line">  &#125; else if ('nanning' == sCity) &#123;</span><br><span class="line">    / 这里是50行逻辑代码代码</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<p>上面这种一个分多种情况处理的逻辑代码，假设每个情况50行，当你写完后要进行调试修改代码时发现滚轮内心几乎是崩溃的。这种现象很常见，因为和有可能在开始编码时不能预见逻辑会如此复杂。但客观的说这样的代码可读性略差。</p>
<p><strong>有的人会说这种情况换 <code>switch case</code> 会更好</strong><br>但其实如果每种情况要里有几十行上百行代码时这么写其实是换汤不换药的。</p>
<p>一种更为推荐的写法，假如只有<code>shanghai</code> 、 <code>beijing</code>等这5种情况，那么我们先将这这些情况的逻辑代码抽取出来：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">oFunc = &#123;</span><br><span class="line">  <span class="string">'shanghai'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 上海的50行</span></span><br><span class="line">  &#125;</span><br><span class="line">, <span class="string">'beijing'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 50行</span></span><br><span class="line">  &#125;</span><br><span class="line">, <span class="string">'guangzhou'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 50行</span></span><br><span class="line">  &#125;</span><br><span class="line">, <span class="string">'hangzhou'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 50行</span></span><br><span class="line">  &#125;</span><br><span class="line">, <span class="string">'nanning'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 50行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params">sCity</span>) </span>&#123;</span><br><span class="line">  oFunc[sCity]();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这时候aaa这个方法就轻便了很多了，而原来数十行的代码段也有了自己的方法，这时候就可以多处去调用相同的代码片段了。如果这时候你下意识的想去看看oFunc中的五个方法是不是再可以抽取共同的模块（代码片段）那么基本上就已经溜的飞起了。</p>
<ul>
<li><ol>
<li>重复写很多相似的代码<br>当页面中要处理很多元素时，就经常会遇到这种情况。</li>
</ol>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Person();</span><br><span class="line">a.name = <span class="string">'name1'</span>;</span><br><span class="line">a.gender = <span class="string">'man'</span>;</span><br><span class="line">a.age = <span class="string">'18'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Person();</span><br><span class="line">b.name = <span class="string">'name1'</span>;</span><br><span class="line">b.gender = <span class="string">'man'</span>;</span><br><span class="line">b.age = <span class="string">'18'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Person();</span><br><span class="line">c.name = <span class="string">'name1'</span>;</span><br><span class="line">c.gender = <span class="string">'man'</span>;</span><br><span class="line">c.age = <span class="string">'18'</span>;</span><br></pre></td></tr></table></figure>
<p>其实处理的这三个元素所进行的工序是一毛一样的。一般遇到这种情况，超过三段相同的代码时就可以考虑进行封装了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">funtion fCreatePerson(name, gender, age) &#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> Person();</span><br><span class="line">  o.name = name;</span><br><span class="line">  o.gender = gender;</span><br><span class="line">  o.age = age;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = fCreatePerson(<span class="string">'name1'</span>, <span class="string">'man'</span>, <span class="string">'18'</span>);</span><br><span class="line"><span class="keyword">var</span> b = fCreatePerson(<span class="string">'name1'</span>, <span class="string">'man'</span>, <span class="string">'18'</span>);</span><br><span class="line"><span class="keyword">var</span> c = fCreatePerson(<span class="string">'name1'</span>, <span class="string">'man'</span>, <span class="string">'18'</span>);</span><br></pre></td></tr></table></figure>
<p>上面这种情况普遍出现在某些匿名函数中，比如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#btn1'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  a = $(<span class="keyword">this</span>).data(<span class="string">'abc'</span>);</span><br><span class="line">  alert(a);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#btn2'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  a = $(<span class="keyword">this</span>).data(<span class="string">'abc'</span>);</span><br><span class="line">  alert(a);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>刚开始往往会被匿名函数牵着鼻子走，习惯性的把逻辑代码都写在这个匿名function中。<br>而实际上，按照本文的思路，这段匿名函数其实可以抽出来写……</p>
<h3 id="脑洞大开_CSS也行？">脑洞大开 CSS也行？</h3><p>其实这个是胡扯啦，css这种静态的stylesheet基本上不存在变量这种说法啦~<br>基本上就是你在css里定义了多少，那么页面上就显示多少了。<br>不过直至rem的出现。<br>rem在这里就可以看成是一个预设的变量啦，它的默认值是根元素的font-size。<br>当页面加载后，你可以修个font-size的大小，这时候，所有基于rem设置大小的值都会响应啦。<br>是不是很叼？？？</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近有一张神图，大意是产品说『此处功能日后必改，不要写死』</p>
<p>间接的吐槽了产品狗就是喜欢糊逼改需求，因此我们的代码千万不能写成hardcode。</p>
<p>也许你曾经听过hardcode，有的人用它来形容很难懂的代码，很形象，你的代码很硬，所以不能适应变化。</p>
<p>而这里我想说的是一种编码习惯：</p>
<p><strong>将程序体中要调用的变量直接写死代码中。</strong></p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[判断页面是否在移动端中打开]]></title>
    <link href="http://www.shihua.im/2015/11/16/20151116_checkIsMobile/"/>
    <id>http://www.shihua.im/2015/11/16/20151116_checkIsMobile/</id>
    <published>2015-11-15T16:00:00.000Z</published>
    <updated>2015-12-20T06:29:05.000Z</updated>
    <content type="html"><![CDATA[<p>在现代浏览器中，我们可以通过判断window的navigator对象的userAgent取到客户端的信息，从而判断是否是移动端，判断脚本如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="regexp">/iphone|ios|android|mobile/i</span>.test(navigator.userAgent.toLowerCase())) &#123;</span><br><span class="line">    <span class="comment">// 在移动端打开</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>同理，判断页面是否是在微信中打开</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="regexp">/micromessenger/i</span>.test(navigator.userAgent.toLowerCase())) &#123;</span><br><span class="line">    <span class="comment">// 微信内置浏览器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>在现代浏览器中，我们可以通过判断window的navigator对象的userAgent取到客户端的信息，从而判断是否是移动端，判断脚本如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="regexp">/iphone|ios|android|mobile/i</span>.test(navigator.userAgent.toLowerCase())) &#123;</span><br><span class="line">    <span class="comment">// 在移动端打开</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cocos2d-Js-Lite自定义预加载页面]]></title>
    <link href="http://www.shihua.im/2015/11/15/20151220_preload/"/>
    <id>http://www.shihua.im/2015/11/15/20151220_preload/</id>
    <published>2015-11-14T16:00:00.000Z</published>
    <updated>2015-12-20T09:02:36.000Z</updated>
    <content type="html"><![CDATA[<p>用cocos2d-js-lite开发H5游戏非常的方便，然后引擎本身提供的preload模块个性化支持非常的差，必须修改引擎的源码才可以进行定制。</p>
<p>另外，加载游戏引擎文件可能也需要一些额外的时间，所以这时候的白屏状态似乎也不是很友好。</p>
<p>因此我更倾向于用HTML搭建加载的界面，页面一打开就能显示加载页面和进度。这时候只需要想办法实现一个静默预加载（无界面），并能拿到加载进度的动态显示出来就可以了。</p>
<a id="more"></a>
<p>好在引擎确实提供了这样一个静默预加载的方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// aRes是需要加载的文件列表</span></span><br><span class="line">cc.loader.load(aRes, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 每加载完一个文件会执行一次</span></span><br><span class="line">  <span class="keyword">var</span> total = <span class="built_in">arguments</span>[<span class="number">1</span>]; <span class="comment">// 总文件数</span></span><br><span class="line">  <span class="keyword">var</span> cur = <span class="built_in">arguments</span>[<span class="number">2</span>]; <span class="comment">// 已经加载的文件数</span></span><br><span class="line">  <span class="keyword">var</span> nProgress = <span class="built_in">Math</span>.floor(<span class="number">100</span> * (cur / total)); <span class="comment">// 加载完成的百分比计算</span></span><br><span class="line">  <span class="keyword">var</span> str = nProgress +<span class="string">'%'</span>;</span><br><span class="line">  $progress.innerHTML = str;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 加载所有文件后执行的回调</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'loadFinish'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>用cocos2d-js-lite开发H5游戏非常的方便，然后引擎本身提供的preload模块个性化支持非常的差，必须修改引擎的源码才可以进行定制。</p>
<p>另外，加载游戏引擎文件可能也需要一些额外的时间，所以这时候的白屏状态似乎也不是很友好。</p>
<p>因此我更倾向于用HTML搭建加载的界面，页面一打开就能显示加载页面和进度。这时候只需要想办法实现一个静默预加载（无界面），并能拿到加载进度的动态显示出来就可以了。</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[用CSS3画一个奥迪车标]]></title>
    <link href="http://www.shihua.im/2015/10/30/20151030_css3AudiLogo/"/>
    <id>http://www.shihua.im/2015/10/30/20151030_css3AudiLogo/</id>
    <published>2015-10-29T16:00:00.000Z</published>
    <updated>2015-12-20T06:41:26.000Z</updated>
    <content type="html"><![CDATA[<p>又要到周末啦，今天下班路上突然脑洞大开，作为一个有『汽车情怀』的前端，竟然没有做过汽车相关专题的玩意，于是就想到了做一个车标LOGO。</p>
<p>说到车标，当然是要先做我心爱的奥迪啦！</p>
<a id="more"></a>
<p>下面是实现思路：</p>
<p>首先是HTML结构： </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"logo"</span>&gt;</span>AUDI<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后是CSS：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.logo</span> <span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">color</span>:<span class="value"> red</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>大功告成！so easy！</strong></p>
<p><strong>纳尼？我裤子都脱了你就让我看这个？？？</strong></p>
<p>开个玩笑。。。</p>
<p>本文将涉及下面几个知识点： </p>
<blockquote>
<ol>
<li>CSS3画圆形、圆环</li>
<li>通过transform实现水平和垂直居中</li>
<li>rem的响应式解决方案</li>
<li>CSS3渐变滤镜</li>
</ol>
</blockquote>
<p>下面进入正题。</p>
<p>先一睹为快: <a href="http://demo.qpdiy.com/sh/vehicleLogo/" target="_blank" rel="external">点我看线上demo</a></p>
<p>首先讲大致的思路：</p>
<p>奥迪嘛，四个圈咯。</p>
<p>那么要做的就是画4个圆环， 想做得逼真一点，就要再给圆环加上渐变阴影了。</p>
<p>ok，那么解决的步奏就是：</p>
<blockquote>
<ol>
<li>画圆环</li>
<li>给圆环加渐变阴影</li>
<li>四个圆环定位布局</li>
</ol>
</blockquote>
<p>思路清晰之后就开始了。</p>
<h2 id="画圆环">画圆环</h2><p>CSS3还没有强大到自动无脑画圆环，所以智慧的劳动人民们一般是这样实现的：</p>
<h3 id="实现方法">实现方法</h3><p>假设要画一个灰色的圆环，那么：</p>
<ol>
<li>画一个大的灰色的圆；</li>
<li>再画一个和背景同色的圆，居中盖在灰色的圆环上。<br>那么这样看上去就是一个中空的灰色圆环啦。</li>
</ol>
<h3 id="如何画圆">如何画圆</h3><p>这里有一个基础的技巧： </p>
<p>将一个 正方形div（width和height相等）的 圆角属性设为 50% 即可 获得一个直径 = width 的圆</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.cirle</span> <span class="rules">&#123;</span><br><span class="line">	<span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100px</span></span></span>;</span><br><span class="line">	<span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="开始画我心爱的奥迪环了">开始画我心爱的奥迪环了</h3><p>首先我们要模仿的LOGO大概如下面这张图：</p>
<p><img src="/img/2015091101.jpg" alt="cmd-markdown-logo"></p>
<p>每个奥迪环的最外层的表面可以看做一个环，然后内侧也是一个环，所以每个奥迪环里其实要画两个环。<br>所以HTML结构可以考虑设置如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"logo-circle-wrap l1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"circle-fir"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"circle-sec"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"circle-thi"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>要画两个圆环，所以每个奥迪环要配置三个圆形： </p>
<p>第一层是家族式外壳， 第二层是大众爹的动力总成，第三层是自我标榜的内饰……</p>
<p>圆环基本结构画好后，开始在渐变上作文章了。</p>
<p>CSS3中提供了线性渐变滤镜可以用于div的背景中，以后再详细分析这一属性，感兴趣的可以自己查一下。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">linear-gradient</span>(<span class="number">0deg</span>, <span class="hexcolor">#000000</span> .<span class="number">5%</span>, transparent <span class="number">35%</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<p>下面就是整个圆面实现的css了，我这里用了rem的自适应方案，不太清楚rem的同学可以自行了解一下。。。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.logo-circle-wrap</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">5rem</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">5rem</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.circle-fir</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">5rem</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">5rem</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border</span>:<span class="value"> .<span class="number">05rem</span> solid <span class="hexcolor">#6f6f6f</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#ebebeb</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">linear-gradient</span>(<span class="number">15deg</span>, <span class="hexcolor">#000000</span> .<span class="number">5%</span>, transparent <span class="number">35%</span>)</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.circle-fir</span> <span class="class">.circle-sec</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#232323</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">4rem</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">4rem</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border</span>:<span class="value"> .<span class="number">1rem</span> solid <span class="hexcolor">#efefef</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">linear-gradient</span>(<span class="number">33deg</span>, <span class="hexcolor">#888888</span> <span class="number">10%</span>, <span class="hexcolor">#454545</span> <span class="number">66.7%</span>, transparent)</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"> <span class="function">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>)</span></span>;</span><br><span class="line">          <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>)</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.circle-fir</span> <span class="class">.circle-thi</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">3.5rem</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">3.5rem</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#fff</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"> <span class="function">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>)</span></span>;</span><br><span class="line">          <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>)</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>画完了一个圆，其它的就都依样画葫芦啦。<br>将四个圆位置调整一下</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.logo-circle-wrap</span><span class="class">.l1</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0rem</span></span></span>; </span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.logo-circle-wrap</span><span class="class">.l2</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">3rem</span></span></span>; </span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.logo-circle-wrap</span><span class="class">.l3</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">6rem</span></span></span>; </span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.logo-circle-wrap</span><span class="class">.l4</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">9rem</span></span></span>; </span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="div覆盖解决方案">div覆盖解决方案</h3><p>这时候就发现一个蛋疼的问题了，后面的奥迪环会将前一个奥迪环的右半部分遮住。<br>这时候第一反映就是要死要死要死了，因为这些奥迪环本来就是由三层结构叠加起来了，想做圆环内部背景透明似乎不可行。</p>
<p>这时候奥迪的好友『丰田』上线了，正所谓『车到山前必有路，有路必有丰田车』（广告费请洽门卫李大爷）</p>
<p>既然背景不透明，就在后面的环上再画上前一个环的右半部分。这样看起来就像是透明的了。</p>
<p>然而问题又来了，怎样只画一部分圆环呢？</p>
<p>你可能想到，在后面的环里再嵌入一个大环，然后把一部分遮住就可以了。</p>
<p>我确实是这么做的，再内层环里设置overflow:hidden，然后嵌入的环通过transform属性拉到和前一个环同一位置。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"logo-circle-wrap l2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"circle-fir"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"circle-sec"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"circle-thi"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第一个环的右半部分 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"logo-circle-wrap part part1"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"circle-fir"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"circle-sec"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"circle-thi"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第一个环的右半部分 end --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class">.circle-fir</span> <span class="class">.circle-thi</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">3.5rem</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">3.5rem</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#fff</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">50%</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"> <span class="function">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>)</span></span>;</span><br><span class="line">          <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>)</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.logo-circle-wrap</span><span class="class">.part</span><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">5rem</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">5rem</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-transform</span>:<span class="value"> <span class="function">translate</span>(-<span class="number">3.75rem</span>, -.<span class="number">7rem</span>)</span></span>;</span><br><span class="line">            <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translate</span>(-<span class="number">3.75rem</span>, -.<span class="number">7rem</span>)</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>大功告成！</p>
<p>线上的DEMO地址:<a href="http://shihuacivis.github.io/css3audi/" target="_blank" rel="external">点我看线上demo</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>又要到周末啦，今天下班路上突然脑洞大开，作为一个有『汽车情怀』的前端，竟然没有做过汽车相关专题的玩意，于是就想到了做一个车标LOGO。</p>
<p>说到车标，当然是要先做我心爱的奥迪啦！</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTML5中计时器的三种方案]]></title>
    <link href="http://www.shihua.im/2015/10/11/20151111_h5Timer/"/>
    <id>http://www.shihua.im/2015/10/11/20151111_h5Timer/</id>
    <published>2015-10-10T16:00:00.000Z</published>
    <updated>2015-12-20T09:00:18.000Z</updated>
    <content type="html"><![CDATA[<p>在做HTML5游戏或者单页应用时我们常常需要使用到计时器模块，比如游戏中的倒计时功能。</p>
<a id="more"></a>
<h2 id="常规方案">常规方案</h2><p>最常见的计时器方案一般无非<code>setTimeout</code>和<code>setInterval</code>，基本上已经被玩坏了……<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nTimeCount = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// setTimeout</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fCountTime</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nTimeCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    nTimeCount--;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      fCountTime();</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'时间到'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">fCountTime();</span><br><span class="line"></span><br><span class="line"><span class="comment">// setInterval</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fCountTime</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nTimeCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    nTimeCount--;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    clearInterval(timer);</span><br><span class="line">    timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'时间到'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fCountTime();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p>
<h2 id="存在问题">存在问题</h2><p>在pc上看，这样的实现方法并没有太大的问题，然而到了移动端似乎就会出现下面两个问题。</p>
<ol>
<li>在移动端上，如IOS，当用户拖曳整张页面时，页面是停止渲染工作的，这时候setTimeout和setInterval也会随之暂停，那么当用户拖曳结束时，时间可能就已经延迟了不少。</li>
<li>在一些性能相对已经比较慢的手机上玩一些相对操作比较多、画面更新幅度大的游戏时，如IOS7下的iphone4s，会出现页面卡顿，以导致setTimeout、setInterval触发时间延迟被拖慢的问题。</li>
</ol>
<h2 id="解决方案">解决方案</h2><p>首先解决第一个问题，这个利用简单nTimeCount计数器的方案在setTimeout和setInterval有不可靠（这里指不能保证每一秒执行一次）的风险时，显然是不靠谱的，靠谱的方案还是得根据准确的时间进行判断。以setTimeout为例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nTimeCount = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">var</span> nStartTime = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> nEndTime = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// setTimeout</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fCountTime</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="number">0</span> == nStartTime) &#123;</span><br><span class="line">    nStartTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 初始化记下开始计时的时间戳</span></span><br><span class="line">  &#125;</span><br><span class="line">  nEndTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 初始化记下开始计时的时间戳</span></span><br><span class="line">  nPassSec = <span class="built_in">Math</span>.floor((nEndTime - nStartTime) / <span class="number">1000</span>); <span class="comment">// 时间戳相减获得pass的毫秒数， /1000向下取整获得过去的秒数</span></span><br><span class="line">  nTimeCount -= nPassSec; <span class="comment">// 时间总数减去pass的秒数获得所剩的时间</span></span><br><span class="line">  <span class="keyword">if</span> (nTimeCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      fCountTime();</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'时间到'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">fCountTime();</span><br></pre></td></tr></table></figure></p>
<p>这样似乎可以保证时间至少相对靠谱了，那么来考虑第二个问题——性能问题。<br>当然，这时候可以适当降低setTimout的时间片来减少性能对计时的影响，但似乎<strong>HTML5已经推出了更好的解决方案</strong>。</p>
<h2 id="这才是重点">这才是重点</h2><p>这里要推出的方法是HTML5中的新方法:<br>requestAnimationFrame， 它可以在浏览器每渲染一帧后立即执行回调，而不会像setTimeout一样有延迟风险。<br>现代浏览器在正常情况下每秒会渲染60帧画面，也就是会执行60次requestAnimationFrame的回调，你可以把它等价为一个16.7毫秒的setTimeout模式。<br>下面是一个兼容性的解决方案，并定义了一个计时器，<br>可以满足每一秒、每一帧都有对应回调可以调用，同时还有暂停、继续计时的功能：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先将api进行兼容性封装</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> lastTime = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> vendors = [<span class="string">'webkit'</span>, <span class="string">'moz'</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; vendors.length &amp;&amp; !<span class="built_in">window</span>.requestAnimationFrame; ++x) &#123;</span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame = <span class="built_in">window</span>[vendors[x] + <span class="string">'RequestAnimationFrame'</span>];</span><br><span class="line">    <span class="built_in">window</span>.cancelAnimationFrame = <span class="built_in">window</span>[vendors[x] + <span class="string">'CancelAnimationFrame'</span>] ||    <span class="comment">// Webkit中此取消方法的名字变了</span></span><br><span class="line">                                  <span class="built_in">window</span>[vendors[x] + <span class="string">'CancelRequestAnimationFrame'</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">window</span>.requestAnimationFrame) &#123;</span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame = <span class="function"><span class="keyword">function</span>(<span class="params">callback, element</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> currTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">      <span class="keyword">var</span> timeToCall = <span class="built_in">Math</span>.max(<span class="number">0</span>, <span class="number">16.7</span> - (currTime - lastTime));</span><br><span class="line">      <span class="keyword">var</span> id = <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        callback(currTime + timeToCall);</span><br><span class="line">      &#125;, timeToCall);</span><br><span class="line">      lastTime = currTime + timeToCall;</span><br><span class="line">      <span class="keyword">return</span> id;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">window</span>.cancelAnimationFrame) &#123;</span><br><span class="line">    <span class="built_in">window</span>.cancelAnimationFrame = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">      clearTimeout(id);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个计时器对象</span></span><br><span class="line"><span class="keyword">var</span> _timeCount = &#123;</span><br><span class="line">  restTime: <span class="number">0</span></span><br><span class="line">, totalTime: <span class="number">0</span></span><br><span class="line">, startTime: <span class="number">0</span></span><br><span class="line">, dormant: <span class="literal">false</span></span><br><span class="line">, count: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = _timeCount;</span><br><span class="line">    <span class="keyword">if</span>(self.dormant) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> cur = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> s = self.totalTime - <span class="built_in">Math</span>.floor((cur - self.startTime)/<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">if</span>(s != self.restTime)&#123;</span><br><span class="line">      self.restTime--;</span><br><span class="line">      self.secPass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(self.restTime != <span class="number">0</span>)&#123;</span><br><span class="line">      requestAnimationFrame(_timeCount.inter);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      _timeCount.finish();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">, inter: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 每帧执行的回调</span></span><br><span class="line">    _timeCount.count();</span><br><span class="line">  &#125;</span><br><span class="line">, secPass: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 每秒执行的回调</span></span><br><span class="line">  &#125;</span><br><span class="line">, pause: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 暂停</span></span><br><span class="line">    <span class="keyword">this</span>.dormant = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">this</span>.totalTime = <span class="keyword">this</span>.restTime;</span><br><span class="line">  &#125;</span><br><span class="line">, keepOn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 继续计时</span></span><br><span class="line">    <span class="keyword">this</span>.startTime = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">this</span>.dormant = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">this</span>.count();</span><br><span class="line">  &#125;</span><br><span class="line">, finish: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 时间到</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然而，网上有一些大神也指出，requestAnimationFrame的性能其实并没有比setTimeout高到哪里去，甚至还不如后者，不过，年轻人嘛，不就应该多多尝试新事物吗？</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在做HTML5游戏或者单页应用时我们常常需要使用到计时器模块，比如游戏中的倒计时功能。</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Js中的function小记]]></title>
    <link href="http://www.shihua.im/2015/10/11/20151011_jsprototype/"/>
    <id>http://www.shihua.im/2015/10/11/20151011_jsprototype/</id>
    <published>2015-10-10T16:00:00.000Z</published>
    <updated>2015-12-20T06:28:29.000Z</updated>
    <content type="html"><![CDATA[<p>最近参加了一个js方面的培训，讲师用两天时间给我们回顾和剖析了function的种种，的确有所收获，小记于此。</p>
<a id="more"></a>
<h2 id="function是js中的一等公民">function是js中的一等公民</h2><p>我们会发现js中一些基础的对象实质上也是function</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Number</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">String</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Function</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Object</span>)</span><br></pre></td></tr></table></figure>
<h2 id="function用于面向对象">function用于面向对象</h2><p>说到对象，我们首先想到要有一个类，然后把类进行实例化得到对象。<br>而function就是我们所要的类（class）了。<br>比如下面这段代码，我们定义了一个Person类，然后传入<code>字面量</code>参数实例化了一个对象——sh。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">opt</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = opt.name;</span><br><span class="line">	<span class="keyword">this</span>.gender = opt.gender;</span><br><span class="line">	<span class="keyword">this</span>.skill = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sh = <span class="keyword">new</span> Person(&#123;name:<span class="string">'shihua'</span>, gender: <span class="string">'man'</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(sh);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> sh);</span><br></pre></td></tr></table></figure>
<p>通过console可以看到新生成的sh其实是一个Object,然而细心的人会发现，它除了我么自己定义的属性方法外，还多了一个<code>__proto__</code>的对象。这个就涉及了function中的一大精华原型链了。</p>
<h2 id="js中的原型链">js中的原型链</h2><p>关于js中的原型链网上已经很多详细的解释了，之前也大概知道可以用prototype的方法给对象添加方法，比如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">opt</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = opt.name;</span><br><span class="line">	<span class="keyword">this</span>.gender = opt.gender;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.skill = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>
<p><em>这样Person就具有skill方法。但其实用下面这种方式定义，也可以达到目的。</em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">opt</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = opt.name;</span><br><span class="line">	<span class="keyword">this</span>.gender = opt.gender;</span><br><span class="line">	<span class="keyword">this</span>.skill = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以我一直不是特别明白prototype方法的意义。<br>但其实细心的人会发现，用这种方法时，skill所指向的方法的内存地址是不一样的。<br>也就是说，当我们用后一种类时，每创建一个对象，都会在内存中新创建一个skill方法。这样显然是很影响性能的。<br>然而，如果是用prototype添加的skill方法，指向的内存地址则是一致的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">opt</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = opt.name;</span><br><span class="line">	<span class="keyword">this</span>.gender = opt.gender;</span><br><span class="line">	<span class="keyword">this</span>.skill = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Person(&#123;name:<span class="string">'aa'</span>, gender: <span class="string">'a'</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Person(&#123;name:<span class="string">'aa'</span>, gender: <span class="string">'a'</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(a.skill === b.skill);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Human</span>(<span class="params">opt</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = opt.name;</span><br><span class="line">	<span class="keyword">this</span>.gender = opt.gender;</span><br><span class="line">&#125;</span><br><span class="line">Human.prototype.skill = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> a1 = <span class="keyword">new</span> Human(&#123;name:<span class="string">'aa'</span>, gender: <span class="string">'a'</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> b1 = <span class="keyword">new</span> Human(&#123;name:<span class="string">'aa'</span>, gender: <span class="string">'a'</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(a1.skill === b1.skill);</span><br></pre></td></tr></table></figure>
<p>显然prototype才是更佳的做法。<br>那么就得说到prototype的运作原理了，当我们new一个对象时，会赋予其一个<code>__proto__</code>的属性，用于指向它的基类，使其具有基类的方法的指针，而子类自身实质上是不具有这些方法的。<br>当我们访问子类时，若其本身不具有这个属性和方法，则会根据<code>__proto__</code>向上一级去寻找，若上一级也不具有，则会依此去更上一级搜寻。<br>而prototype就是自主配置<code>__proto__</code>的入口。<br>这样就不会造成内存浪费，而对象方法也更易于被<code>继承</code>。</p>
<h2 id="js中实现extend">js中实现extend</h2><p>有时候我们想在某个类的基础上派生出一个新的类，使其具有新的属性方法，同时不影响原有类。在java中我们把这个方法叫extend。在js中，extend的实现方法如下，klass就是我们要的具有extend功能的类</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> klass = <span class="function"><span class="keyword">function</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line">klass.extend = <span class="function"><span class="keyword">function</span>(<span class="params">opt</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> child = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">	<span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.constructor = child();</span><br><span class="line">	&#125;;</span><br><span class="line">	F.prototype = <span class="keyword">this</span>.prototype;</span><br><span class="line">	<span class="keyword">var</span> o = <span class="keyword">new</span> F();</span><br><span class="line">	child.prototype = o;</span><br><span class="line">	<span class="comment">// 拓展新方法</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> opt) &#123;</span><br><span class="line">		child.prototype[attr] = opt[attr];</span><br><span class="line">	&#125;</span><br><span class="line">	child.prototype.__super__ = <span class="keyword">this</span>.prototype;</span><br><span class="line">	<span class="keyword">return</span> child;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近参加了一个js方面的培训，讲师用两天时间给我们回顾和剖析了function的种种，的确有所收获，小记于此。</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[移动端判断浏览器是横竖屏方向]]></title>
    <link href="http://www.shihua.im/2015/09/16/20151116_oritentation/"/>
    <id>http://www.shihua.im/2015/09/16/20151116_oritentation/</id>
    <published>2015-09-15T16:00:00.000Z</published>
    <updated>2015-12-20T08:59:55.000Z</updated>
    <content type="html"><![CDATA[<p>有时候，我们做一些H5特效页或游戏时，只做了竖屏状态下的设计和实现，此时我们并不希望用户以横屏状态打开，因此我们要在页面加载之初判断手机的横竖屏方向，做相应的处理。<br>在现代浏览器中，我们可以通过window.oritentation判断屏幕的横竖屏方向，当：window.oritentation = 0 或者 180 时，则手机为竖屏状态，反之则为横屏。</p>
<a id="more"></a>
<p>然而，在一些不支持window.oritentation属性的环境下，我们可以判断window的width和height来判断手机的横竖屏状态（通常状态下，竖屏时屏幕高度大于屏幕宽度）</p>
<p>在下面的代码中，还定义了一个_initScreenDir = 0的初始方向，当屏幕从横屏转为竖屏时，通过监听orientationchange的方法，如果不支持该事件的情况下，则监听resize事件，会自动刷新页面以保证页面的初始化操作正常（如页面布局，rem的设置等等）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">_initScreenDir = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_onorientationchange</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  $el = $(<span class="string">"#tips"</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.orientation == <span class="number">0</span> || <span class="built_in">window</span>.orientation == <span class="number">180</span>) &#123;</span><br><span class="line">    $el.hide();</span><br><span class="line">    _initScreenDir == <span class="number">1</span> &amp;&amp; (<span class="built_in">window</span>.location.reload());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.orientation == <span class="number">90</span> || <span class="built_in">window</span>.orientation == -<span class="number">90</span>) &#123;</span><br><span class="line">    $el.show();</span><br><span class="line">    _initScreenDir = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> width = $(<span class="built_in">window</span>).width();</span><br><span class="line">  <span class="keyword">var</span> height = $(<span class="built_in">window</span>).height();</span><br><span class="line">  <span class="keyword">if</span>(width &lt; height)&#123;</span><br><span class="line">    $el.hide();</span><br><span class="line">    _initScreenDir == <span class="number">1</span> &amp;&amp; (<span class="built_in">window</span>.location.reload());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $el.show();</span><br><span class="line">    _initScreenDir = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">_onorientationchange();</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"onorientationchange"</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">"orientationchange"</span> : <span class="string">"resize"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;_onorientationchange(e);&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>有时候，我们做一些H5特效页或游戏时，只做了竖屏状态下的设计和实现，此时我们并不希望用户以横屏状态打开，因此我们要在页面加载之初判断手机的横竖屏方向，做相应的处理。<br>在现代浏览器中，我们可以通过window.oritentation判断屏幕的横竖屏方向，当：window.oritentation = 0 或者 180 时，则手机为竖屏状态，反之则为横屏。</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[移动端自定义Input光标太大的问题]]></title>
    <link href="http://www.shihua.im/2015/09/16/20151116_h5InputStyle/"/>
    <id>http://www.shihua.im/2015/09/16/20151116_h5InputStyle/</id>
    <published>2015-09-15T16:00:00.000Z</published>
    <updated>2015-12-20T08:59:34.000Z</updated>
    <content type="html"><![CDATA[<p>input的特殊之处在于它有预设的行高，背景，边框等属性。<br>当我们要做一个完全自定义背景的输入框时，我们首先要把它所有的默认背景、边框、背景都去掉，然后将背景设置成我们想要的效果。</p>
<p>这样在chorme的模拟模式下看似乎很完美了，但在实际的移动设备上，我们会发现这样设置的input被focus时，光标非常的高，几乎沾满了一行。这显然不是我们想要的效果。</p>
<a id="more"></a>
<p>这时候还需要加上appearance:none这个属性，它的作用是将input默认的属性样式去掉。</p>
<p>另外input中不需要再设置line-height了，否则会画蛇添足。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.input-wrap</span> <span class="tag">input</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">5.06rem</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> .<span class="number">96rem</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span> auto</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border</span>:<span class="value"> none</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">background</span>:<span class="value"> none</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#602f00</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">vertical-align</span>:<span class="value"> middle</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">font-size</span>:<span class="value"> .<span class="number">48rem</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-appearance</span>:<span class="value">none</span></span>; <span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">  <span class="rule"><span class="attribute">appearance</span>:<span class="value">none</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>input的特殊之处在于它有预设的行高，背景，边框等属性。<br>当我们要做一个完全自定义背景的输入框时，我们首先要把它所有的默认背景、边框、背景都去掉，然后将背景设置成我们想要的效果。</p>
<p>这样在chorme的模拟模式下看似乎很完美了，但在实际的移动设备上，我们会发现这样设置的input被focus时，光标非常的高，几乎沾满了一行。这显然不是我们想要的效果。</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Js实现基于发布/订阅机制的事件管理器（观察者模式）]]></title>
    <link href="http://www.shihua.im/2015/09/10/20150910_subPub/"/>
    <id>http://www.shihua.im/2015/09/10/20150910_subPub/</id>
    <published>2015-09-09T16:00:00.000Z</published>
    <updated>2015-12-20T06:28:15.000Z</updated>
    <content type="html"><![CDATA[<p>处理事件是web前端开发中出现最频繁的业务之一。在处理这类业务时，我们通常的思路就是基本是这样的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'btn'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    a.show();</span><br><span class="line">    b.hide();</span><br><span class="line">    c.hide();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>btn发生点击事件（事件触发）， 然后去分别执行a、b、c模块下的对应事件。这样是没有什么大问题的。<br>但设想一下下面3种情况：</p>
<ol>
<li>假如程序很大，很多模块，btn的这个事件要去触发100个模块下对应的不同的事件……</li>
<li>今天btn可能只触发3个模块的方法，假如明天业务调整还要去触发d模块的功能……</li>
<li>当btn触发时，c模块处于忙碌中不能响应，那势必btn与c模块要有业务上的交集，所以写btn的开发者可能还要去了解c模块的运行逻辑……</li>
</ol>
<h2 id="为什么需要发布/订阅">为什么需要发布/订阅</h2><p>那么这个情况下就适合使用发布/订阅机制（pub/sub）进行事件管理。<br>发布/订阅也被称之为观察者模式。我要用观察者模式于事件管理中主要是为了满足以下诉求：<br>我希望模块与模块之间更加的独立。A模块不需要知道B模块中具体的执行逻辑，它只要知道我触发了btn事件，你B模块能知道我触发了并做你自己该做的事就可以了。<br>以此来首先确保我开发A模块时不需要了解我应该调用B模块的那个函数方法。另外，将来加入B模块、C模块时，A模块基本不用进行太多业务调整。</p>
<h2 id="实现思路">实现思路</h2><p>宏观来看，观察者模式其实有点类似于一个管理者，它手上有一份名单，知道谁谁谁订阅了事件A，当事件A发生之后只需要通知这个管理者，管理者就会杜泽去通知订阅了事件A的受众，而受众和事件的触发者之间不需要了解彼此。<br>那么我们就需要完成以下几个功能：</p>
<ol>
<li>存取订阅关系的数据（Data）</li>
<li>订阅事件（sub）</li>
<li>发布事件（pub）</li>
<li>取消订阅（unsub）</li>
</ol>
<p>首先，订阅关系基本上是 ‘事件 —— 订阅者队列’ 这样的对应形式。<br>其次，在js中订阅者实际上想知道发生的某件事件，然后要去执行方法，因此事件对应的队列的存的都是要去执行function<br>因此我们可以考虑将订阅者（function）存于一个数组中，然后利用js的object的键值特性保存这些队列。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">oList = &#123;</span><br><span class="line">  <span class="string">'事件A'</span>: [functionA, functionB]</span><br><span class="line">, <span class="string">'事件B'</span>: [functionC, functionD]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样看来就很好理解了：</p>
<ol>
<li>订阅事件（sub）：将对应事件的数组中push一个要执行的function（<code>引用类型</code>，实际上是指向function的内存地址）</li>
<li>发布事件（pub）：把对应数组中的function都执行一遍</li>
<li>取消订阅（unsub）： 将对应的function从数组中移除</li>
</ol>
<h2 id="jQuery实现">jQuery实现</h2><p>如果环境中有jQuery，那么实现观察者模式的方法很简单，我们可以将订阅关系数据存到$({}) 这个jQuery对象中，赋予其trigger、on、off方法。用trigger、on方法可以轻松实现上述发布和订阅的功能。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 订阅一个事件管理器对象</span></span><br><span class="line">  <span class="built_in">window</span>.EventCenter = &#123;</span><br><span class="line">    o: $(&#123;&#125;)</span><br><span class="line">  , sub: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">      self.o.on.apply(self.o, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  , unsub: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">      self.o.off.apply(self.o, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  , pub: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">      self.o.trigger.apply(self.o, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;(jQuery);</span><br></pre></td></tr></table></figure></p>
<h2 id="原生js实现">原生js实现</h2><p>原生js中由于没有封装on、off这两个实用的方法，因此实现起来相对要费力一些。<br>特别在取消订阅这个功能上回发现一个历史性的深坑：<br>最早的时候我实现unsub的思路是去遍历数组，判断数组元素（function）是否与所选的function相等……<br>那么问题就来了，如何判断function相同（等）……<br>网上有大神说将function硬转成字符串判断，这种做法在一定情况下是可行的，但是并不是100%准确。<br>所以这个问题搁置了大半年。<br>直到最近我用jQuery的实现版本发现并没有出现function判断不准的问题，于是我潜心研究了一下jQuery的实现思路……<br>发现它相当聪（wei）明(suo)的引入了一个guid的概念（global unique id）,通过guid来识别方法，当一个function AAA订阅一个事件时，它会悄悄的在AAA里”种”下一个guid属性，它的值是唯一的，后期jQuery都是通过这个guid来识别方法，而不是硬转字符串的方法（stupid）<br>所以，这个问题解决了……<br><strong>所以说jQuery大法好啊！</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventManager = &#123;</span><br><span class="line">  _listeners: &#123;&#125;</span><br><span class="line">, guid: <span class="number">1</span></span><br><span class="line">, sub: <span class="function"><span class="keyword">function</span>(<span class="params">type, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>._listeners[type] === <span class="string">"undefined"</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>._listeners[type] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn === <span class="string">"function"</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>._listeners[type].push(fn);</span><br><span class="line">      fn.guid = <span class="keyword">this</span>.guid;</span><br><span class="line">      <span class="keyword">this</span>.guid++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">, pub: <span class="function"><span class="keyword">function</span>(<span class="params">type, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arrayEvent = <span class="keyword">this</span>._listeners[type];</span><br><span class="line">    <span class="keyword">if</span> (arrayEvent <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>, length=arrayEvent.length; i &lt; length; i+=<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> arrayEvent[i] === <span class="string">"function"</span>) &#123;</span><br><span class="line">          arrayEvent[i](data);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">, unsub: <span class="function"><span class="keyword">function</span>(<span class="params">type, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arrayEvent = <span class="keyword">this</span>._listeners[type];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> type === <span class="string">"string"</span> &amp;&amp; arrayEvent <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> fn === <span class="string">"function"</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>, length=arrayEvent.length; i &lt; length; i+=<span class="number">1</span>)&#123;</span><br><span class="line">          <span class="keyword">if</span> (arrayEvent[i].guid === fn.guid) &#123;</span><br><span class="line">            <span class="comment">// 通过guid识别function</span></span><br><span class="line">            <span class="keyword">this</span>._listeners[type].splice(i, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>._listeners[type];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>处理事件是web前端开发中出现最频繁的业务之一。在处理这类业务时，我们通常的思路就是基本是这样的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class=]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mysql按中文首字母进行排序]]></title>
    <link href="http://www.shihua.im/2015/09/10/20150910_mysqlSortName/"/>
    <id>http://www.shihua.im/2015/09/10/20150910_mysqlSortName/</id>
    <published>2015-09-09T16:00:00.000Z</published>
    <updated>2015-12-20T06:28:10.000Z</updated>
    <content type="html"><![CDATA[<p>用gbk编码进行排序，其中name是用户中文名字段</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> * <span class="keyword">from</span> <span class="string">`tb_member`</span> </span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">CONVERT</span>( <span class="string">`name`</span> <span class="keyword">USING</span> gbk ) </span><br><span class="line"><span class="keyword">COLLATE</span> gbk_chinese_ci <span class="keyword">ASC</span>;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><code>written in 2014/10 本文搬运自LOFTER，让LOFTER纯粹po图！</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>用gbk编码进行排序，其中name是用户中文名字段</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">SELECT</span> * <span class="keyword">from</span> <span class="string">`tb_member`</span> </span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">CONVERT</span>( <span class="string">`name`</span> <span class="keyword">USING</span> gbk ) </span><br><span class="line"><span class="keyword">COLLATE</span> gbk_chinese_ci <span class="keyword">ASC</span>;</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[jQuery获取鼠标滑入div的方向]]></title>
    <link href="http://www.shihua.im/2015/09/10/20150910_mouseDir/"/>
    <id>http://www.shihua.im/2015/09/10/20150910_mouseDir/</id>
    <published>2015-09-09T16:00:00.000Z</published>
    <updated>2015-12-20T06:28:03.000Z</updated>
    <content type="html"><![CDATA[<p>大学时期，人人上曾经有一个疯传的网网站——<a href="http://app.hustonline.net/major" target="_blank" rel="external">大软坊</a>。<br>上面有一个很酷的效果，当鼠标划过菜单时，它能识别你是从哪个方向滑入和滑出，并执行不同的动画效果。<br>当时觉得很酷炫，就自己动了下脑筋研究了这个问题。</p>
<a id="more"></a>
<h2 id="思路">思路</h2><p>把div当作一个矩形，用两条对角线将矩形分成四个区域（如下图），那么当鼠标滑入/滑出div的<br>瞬间会触发一个mouseenter/mouseleave事件，同时我们可以获取触发该事件时<br>鼠标所在坐标点，那么通过判断这个坐标点落于上面四个区域中的哪一个区域来判别是从上/下/左/右滑出的。<br><img src="/img/2015090901.jpg" alt="cmd-markdown-logo"></p>
<h2 id="实现">实现</h2><p>这段代码是比较早期写的啦，有很多可以优化的点，先不说了。主要是用jquery的offset()轻松获取相关点的坐标，剩下的就是数学问题了。<br>所以说jQuery大法好啊!<br>线上的DEMO地址:<a href="http://demo.qpdiy.com/sh/mouseDirection/index.html" target="_blank" rel="external">点我看线上demo</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.name'</span>).on(<span class="string">'mouseenter'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> divX = $(<span class="keyword">this</span>).offset().left;   <span class="comment">//div的左上角X坐标</span></span><br><span class="line">  <span class="keyword">var</span> divY = $(<span class="keyword">this</span>).offset().top;    <span class="comment">//div的左上角Y</span></span><br><span class="line">  <span class="keyword">var</span> width = $(<span class="keyword">this</span>).width();</span><br><span class="line">  <span class="keyword">var</span> height = $(<span class="keyword">this</span>).height();</span><br><span class="line">  <span class="keyword">var</span> mX = e.pageX;                   <span class="comment">//鼠标进入div中的点坐标</span></span><br><span class="line">  <span class="keyword">var</span> mY = e.pageY;                   <span class="comment">//鼠标进入div中的点坐标</span></span><br><span class="line">  <span class="keyword">var</span> rx = mX - divX;                 <span class="comment">//相减得出要判断的点的横坐标</span></span><br><span class="line">  <span class="keyword">var</span> ry = mY - divY;                 <span class="comment">//相减得出要判断的点的纵坐标</span></span><br><span class="line">  <span class="keyword">var</span> scale = height/width;           <span class="comment">//对角线1的斜率</span></span><br><span class="line">  tmp = scale * rx;                   <span class="comment">//可以理解为x坐标下对角线上的点...那么 300-tmp就是对角线2上的点</span></span><br><span class="line">  $pic = $(<span class="keyword">this</span>).find(<span class="string">'.pic'</span>);</span><br><span class="line">  $pic.removeAttr(<span class="string">'class'</span>).addClass(<span class="string">'pic'</span>);</span><br><span class="line">  <span class="keyword">if</span>(ry &lt; tmp &amp;&amp; ry &lt; (<span class="number">300</span> - tmp))&#123;</span><br><span class="line">    $(<span class="string">'#im'</span>).html(<span class="string">'上入'</span>);</span><br><span class="line">    $pic.addClass(<span class="string">'from-top'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ry &lt; (<span class="number">300</span> - tmp) &amp;&amp; ry &gt; tmp)&#123;</span><br><span class="line">    $(<span class="string">'#im'</span>).html(<span class="string">'左入'</span>);</span><br><span class="line">    $pic.addClass(<span class="string">'from-left'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ry &gt; (<span class="number">300</span> - tmp) &amp;&amp; ry &lt; tmp)&#123;</span><br><span class="line">    $(<span class="string">'#im'</span>).html(<span class="string">'右入'</span>);</span><br><span class="line">    $pic.addClass(<span class="string">'from-right'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $(<span class="string">'#im'</span>).html(<span class="string">'下入'</span>);</span><br><span class="line">    $pic.addClass(<span class="string">'from-bottom'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  $pic.css(<span class="string">'z-index'</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p><code>written in 2014/10 本文搬运自LOFTER，让LOFTER纯粹po图！</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>大学时期，人人上曾经有一个疯传的网网站——<a href="http://app.hustonline.net/major">大软坊</a>。<br>上面有一个很酷的效果，当鼠标划过菜单时，它能识别你是从哪个方向滑入和滑出，并执行不同的动画效果。<br>当时觉得很酷炫，就自己动了下脑筋研究了这个问题。</p>]]>
    
    </summary>
    
  </entry>
  
</feed>
