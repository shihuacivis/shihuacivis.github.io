<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wah&#39;s life</title>
  <subtitle>西斗门路前端手艺人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shiwah.me/"/>
  <updated>2017-06-05T09:35:35.000Z</updated>
  <id>http://shiwah.me/</id>
  
  <author>
    <name>石华</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>移动端开发玄学研究分析</title>
    <link href="http://shiwah.me/2017/06/03/20170603_mobileWeb/"/>
    <id>http://shiwah.me/2017/06/03/20170603_mobileWeb/</id>
    <published>2017-06-03T06:00:00.000Z</published>
    <updated>2017-06-05T09:35:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>移动端领域有太多的未解之谜，<br>往往是3分靠姿势水平，7分靠框架类库<br>剩下的的90分就是我们今天要讲的玄学了</p>
<a id="more"></a>
<h2 id="iphone复制文字时内容错误"><a href="#iphone复制文字时内容错误" class="headerlink" title="iphone复制文字时内容错误"></a>iphone复制文字时内容错误</h2><p>比如以下情况,<code>12345</code>前后的标签都设置了<code>user-select:none</code>,但是长按后调用系统复制，会发现复制到的内容是<code>12345长按复制</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"user-select:none"</span>&gt;</span>你的抽奖号为：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"user-select:auto"</span>&gt;</span>12345<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"user-select:none"</span>&gt;</span>长按复制<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>最简单粗暴的解决办法就是在不影响布局的情况下调换一下标签顺序。。。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"user-select:none"</span>&gt;</span>你的抽奖号为：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"user-select:none"</span>&gt;</span>长按复制<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"user-select:auto"</span>&gt;</span>12345<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>##绝对定位叠加的元素错位或不显示<br>虽然元素排在后面，但依然会被前面的同班元素元素挡住，这时候加一个<code>z-index</code>明确层级。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.ab</span> &#123;</div><div class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h2><p>要在微信端推广的web，现阶段尽量不要用flex布局，要不然800块的安卓及各种老机器会把你教育到怀疑人生。</p>
<h2 id="自动播放音频"><a href="#自动播放音频" class="headerlink" title="自动播放音频"></a>自动播放音频</h2><p>监听页面上某张图片的加载事件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  audio.play();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="自定背景的input光标太长"><a href="#自定背景的input光标太长" class="headerlink" title="自定背景的input光标太长"></a>自定背景的input光标太长</h2><p>需要加上appearance:none这个属性，它的作用是将input默认的属性样式去掉。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.input-wrap</span> <span class="selector-tag">input</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">width</span>: <span class="number">5.06rem</span>;</div><div class="line">  <span class="attribute">height</span>: .<span class="number">96rem</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">  <span class="attribute">border</span>: none;</div><div class="line">  <span class="attribute">background</span>: none;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#602f00</span>;</div><div class="line">  <span class="attribute">vertical-align</span>: middle;</div><div class="line">  <span class="attribute">font-size</span>: .<span class="number">48rem</span>;</div><div class="line">  <span class="attribute">-webkit-appearance</span>:none; <span class="comment">/* Safari 和 Chrome */</span></div><div class="line">  <span class="attribute">appearance</span>:none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="判断是否是在移动端-微信中打开"><a href="#判断是否是在移动端-微信中打开" class="headerlink" title="判断是否是在移动端/微信中打开"></a>判断是否是在移动端/微信中打开</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="regexp">/iphone|ios|android|mobile/i</span>.test(navigator.userAgent.toLowerCase())) &#123;</div><div class="line">    <span class="comment">// 在移动端打开</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同理，判断页面是否是在微信中打开</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="regexp">/micromessenger/i</span>.test(navigator.userAgent.toLowerCase())) &#123;</div><div class="line">    <span class="comment">// 微信内置浏览器</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="判断横竖屏"><a href="#判断横竖屏" class="headerlink" title="判断横竖屏"></a>判断横竖屏</h2><p>监听<code>onorientationchange/resize</code>事件来判断屏幕方向发生了改变。<br>然后<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"onorientationchange"</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">"orientationchange"</span> : <span class="string">"resize"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.orientation == <span class="number">0</span> || <span class="built_in">window</span>.orientation == <span class="number">180</span>) &#123;</div><div class="line">    <span class="comment">// 竖屏</span></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 横屏</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 或者根据屏幕宽度</span></div><div class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.body.clientWidth &lt; <span class="built_in">document</span>.body.clientHeight) &#123;</div><div class="line">    <span class="comment">// 竖屏</span></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 横屏</span></div><div class="line">  &#125;</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure></p>
<h2 id="滚动不流畅"><a href="#滚动不流畅" class="headerlink" title="滚动不流畅"></a>滚动不流畅</h2><p>在滚动的容器中添加以下属性，在IOS中实现弹性滚动<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-webkit-overflow-scrolling</span> : <span class="selector-tag">touch</span>;</div></pre></td></tr></table></figure></p>
<p>如若在滚动事件上的绑定，可以在检测兼容性之后，使用<code>passive</code>事件绑定优化性能。<br>因为在移动端会默认先去执行listener，判断里面是否会阻止默认事件（<code>e.preventDefaut()</code>）。如果没有，才会触发默认事件（如这里说的滚动），所以如果我们的事件绑定不想阻止默认事件的话，可以将<code>passive = true</code>，这样浏览器就会无阻塞的执行默认事件了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">XXX.addEventListener(type, listener, &#123;</div><div class="line">    <span class="attr">capture</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">passive</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">once</span>: <span class="literal">false</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="安卓设备，输入框弹出时，屏幕尺寸发生改变"><a href="#安卓设备，输入框弹出时，屏幕尺寸发生改变" class="headerlink" title="安卓设备，输入框弹出时，屏幕尺寸发生改变"></a>安卓设备，输入框弹出时，屏幕尺寸发生改变</h2><p>这个神坑会带来几个常见的问题：</p>
<ul>
<li><code>background-size: 100% 100%</code>的全屏背景图变形</li>
<li><code>position: fixed</code>的元素漂移，当键盘收起后不会恢复原位</li>
<li><code>position: absolute</code>的根据<code>bottom</code>定位的元素位置不对<br>解决办法：</li>
<li>媒体查询一下或者JS监测一下，当页面高度低于多少时，设一个足够大或者写死的背景高度</li>
<li>移动端尽量不用<code>fixed</code></li>
<li>想要尽量完美就耀用js或者媒体查询了，做一些特殊处理</li>
</ul>
<h2 id="某些版本的IOS设备，内容为纯数字的标签样式异常"><a href="#某些版本的IOS设备，内容为纯数字的标签样式异常" class="headerlink" title="某些版本的IOS设备，内容为纯数字的标签样式异常"></a>某些版本的IOS设备，内容为纯数字的标签样式异常</h2><p>在某些版本的IOS设备中，内容为纯数字的标签会会被浏览器解析成电话号码，表现类似于在原标签外包了一层<a></a>标签。<br>这就有可能会对页面样式造成影响。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>12345678<span class="tag">&lt;/<span class="name">span</span>&gt;</span>  <span class="comment">&lt;!-- you want it like this --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>12345678<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!-- in fact  --&gt;</span></div></pre></td></tr></table></figure></p>
<p>解决办法是头部加标签屏蔽该功能<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> <span class="attr">name</span>=<span class="string">"format-detection"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="IOS9-3的iphone-5s下，微信内置浏览器屏幕宽度获取异常"><a href="#IOS9-3的iphone-5s下，微信内置浏览器屏幕宽度获取异常" class="headerlink" title="IOS9.3的iphone 5s下，微信内置浏览器屏幕宽度获取异常"></a>IOS9.3的iphone 5s下，微信内置浏览器屏幕宽度获取异常</h2><p>在该版本系统下，DOMContentLoaded时，window.innerWidth获取到的屏幕宽度是980。<br>网上的方法是在meta里加上<code>shrink-to-fit=no</code>，然而似乎不起作用。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, user-scalable=no, maximum-scale=1, shrink-to-fit=no"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>目前还是保险起见的换了方法，用clientWitdh获取<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> wid = <span class="built_in">document</span>.body.clientWidth;</div></pre></td></tr></table></figure></p>
<h2 id="websocket-cocos2d-js开发的游戏在微信中必须触摸屏幕才能接收到消息"><a href="#websocket-cocos2d-js开发的游戏在微信中必须触摸屏幕才能接收到消息" class="headerlink" title="websocket+cocos2d-js开发的游戏在微信中必须触摸屏幕才能接收到消息"></a>websocket+cocos2d-js开发的游戏在微信中必须触摸屏幕才能接收到消息</h2><p>讲真我还没找到这个玄学的原因，后来我改用<code>EGRET</code>引擎重写了客户端就没有这个现象了，服务端和通信模块一点没变……</p>
<h2 id="video全屏播放"><a href="#video全屏播放" class="headerlink" title="video全屏播放"></a>video全屏播放</h2><p>思路是用一个宽高均为100%的容器<code>.video-wrap</code>来包住<code>video</code>，再让<code>video</code>的高度等于容器的高度，进而实现全屏。</p>
<p>不过这里遇到了2个问题：</p>
<ul>
<li>在ios上，微信会默认调用原生的播放器来全屏播放视频，会出现白色的菜单和进度条，影响全屏的体验。</li>
<li>在安卓上，微信会调用X5引擎底层播放器组件来播放视频，容器的z-index属性对其无效。此时也会出现菜单，而且最后还会无耻的出现“推荐视频”一栏…… 据说如果播放的是qq.com域名下的视频则不会碰到这个问题。</li>
</ul>
<p>在ios中，我们用<code>webkit-playsinline</code>可以让webview使用H5的video直接播放，而不再出现菜单和进度条。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"video-wrap"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">"video"</span> <span class="attr">height</span>=<span class="string">"100%"</span> <span class="attr">x-webkit-airplay</span>=<span class="string">"true"</span> <span class="attr">webkit-playsinline</span>=<span class="string">"true"</span> <span class="attr">preload</span>=<span class="string">"auto"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"res/video.mp4"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">video</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.video-wrap</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(../images/p2/bg.jpg);</div><div class="line">  <span class="attribute">background-size</span>: cover;</div><div class="line">  <span class="comment">/*display: none;*/</span></div><div class="line">&#125;</div><div class="line"><span class="selector-tag">video</span> &#123; <span class="attribute">font-size</span>: <span class="number">100%</span>; <span class="attribute">line-height</span>: <span class="number">0</span>; <span class="attribute">vertical-align</span>: baseline; <span class="attribute">-webkit-user-select</span>: none; <span class="attribute">-moz-user-select</span>: none; <span class="attribute">-ms-user-select</span>: none; <span class="attribute">user-select</span>: none; <span class="attribute">outline</span>: none; &#125;</div></pre></td></tr></table></figure>
<h2 id="自动（定时）播放视频"><a href="#自动（定时）播放视频" class="headerlink" title="自动（定时）播放视频"></a>自动（定时）播放视频</h2><p>在ios下，我们可以直接调用<code>video</code>的play方法实现视频的播放</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">// 原生</span></div><div class="line">  <span class="built_in">document</span>.querySelector(<span class="string">'#video'</span>).play();</div><div class="line">  <span class="comment">// jQuery</span></div><div class="line">  $(<span class="string">'video'</span>)[<span class="number">0</span>].play();</div><div class="line">&#125;, <span class="number">1000</span>);</div></pre></td></tr></table></figure>
<p>但在安卓下，由于X5内核绑架了<code>video</code>标签，而且要求视频首次播放时，必须是由用户亲自点击事件触发的才能播放，所以setTimeout不能调用play方法，并且也不能用js去触发click事件……<a href="http://x5.tencent.com/guide?id=2009" target="_blank" rel="external">X5内核视频播放官方问题集</a><br>解决的办法：<br>A.改成用户点击某个按钮后开始播放。<br>B.在游戏开始按钮时，先播放视频然后马上暂停，等到正式要播放视频时，就可以实现跟ios一样的调用方法了。</p>
<h2 id="监听视频播放完毕"><a href="#监听视频播放完毕" class="headerlink" title="监听视频播放完毕"></a>监听视频播放完毕</h2><p>当视频播放完毕后我们希望它能自动隐藏掉并跳到其他界面。<br>video提供了一个视频播放完毕后的事件<code>ended</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#video'</span>).addEventListener(<span class="string">'ended'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</div><div class="line">  <span class="built_in">document</span>.querySelector(<span class="string">'.video-wrap'</span>).innerHTML(<span class="string">''</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;移动端领域有太多的未解之谜，&lt;br&gt;往往是3分靠姿势水平，7分靠框架类库&lt;br&gt;剩下的的90分就是我们今天要讲的玄学了&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DOM元素的尺寸和位置</title>
    <link href="http://shiwah.me/2017/03/19/20170319_domSizePos/"/>
    <id>http://shiwah.me/2017/03/19/20170319_domSizePos/</id>
    <published>2017-03-19T10:00:00.000Z</published>
    <updated>2017-06-05T09:32:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>box-sizing</code> 、<code>offsetWidth</code>、<code>clientWidth</code>、<code>clientLeft</code><br><a id="more"></a></p>
<h2 id="DOM元素的尺寸"><a href="#DOM元素的尺寸" class="headerlink" title="DOM元素的尺寸"></a>DOM元素的尺寸</h2><h3 id="box-sizing对属性的影响"><a href="#box-sizing对属性的影响" class="headerlink" title="box-sizing对属性的影响"></a>box-sizing对属性的影响</h3><p>box-sizing的属性值会直接影响盒模型的尺寸计算。一般常用的box-sizing值有几个:</p>
<blockquote>
<p><code>content-box</code>： （默认值）标准盒模型。width = 内容的宽度，height = 内容的高度。宽度和高度都不包含内容的边框（border）和内边距（padding）<br><code>border-box</code>：width 和 height 属性包括内容，填充和边框，但不包括边距。<br><code>padding-box</code>: 只有火狐支持了，不展开研究</p>
</blockquote>
<p>以下面的代码为例。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"boderBox"</span> <span class="attr">style</span>=<span class="string">"width: 200px;height: 100px;box-sizing: border-box;border: 5px solid #123456; margin: 20px 10px; padding: 7px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"contentBox"</span> <span class="attr">style</span>=<span class="string">"width: 200px;height: 100px;box-sizing: content-box;border: 5px solid #654321; margin: 20px 10px; padding: 7px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$boderBox = <span class="built_in">document</span>.querySelector(<span class="string">'#boderBox'</span>);</div><div class="line">$contentBox = <span class="built_in">document</span>.querySelector(<span class="string">'#contentBox'</span>);</div><div class="line"><span class="built_in">console</span>.info(<span class="string">'offsetWidth'</span>, $boderBox.offsetWidth); <span class="comment">// 200</span></div><div class="line"><span class="built_in">console</span>.info(<span class="string">'offsetWidth'</span>, $contentBox.offsetWidth); <span class="comment">// 224</span></div></pre></td></tr></table></figure>
<p>可见<code>border-box</code>和<code>content-box</code>获取到的offsetWidth值是不同的。<code>content-box</code>的<br>计算方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">offsetWidth = <span class="number">200</span>(内容宽度) + <span class="number">5</span> * <span class="number">2</span>(左右border宽度) + <span class="number">7</span> * <span class="number">2</span> (左右padding值)</div></pre></td></tr></table></figure></p>
<p>###不同属性值的含义</p>
<p>再来看看不同属性值所指代的含义：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"contentBox"</span> <span class="attr">style</span>=<span class="string">"width: 200px;height: 100px;box-sizing: content-box;border: 5px solid #654321; margin: 20px 10px; padding: 7px;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 250px;height: 50px;background: green"</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">```javascript</div><div class="line">  $contentBox = document.querySelector('#contentBox');</div><div class="line"></div><div class="line">  console.info('offsetWidth', '200（不含溢出的内容width）+ 7 * 2(内边距) + 5 * 2(边框)', $contentBox.offsetWidth); // 224</div><div class="line"></div><div class="line">  console.info('clientWidth', '200（不含溢出的内容width）+ 7 * 2 （内边距）- 滚动条宽度（if overflow-y == "scroll"）', $contentBox.clientWidth); // 214</div><div class="line">  </div><div class="line">  console.info('scrollWidth', '250(内容实际宽度) + 7（内边距）', $contentBox.scrollWidth); // 257</div></pre></td></tr></table></figure>
<p>这里需要注意，当父容器加上<code>overflow-y: scroll</code>属性后，clientwidth会再减去15px的滚动条宽度(因不同系统不同浏览器而异)。同理<code>overflow-x: scroll</code>后高度也会减去15px(因不同系统不同浏览器而异)。</p>
<p>因此这三种属性可以理解为：</p>
<blockquote>
<p><code>offsetWidth</code>： 元素在页面布局中实际所占的宽度<br><code>clientWidth</code>： 元素边框内部可视区域（不含溢出部分）的宽度<br><code>scrollWidth</code>: 元素内容实际宽度（含溢出）</p>
</blockquote>
<h2 id="元素的位置"><a href="#元素的位置" class="headerlink" title="元素的位置"></a>元素的位置</h2><p>一般主要使用三个属性值： </p>
<blockquote>
<p><code>offsetLeft</code>： 元素外框相对于offsetParent的位置（父容器的offsetLeft为起点）<br><code>clientLeft</code>： 元素内框（border内）对于外框的宽度，即边框border的宽度<br><code>scrollLeft</code>: 元素滚动到的位置</p>
</blockquote>
<p>so一般使用<code>offsetLeft</code>和<code>offsetTop</code>获取元素的位置。<br>需要注意，当元素父容器有css定位时（position）,offsetParent返回一个指向最近的（closest，指包含层级上的最近）包含该元素的定位元素。如果没有定位的元素，则 offsetParent 为最近的 table 元素对象或根元素（标准模式下为 html；quirks 模式下为 body）。当元素的 style.display 设置为 “none” 时，offsetParent 返回 null。offsetParent 很有用，因为 offsetTop 和 offsetLeft 都是相对于其内边距边界的。</p>
<h3 id="getBoundingClientRect"><a href="#getBoundingClientRect" class="headerlink" title="getBoundingClientRect"></a>getBoundingClientRect</h3><p>可用于返回改元素相对于视口的位置。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo"</span> <span class="attr">style</span>=<span class="string">"position: absolute;left: 70px;margin-left: 100px;border:  5px solid green;width: 100%"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"boderBox"</span> <span class="attr">style</span>=<span class="string">"position: absolute; top:100px;left:100px; width: 200px;height: 100px;border:  10px solid #ccc"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">```javascript</div><div class="line">  $boderBox = document.querySelector('#boderBox');</div><div class="line">  var rectObject = $boderBox.getBoundingClientRect();</div><div class="line"></div><div class="line">  console.info('offsetLeft', '相对于父容器的位置', $boderBox.offsetLeft); // 100</div><div class="line">  console.info('rect-left', '相对于浏览器视口左上角的位置', rectObject.left); // 275</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;box-sizing&lt;/code&gt; 、&lt;code&gt;offsetWidth&lt;/code&gt;、&lt;code&gt;clientWidth&lt;/code&gt;、&lt;code&gt;clientLeft&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《断点》之外的张敬轩</title>
    <link href="http://shiwah.me/2016/10/23/20161023_hins/"/>
    <id>http://shiwah.me/2016/10/23/20161023_hins/</id>
    <published>2016-10-23T06:00:00.000Z</published>
    <updated>2016-12-17T15:11:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多朋友对张敬轩的印象仍然停留在十多年前那首《断点》上，这首歌红遍大江南北的KTV神曲和另外一首烂大街的《吻的太逼真》也曾让我一直把张敬轩归类为『唱了几首口水歌的男歌手』。直到有一天在知乎上被安利了『港乐&amp;张敬轩 交响音乐会』后，才开始发觉轩仔是深藏的宝藏，越听越喜欢。虽然轩仔的大多数作品并没有《断点》这么红，但《断点》绝不是最好的张敬轩。细心的歌迷可能会发现，轩仔早年的的唱法和曲风跟09年之后的简直判若两人。这是因为轩仔在2009年师从刘家昌先生后，唱功的稳定性有了很大的提升，加上近年出演舞台剧的经历和总监Jonny Yim的得力帮助，使得轩仔突然就开嗓了，live实力大增，让许多歌迷都不禁发出『现场版比录音室版更好听』的感叹。当然，一首好的作品除了一把能打动人好声音之外，还要有它的灵魂——歌词，粤语歌坛中不乏优秀的填词人，今天就给大家安利轩仔的10首词曲俱佳的作品。</p>
<a id="more"></a>
<h2 id="1-『我没有为你伤春悲秋不配有憾事』-——-《春秋》-港乐-amp-张敬轩-交响音乐会"><a href="#1-『我没有为你伤春悲秋不配有憾事』-——-《春秋》-港乐-amp-张敬轩-交响音乐会" class="headerlink" title="1. 『我没有为你伤春悲秋不配有憾事』 —— 《春秋》 港乐&amp;张敬轩 交响音乐会"></a>1. 『我没有为你伤春悲秋不配有憾事』 —— 《春秋》 港乐&amp;张敬轩 交响音乐会</h2><p>林夕最擅长这种『爱而不得』的题材了，诸如轩仔的《春秋》、《尘埃落地》，吴雨霏的《我本人》、《人非草木》，主角都是卑微到尘埃里，发出『我没有为你伤春悲秋不配有憾事』的感叹。而在港乐的版本中，轩仔和港乐交响乐团的出色发挥，让这首歌更加的『荡气回肠』。</p>
<p><a href="http://music.163.com/#/song?id=188325" target="_blank" rel="external">《春秋》 港乐&amp;张敬轩 交响音乐会</a></p>
<p><a href="http://music.163.com/#/song?id=28138170" target="_blank" rel="external">《尘埃落地》</a></p>
<h2 id="2-『用黑色声音念着我想你-像黑色诗歌一般多细腻-换黑西装抱起你才优美』-——-《骚灵情歌》-港乐-amp-张敬轩-交响音乐会"><a href="#2-『用黑色声音念着我想你-像黑色诗歌一般多细腻-换黑西装抱起你才优美』-——-《骚灵情歌》-港乐-amp-张敬轩-交响音乐会" class="headerlink" title="2. 『用黑色声音念着我想你 像黑色诗歌一般多细腻 换黑西装抱起你才优美』 —— 《骚灵情歌》 港乐&amp;张敬轩 交响音乐会"></a>2. 『用黑色声音念着我想你 像黑色诗歌一般多细腻 换黑西装抱起你才优美』 —— 《骚灵情歌》 港乐&amp;张敬轩 交响音乐会</h2><p>周耀辉优雅动人的词，加上轩仔自如的真假音切换及管弦乐营造的大气悠然的氛围，使之成为这首歌最好听的版本，绝对算得上轩仔的代表作之一。</p>
<p><a href="http://music.163.com/#/song?id=188294" target="_blank" rel="external">《骚灵情歌》 港乐&amp;张敬轩 交响音乐会</a></p>
<h2 id="3-『人置身这大时代投入几番竞技赛-曾分开曾相爱等待花蕊又跌下来-才洞悉这是恋爱』-——-《樱花树下》-港乐-amp-张敬轩-交响音乐会"><a href="#3-『人置身这大时代投入几番竞技赛-曾分开曾相爱等待花蕊又跌下来-才洞悉这是恋爱』-——-《樱花树下》-港乐-amp-张敬轩-交响音乐会" class="headerlink" title="3. 『人置身这大时代投入几番竞技赛 曾分开曾相爱等待花蕊又跌下来 才洞悉这是恋爱』 —— 《樱花树下》 港乐&amp;张敬轩 交响音乐会"></a>3. 『人置身这大时代投入几番竞技赛 曾分开曾相爱等待花蕊又跌下来 才洞悉这是恋爱』 —— 《樱花树下》 港乐&amp;张敬轩 交响音乐会</h2><p>林若宁根据自己喜欢的电影《秒速五厘米》的灵感所创作的词，如同《秒速五厘米》中的画面一样美好。另有一首根据《花样年华》所创作的《吴哥窟》一样值得推荐。</p>
<p><a href="http://music.163.com/#/song?id=188349" target="_blank" rel="external">《樱花树下》 港乐&amp;张敬轩 交响音乐会</a></p>
<p><a href="http://music.163.com/#/program?id=793396884" target="_blank" rel="external">降两度天后张静萱翻唱的《吴哥窟》</a></p>
<h2 id="4-『逾越了生死-珍惜这份爱才是胜利』-——-《PS-I-Love-You》-港乐-amp-张敬轩-交响音乐会"><a href="#4-『逾越了生死-珍惜这份爱才是胜利』-——-《PS-I-Love-You》-港乐-amp-张敬轩-交响音乐会" class="headerlink" title="4. 『逾越了生死 珍惜这份爱才是胜利』 —— 《PS I Love You》 港乐&amp;张敬轩 交响音乐会"></a>4. 『逾越了生死 珍惜这份爱才是胜利』 —— 《PS I Love You》 港乐&amp;张敬轩 交响音乐会</h2><p>一个鲜有的讲述生死相隔的凄美爱情故事，爱是永恒，无需多言。陈咏谦的作为香港填词人中的后起之秀，实力不俗，如另一首小黄歌《壮举》，又如《stop the time》，同样耳目一新。</p>
<p><a href="http://music.163.com/#/song?id=188345" target="_blank" rel="external">《PS I Love You》 港乐&amp;张敬轩 交响音乐会</a></p>
<p><a href="http://music.163.com/#/song?id=188343" target="_blank" rel="external">《壮举》 港乐&amp;张敬轩 交响音乐会</a></p>
<p><a href="http://music.163.com/#/song?id=188293" target="_blank" rel="external">《stop the time》 港乐&amp;张敬轩 交响音乐会</a></p>
<h2 id="5-『看我这一脸傻泪，语言忘了，表情如何延伸，细意赞叹某种缘份』-——-《灵魂相认》"><a href="#5-『看我这一脸傻泪，语言忘了，表情如何延伸，细意赞叹某种缘份』-——-《灵魂相认》" class="headerlink" title="5. 『看我这一脸傻泪，语言忘了，表情如何延伸，细意赞叹某种缘份』 —— 《灵魂相认》"></a>5. 『看我这一脸傻泪，语言忘了，表情如何延伸，细意赞叹某种缘份』 —— 《灵魂相认》</h2><p>这首歌可以看作是《PS I Love You》的续曲，小克的作品，一首让人非常感动的歌。MV值得一看，讲的是一对60年代的小情侣，男主因为弄丢了前世爱人送的项链回去寻找时，遭到车祸，离开了人世，经历了大半个世纪，终于在下一世中与昏迷在病床上恋人重逢，那一刻他们灵魂相认，回忆起了上一世他们的故事……</p>
<p><a href="http://music.163.com/#/song?id=29544620" target="_blank" rel="external">《灵魂相认》</a></p>
<p><a href="http://www.bilibili.com/video/av1991061/" target="_blank" rel="external">《灵魂相认MV》</a></p>
<h2 id="6-『祈求旧人万岁旧情万岁别随便老去-时光这个坏人偏却冷酷如许-离场慢些也不许』-——-《青春常驻》-Hins-Live-in-Passion"><a href="#6-『祈求旧人万岁旧情万岁别随便老去-时光这个坏人偏却冷酷如许-离场慢些也不许』-——-《青春常驻》-Hins-Live-in-Passion" class="headerlink" title="6. 『祈求旧人万岁旧情万岁别随便老去 时光这个坏人偏却冷酷如许 离场慢些也不许』 —— 《青春常驻》 Hins Live in Passion"></a>6. 『祈求旧人万岁旧情万岁别随便老去 时光这个坏人偏却冷酷如许 离场慢些也不许』 —— 《青春常驻》 Hins Live in Passion</h2><p> 『     叮当可否不要老 伴我长高<br>    星矢可否不要老 伴我征讨<br>    孩子 即使早知真相那味道<br>    却想完美到 去违抗定数<br>    偶像全部也不倒 爸妈以後也安好<br>    最好我在意的 任何面容都 不会老 』<br>在wyman笔下，岁月就是一个残酷坏人，偷走我们的青葱岁月。这首歌比起《时间都去哪了》，更能激起我的共鸣。特别是在2014年的Hins Live in Passion演唱会上轩仔和谭玉瑛姐姐共同演绎的舞台剧版本，对于奔三的我来说威力太大了，想到远在故乡的爸妈，想到昔日的偶像，流泪就要出来了。如果你在生活中是一个时常缅怀时光的人，那这首歌一定会击中你的心底。</p>
<p><a href="http://www.bilibili.com/video/av6250477/" target="_blank" rel="external">《青春常驻》现场版</a></p>
<h2 id="7-『寄居一天记得一生就是活在散聚』-——-《过客别墅》"><a href="#7-『寄居一天记得一生就是活在散聚』-——-《过客别墅》" class="headerlink" title="7. 『寄居一天记得一生就是活在散聚』 —— 《过客别墅》"></a>7. 『寄居一天记得一生就是活在散聚』 —— 《过客别墅》</h2><p>我们人的感情，无时无刻都在散发着，或许你认为只有人或者动物，或者宠物，才会接受的到。其实就算是一间房子，只要你付出过你的爱，当中的一砖一瓦，就会在不知不觉间，跟你联系上。这首由林夕填词的作品，就是去纪念轩仔位于香港薄扶道的故居Felix Villas的故居，同时带出一个概念，就是凡事都应该珍惜和爱护，同时答谢我们生命当中遇过的这些事这些人，为我们的生活，为我们的生命，所带来的美好。</p>
<p>轩仔还有另外一首讲述在外漂泊的歌——《故园花茶》。『回家对着空旷的冰箱 哀伤都靠便当滋养』。如果你和我一样，远离家乡，独自一人在外打拼，一定会有共鸣。</p>
<p><a href="http://music.163.com/#/song?id=39443058" target="_blank" rel="external">《过客别墅》</a></p>
<p><a href="http://music.163.com/#/song?id=188321" target="_blank" rel="external">《故园花茶》 港乐&amp;张敬轩 交响音乐会</a></p>
<h2 id="8-『人大了-開心都想哭』-——-《笑忘书》-张敬轩Unplugged第一乐章音乐会"><a href="#8-『人大了-開心都想哭』-——-《笑忘书》-张敬轩Unplugged第一乐章音乐会" class="headerlink" title="8. 『人大了 開心都想哭』 —— 《笑忘书》 张敬轩Unplugged第一乐章音乐会"></a>8. 『人大了 開心都想哭』 —— 《笑忘书》 张敬轩Unplugged第一乐章音乐会</h2><p>这首歌和王菲的《笑忘书》同名，不过词曲都是新的，林若宁所写的更像是一个刚毕业的年轻人，怀揣梦想初步入社会，却慢慢发现现实生活中各种各样的失望、烦恼、苦痛，到最后的释然吧。有的歌词就是这样，当人年纪越来越大的时候，就会发现这些歌词变得越来越有意思，越来越值得回味。而轩仔作为一个土生土长的广州人，在这个版本最后把歌词变成了『回忆当天三岁的广州』也是这场音乐会的走心之笔。</p>
<p><a href="http://music.163.com/#/song?id=188646" target="_blank" rel="external">《笑忘书》 张敬轩Unplugged第一乐章音乐会</a></p>
<h2 id="9-『也爱用整晚说杜琪峰专长揭露命途无常的道理』-——-《不吐不快》"><a href="#9-『也爱用整晚说杜琪峰专长揭露命途无常的道理』-——-《不吐不快》" class="headerlink" title="9. 『也爱用整晚说杜琪峰专长揭露命途无常的道理』 —— 《不吐不快》"></a>9. 『也爱用整晚说杜琪峰专长揭露命途无常的道理』 —— 《不吐不快》</h2><p>Christopher Chak + 林夕的招牌式的大长句歌词，诸如《富士山下》、《钟无艳》，都非常深入人心，同时也在考验歌者的唱功。这首歌从多个角度去刻画了当代的都市生活，所以每个人对于这首歌会有各自理解。</p>
<p><a href="http://music.163.com/#/song?id=28111608" target="_blank" rel="external">《不吐不快》</a></p>
<h2 id="10-『执起笔想写再见-算算有哪个想见-至发觉世上还有太多可恋』-——-《deadline》-港乐-amp-张敬轩-交响音乐会"><a href="#10-『执起笔想写再见-算算有哪个想见-至发觉世上还有太多可恋』-——-《deadline》-港乐-amp-张敬轩-交响音乐会" class="headerlink" title="10. 『执起笔想写再见 算算有哪个想见 至发觉世上还有太多可恋』 —— 《deadline》 港乐&amp;张敬轩 交响音乐会"></a>10. 『执起笔想写再见 算算有哪个想见 至发觉世上还有太多可恋』 —— 《deadline》 港乐&amp;张敬轩 交响音乐会</h2><p>这首歌张敬轩患抑郁症是黄伟文给他写的作品。词里鼓励大家每一天都把明天当作生命中的最后一天，去感受多一些，去爱多一些。轩仔在最后的三段高音更是把这种感情升华到了极致。『一朝将生死看破，原来能重头来过 仍然有 何其多』</p>
<p><a href="http://music.163.com/#/song?id=188346" target="_blank" rel="external">《deadline》 港乐&amp;张敬轩 交响音乐会</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多朋友对张敬轩的印象仍然停留在十多年前那首《断点》上，这首歌红遍大江南北的KTV神曲和另外一首烂大街的《吻的太逼真》也曾让我一直把张敬轩归类为『唱了几首口水歌的男歌手』。直到有一天在知乎上被安利了『港乐&amp;amp;张敬轩 交响音乐会』后，才开始发觉轩仔是深藏的宝藏，越听越喜欢。虽然轩仔的大多数作品并没有《断点》这么红，但《断点》绝不是最好的张敬轩。细心的歌迷可能会发现，轩仔早年的的唱法和曲风跟09年之后的简直判若两人。这是因为轩仔在2009年师从刘家昌先生后，唱功的稳定性有了很大的提升，加上近年出演舞台剧的经历和总监Jonny Yim的得力帮助，使得轩仔突然就开嗓了，live实力大增，让许多歌迷都不禁发出『现场版比录音室版更好听』的感叹。当然，一首好的作品除了一把能打动人好声音之外，还要有它的灵魂——歌词，粤语歌坛中不乏优秀的填词人，今天就给大家安利轩仔的10首词曲俱佳的作品。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Typescript中实现观察者模式的事件管理器</title>
    <link href="http://shiwah.me/2016/09/29/20160929_tsSubPub/"/>
    <id>http://shiwah.me/2016/09/29/20160929_tsSubPub/</id>
    <published>2016-09-29T01:00:00.000Z</published>
    <updated>2016-09-29T02:40:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>观察者模式的事件管理器可以让游戏中各模块间的功能调用以事件响应的方式相对独立开来，使得各模块间的功能相对更加独立。TS中的实现方法与JS类似，只是某些语法略有不同。<br><a id="more"></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">​<span class="comment">/**</span></div><div class="line"> *</div><div class="line"> * @shihua</div><div class="line"> * 2016.08.29</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventManager</span> </span>&#123;</div><div class="line">  private <span class="keyword">static</span> _listeners = &#123;&#125;;</div><div class="line">  private <span class="keyword">static</span> guid: number = <span class="number">1</span>; <span class="comment">// 识别方法的唯一标识</span></div><div class="line">  <span class="comment">// 订阅事件</span></div><div class="line">  public <span class="keyword">static</span> sub(type: string,fn): <span class="keyword">void</span> &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>._listeners[type] === <span class="string">'undefined'</span>) &#123;</div><div class="line">      <span class="keyword">this</span>._listeners[type] = [];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn === <span class="string">'function'</span>) &#123;</div><div class="line">      <span class="keyword">this</span>._listeners[type].push(fn);</div><div class="line">      fn.guid = <span class="keyword">this</span>.guid;</div><div class="line">      <span class="keyword">this</span>.guid++;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//取消订阅事件</span></div><div class="line">  public <span class="keyword">static</span> unsub(type: string, fn): <span class="keyword">void</span> &#123;</div><div class="line">    <span class="keyword">var</span> arrayEvent = <span class="keyword">this</span>._listeners[type];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> type === <span class="string">'string'</span> &amp;&amp; arrayEvent <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> fn === <span class="string">'function'</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>,length = arrayEvent.length; i &lt; length; i += <span class="number">1</span>) &#123;</div><div class="line">          <span class="keyword">if</span> (arrayEvent[i].guid === fn.guid) &#123;</div><div class="line">            <span class="comment">// 通过guid识别function</span></div><div class="line">            <span class="keyword">this</span>._listeners[type].splice(i,<span class="number">1</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>._listeners[type];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//发布事件</span></div><div class="line">  public <span class="keyword">static</span> pub(type: string, ...data: any[]): <span class="keyword">void</span> &#123;</div><div class="line">    <span class="keyword">var</span> arrayEvent = <span class="keyword">this</span>._listeners[type];</div><div class="line">    <span class="keyword">var</span> handlerArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (arrayEvent <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>,length = arrayEvent.length; i &lt; length; i += <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> arrayEvent[i] === <span class="string">'function'</span>) &#123;</div><div class="line">          arrayEvent[i].apply(<span class="keyword">this</span>, handlerArgs);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;观察者模式的事件管理器可以让游戏中各模块间的功能调用以事件响应的方式相对独立开来，使得各模块间的功能相对更加独立。TS中的实现方法与JS类似，只是某些语法略有不同。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用fis3自动构建前端项目快速上手</title>
    <link href="http://shiwah.me/2016/06/28/20160628_fis3/"/>
    <id>http://shiwah.me/2016/06/28/20160628_fis3/</id>
    <published>2016-06-28T12:00:00.000Z</published>
    <updated>2016-09-29T01:30:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>fis3配置快速开始指南，实现编译SASS(SCSS)，压缩JS、CSS、图片，PC端合雪碧图，移动端自动转换REM值，开发时浏览器自动同步的功能，一份代码编译适应多个环境等功能，满足日产活动项目的需求。<br><a id="more"></a></p>
<h3 id="1-安装node-js环境"><a href="#1-安装node-js环境" class="headerlink" title="1. 安装node.js环境"></a>1. 安装node.js环境</h3><h3 id="2-由于npm网速不理想，-建议安装cnpm，-详细方法：https-npm-taobao-org"><a href="#2-由于npm网速不理想，-建议安装cnpm，-详细方法：https-npm-taobao-org" class="headerlink" title="2. 由于npm网速不理想， 建议安装cnpm， 详细方法：https://npm.taobao.org/"></a>2. 由于npm网速不理想， 建议安装cnpm， 详细方法：<a href="https://npm.taobao.org/" target="_blank" rel="external">https://npm.taobao.org/</a></h3><blockquote>
<p>a.打开命令行（开始菜单搜索cmd）, 输入：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>
<p>b.安装完成后以后npm的指令可以用cnpm代替执行</p>
</blockquote>
<h3 id="3-安装fis3，安装方法：-http-fis-baidu-com-fis3-docs-beginning-install-html"><a href="#3-安装fis3，安装方法：-http-fis-baidu-com-fis3-docs-beginning-install-html" class="headerlink" title="3. 安装fis3，安装方法： http://fis.baidu.com/fis3/docs/beginning/install.html"></a>3. 安装fis3，安装方法： <a href="http://fis.baidu.com/fis3/docs/beginning/install.html" target="_blank" rel="external">http://fis.baidu.com/fis3/docs/beginning/install.html</a></h3><blockquote>
<p>a. 安装fis3环境， 命令行执行：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install -g fis3</div></pre></td></tr></table></figure></p>
<p>b. 由于fis3抽风般的默认使用绝对路径，所以需要安装相对路径插件fis3-hook-relative，命令行执行：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install -g fis3-hook-relative</div></pre></td></tr></table></figure></p>
<p>c. 选装sass/less编译环境，推荐使用sass环境，命令行执行：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install -g fis-parser-node-sass</div></pre></td></tr></table></figure></p>
<p>d. 安装px2rem插件，以后在css文件中只需要按设计稿上的px值1:1编码。命令行执行：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install -g fis-postprocessor-px2rem</div></pre></td></tr></table></figure></p>
<p>e. 安装文件合并插件，命令行执行：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install -g fis3-postpackager-loader</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="4-fis-conf-js配置"><a href="#4-fis-conf-js配置" class="headerlink" title="4. fis-conf.js配置"></a>4. fis-conf.js配置</h3><p>项目一般我们的项目分为pc端和移动端两种，因此fis分两种配置，在PC端上，当我们打包正式包时，会自动合成雪碧图，而在移动端上则不会合图，但会自动将css的px转成rem以实现自适应布局。若有特殊项目则可以自行修改配置文件fis-conf.js。</p>
<ul>
<li><p>PC端fis-conf.js配置<br>目前发现雪碧图插件和文件合并插件不能同时使用，所有选择开启优化效果更明显的雪碧图插件，暂时放弃文件自动合并插件。<br>包含以下功能：编译SASS(SCSS)，压缩JS、CSS、图片，合雪碧图。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// PC端项目 通用配置</span></div><div class="line"><span class="comment">// 测试包配置 执行 fis3 release test</span></div><div class="line"><span class="keyword">var</span> TEST_OUTPUT_PATH = <span class="string">'./test'</span>; <span class="comment">// 测试包路径 （仅执行编译，不压缩）</span></div><div class="line"><span class="keyword">var</span> TEST_USE_HASH = <span class="literal">false</span>; <span class="comment">// 是否使用文件指纹 （随机改变文件名避免浏览器缓存）</span></div><div class="line"></div><div class="line"><span class="comment">// 正式包配置 执行 fis3 release dist</span></div><div class="line"><span class="keyword">var</span> FORMAL_OUTPUT_PATH = <span class="string">'./dist'</span>; <span class="comment">// 正式打包路径（包含编译、压缩代码 、图片压缩、csssprite）</span></div><div class="line"><span class="keyword">var</span> FORMAL_USE_HASH = <span class="literal">false</span>; <span class="comment">// 是否使用文件指纹 （随机改变文件名避免浏览器缓存）</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 常规设置 基本不用动</span></div><div class="line">fis.set(<span class="string">'project.files'</span>, [<span class="string">'src/**'</span>]);</div><div class="line">fis.set(<span class="string">'project.ignore'</span>, [<span class="string">'node_modules/**'</span>, <span class="string">'dist/**'</span>, <span class="string">'README.md'</span> , <span class="string">'local/**'</span> , <span class="string">'.git/**'</span>, <span class="string">'fis-conf.js'</span>]);</div><div class="line">fis.set(<span class="string">'charset'</span>, <span class="string">'utf-8'</span>);</div><div class="line">fis.set(<span class="string">'project.charset'</span>, <span class="string">'utf-8'</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// less 编译插件 fis-parser-less</span></div><div class="line"><span class="comment">// fis.match('**.less', &#123;</span></div><div class="line"><span class="comment">//     parser: fis.plugin('less'),</span></div><div class="line"><span class="comment">//     rExt: '.css'</span></div><div class="line"><span class="comment">// &#125;);</span></div><div class="line"><span class="comment">// fis.match(/^\/src\/c\/_.*\.(css|less)/i,&#123;</span></div><div class="line"><span class="comment">//   release : false</span></div><div class="line"><span class="comment">// &#125;);</span></div><div class="line"></div><div class="line"><span class="comment">// sass 编译插件 fis-parser-node-sass</span></div><div class="line">fis.match(<span class="string">'*.scss'</span>, &#123;</div><div class="line">  <span class="attr">rExt</span>: <span class="string">'.css'</span>,</div><div class="line">  <span class="attr">parser</span>: fis.plugin(<span class="string">'node-sass'</span>)</div><div class="line">&#125;);</div><div class="line">fis.match(<span class="regexp">/^\/src\/css\/_.*\.(css|scss)/i</span>,&#123;</div><div class="line">    <span class="attr">release</span> : <span class="literal">false</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">fis.match(<span class="regexp">/^\/src\/(.*)$/i</span>,&#123;</div><div class="line">  <span class="attr">release</span> : <span class="string">"$1"</span>,</div><div class="line">  <span class="attr">useCache</span> : <span class="literal">false</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 使用相对路径</span></div><div class="line">fis.hook(<span class="string">'relative'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 配置测试打包 不压缩代码 不合图不压缩</span></div><div class="line">fis.media(<span class="string">'test'</span>)</div><div class="line">  .match(<span class="string">'**'</span>, &#123;</div><div class="line">    <span class="attr">relative</span>: <span class="literal">true</span></div><div class="line">  &#125;)</div><div class="line">  .match(<span class="string">'*.&#123;js,css,scss,png,jpg,jpeg,gif,mp3,mp4,flv,swf,svg,eot,ttf,woff&#125;'</span>,&#123;</div><div class="line">      <span class="attr">useHash</span>: TEST_USE_HASH</div><div class="line">  &#125;)</div><div class="line">  .match(<span class="string">'**'</span>, &#123;</div><div class="line">    <span class="attr">deploy</span>: fis.plugin(<span class="string">'local-deliver'</span>, &#123;</div><div class="line">        <span class="attr">to</span>: TEST_OUTPUT_PATH</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 配置正式打包 包含压缩代码 合图图压缩</span></div><div class="line">fis.media(<span class="string">'dist'</span>)</div><div class="line">  .match(<span class="string">'**'</span>, &#123;</div><div class="line">    <span class="attr">relative</span>: <span class="literal">true</span></div><div class="line">  &#125;)</div><div class="line">  .match(<span class="string">'*.&#123;js,css,scss,png,jpg,jpeg,gif,mp3,mp4,flv,swf,svg,eot,ttf,woff&#125;'</span>,&#123;</div><div class="line">      <span class="attr">useHash</span>: FORMAL_USE_HASH</div><div class="line">  &#125;)</div><div class="line">  .match(<span class="string">'**.js'</span>,&#123;</div><div class="line">    <span class="attr">optimizer</span>: fis.plugin(<span class="string">'uglify-js'</span>,&#123;</div><div class="line">      <span class="attr">output</span> : &#123;</div><div class="line">        <span class="attr">ascii_only</span> : <span class="literal">true</span></div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line">  .match(<span class="string">'**.html:js'</span>,&#123;</div><div class="line">    <span class="attr">optimizer</span>: fis.plugin(<span class="string">'uglify-js'</span>)</div><div class="line">  &#125;)</div><div class="line">  .match(<span class="regexp">/^\/src\/c\/(.*\.png)$/i</span>,&#123;</div><div class="line">    <span class="attr">release</span> : <span class="string">"i/spriter/$1"</span></div><div class="line">  &#125;)</div><div class="line">  .match(<span class="string">'*.png'</span>, &#123;</div><div class="line">    <span class="attr">optimizer</span>: fis.plugin(<span class="string">'png-compressor'</span>)</div><div class="line">  &#125;)</div><div class="line">  .match(<span class="string">'*.&#123;css,scss&#125;'</span>,&#123;</div><div class="line">    <span class="attr">optimizer</span>: fis.plugin(<span class="string">'clean-css'</span>)</div><div class="line">  &#125;)</div><div class="line">  .match(<span class="string">'**html:css'</span>,&#123;</div><div class="line">    <span class="attr">optimizer</span>: fis.plugin(<span class="string">'clean-css'</span>)</div><div class="line">  &#125;)</div><div class="line">  .match(<span class="string">'::package'</span>, &#123;</div><div class="line">    <span class="attr">spriter</span>: fis.plugin(<span class="string">'csssprites'</span>,&#123;</div><div class="line">      <span class="attr">layout</span>: <span class="string">'matrix'</span>,</div><div class="line">      <span class="attr">margin</span>: <span class="string">'0'</span></div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line">  <span class="comment">// .match('::package', &#123;</span></div><div class="line">  <span class="comment">//   postpackager: fis.plugin('loader', &#123;</span></div><div class="line">  <span class="comment">//     allInOne: &#123;</span></div><div class="line">  <span class="comment">//       js: 'j/auto_aio.js',</span></div><div class="line">  <span class="comment">//       css: 'c/auto_aio.css'</span></div><div class="line">  <span class="comment">//     &#125;</span></div><div class="line">  <span class="comment">//   &#125;)</span></div><div class="line">  <span class="comment">// &#125;)</span></div><div class="line">  .match(<span class="string">'*.&#123;css,scss&#125;'</span>,&#123;</div><div class="line">    <span class="attr">useSprite</span> : <span class="literal">true</span></div><div class="line">  &#125;)</div><div class="line">  .match(<span class="string">'**'</span>, &#123;</div><div class="line">    <span class="attr">deploy</span>: fis.plugin(<span class="string">'local-deliver'</span>, &#123;</div><div class="line">      <span class="attr">to</span>: FORMAL_OUTPUT_PATH</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>移动端fis-conf.js配置<br>包含以下功能：编译SASS(SCSS)，自动将px单位转为REM单位，压缩JS、CSS、图片，合并JS/CSS文件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 移动端项目 通用配置</span></div><div class="line"><span class="comment">// 测试包配置 执行 fis3 release test</span></div><div class="line"><span class="keyword">var</span> TEST_OUTPUT_PATH = <span class="string">'./test'</span>; <span class="comment">// 测试包路径 （仅执行编译，不压缩）</span></div><div class="line"><span class="keyword">var</span> TEST_USE_HASH = <span class="literal">false</span>; <span class="comment">// 是否使用文件指纹 （随机改变文件名避免浏览器缓存）</span></div><div class="line"></div><div class="line"><span class="comment">// 正式包配置 执行 fis3 release dist</span></div><div class="line"><span class="keyword">var</span> FORMAL_OUTPUT_PATH = <span class="string">'./dist'</span>; <span class="comment">// 正式打包路径（包含编译、压缩代码 、图片压缩、csssprite）</span></div><div class="line"><span class="keyword">var</span> FORMAL_USE_HASH = <span class="literal">false</span>; <span class="comment">// 是否使用文件指纹 （随机改变文件名避免浏览器缓存）</span></div><div class="line"></div><div class="line"><span class="comment">// 移动端自适应配置</span></div><div class="line"><span class="keyword">var</span> REM_UNIT = <span class="number">100</span>; <span class="comment">// rem的基础单位</span></div><div class="line"><span class="keyword">var</span> BASE_DPR = <span class="number">1</span>; <span class="comment">// 通用设备时一般为1</span></div><div class="line"></div><div class="line"><span class="comment">// 常规设置 基本不用动</span></div><div class="line">fis.set(<span class="string">'project.files'</span>, [<span class="string">'src/**'</span>]);</div><div class="line">fis.set(<span class="string">'project.ignore'</span>, [<span class="string">'node_modules/**'</span>, <span class="string">'dist/**'</span>, <span class="string">'README.md'</span> , <span class="string">'local/**'</span> , <span class="string">'.git/**'</span>, <span class="string">'fis-conf.js'</span>]);</div><div class="line">fis.set(<span class="string">'charset'</span>, <span class="string">'utf-8'</span>);</div><div class="line">fis.set(<span class="string">'project.charset'</span>, <span class="string">'utf-8'</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// less 编译插件 fis-parser-less</span></div><div class="line"><span class="comment">// fis.match('**.less', &#123;</span></div><div class="line"><span class="comment">//     parser: fis.plugin('less'),</span></div><div class="line"><span class="comment">//     rExt: '.css'</span></div><div class="line"><span class="comment">// &#125;);</span></div><div class="line"><span class="comment">// fis.match(/^\/src\/c\/_.*\.(css|less)/i,&#123;</span></div><div class="line"><span class="comment">//   release : false</span></div><div class="line"><span class="comment">// &#125;);</span></div><div class="line"></div><div class="line"><span class="comment">// sass 编译插件 fis-parser-node-sass</span></div><div class="line">fis.match(<span class="string">'*.scss'</span>, &#123;</div><div class="line">  <span class="attr">rExt</span>: <span class="string">'.css'</span>,</div><div class="line">  <span class="attr">parser</span>: fis.plugin(<span class="string">'node-sass'</span>)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">fis.match(<span class="regexp">/^\/src\/(.*)$/i</span>,&#123;</div><div class="line">  <span class="attr">release</span> : <span class="string">"$1"</span>,</div><div class="line">  <span class="attr">useCache</span> : <span class="literal">false</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">fis.match(<span class="string">'*.&#123;css,scss&#125;'</span>, &#123;</div><div class="line">    <span class="attr">postprocessor</span>: fis.plugin(<span class="string">'px2rem'</span>, &#123;</div><div class="line">      <span class="attr">baseDpr</span>: BASE_DPR,             <span class="comment">// base device pixel ratio (default: 2)</span></div><div class="line">      remVersion: <span class="literal">true</span>,       <span class="comment">// whether to generate rem version (default: true)</span></div><div class="line">      remUnit: REM_UNIT,            <span class="comment">// rem unit value (default: 75)</span></div><div class="line">      remPrecision: <span class="number">6</span>         <span class="comment">// rem precision (default: 6)</span></div><div class="line">    &#125;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 使用相对路径</span></div><div class="line">fis.hook(<span class="string">'relative'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 配置测试打包 不压缩代码 不合图不压缩</span></div><div class="line">fis.media(<span class="string">'test'</span>)</div><div class="line">  .match(<span class="string">'**'</span>, &#123;</div><div class="line">    <span class="attr">relative</span>: <span class="literal">true</span></div><div class="line">  &#125;)</div><div class="line">  .match(<span class="string">'*.&#123;js,css,scss,png,jpg,jpeg,gif,mp3,mp4,flv,swf,svg,eot,ttf,woff&#125;'</span>,&#123;</div><div class="line">      <span class="attr">useHash</span>: TEST_USE_HASH</div><div class="line">  &#125;)</div><div class="line">  .match(<span class="string">'**'</span>, &#123;</div><div class="line">    <span class="attr">deploy</span>: fis.plugin(<span class="string">'local-deliver'</span>, &#123;</div><div class="line">        <span class="attr">to</span>: TEST_OUTPUT_PATH</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line"></div><div class="line"><span class="comment">// 配置正式打包 包含压缩代码 合图图压缩</span></div><div class="line">fis.media(<span class="string">'dist'</span>)</div><div class="line">  .match(<span class="string">'**'</span>, &#123;</div><div class="line">    <span class="attr">relative</span>: <span class="literal">true</span></div><div class="line">  &#125;)</div><div class="line">  .match(<span class="string">'*.&#123;js,css,scss,png,jpg,jpeg,gif,mp3,mp4,flv,swf,svg,eot,ttf,woff&#125;'</span>,&#123;</div><div class="line">      <span class="attr">useHash</span>: FORMAL_USE_HASH</div><div class="line">  &#125;)</div><div class="line">  .match(<span class="string">'**.js'</span>,&#123;</div><div class="line">    <span class="attr">optimizer</span>: fis.plugin(<span class="string">'uglify-js'</span>,&#123;</div><div class="line">      <span class="attr">output</span> : &#123;</div><div class="line">        <span class="attr">ascii_only</span> : <span class="literal">true</span></div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line">  .match(<span class="string">'**.html:js'</span>,&#123;</div><div class="line">    <span class="attr">optimizer</span>: fis.plugin(<span class="string">'uglify-js'</span>)</div><div class="line">  &#125;)</div><div class="line">  .match(<span class="string">'*.png'</span>, &#123;</div><div class="line">    <span class="attr">optimizer</span>: fis.plugin(<span class="string">'png-compressor'</span>)</div><div class="line">  &#125;)</div><div class="line">  .match(<span class="string">'*.&#123;css,scss&#125;'</span>,&#123;</div><div class="line">    <span class="attr">optimizer</span>: fis.plugin(<span class="string">'clean-css'</span>)</div><div class="line">  &#125;)</div><div class="line">  .match(<span class="string">'**html:css'</span>,&#123;</div><div class="line">    <span class="attr">optimizer</span>: fis.plugin(<span class="string">'clean-css'</span>)</div><div class="line">  &#125;)</div><div class="line">  .match(<span class="string">'*.&#123;css,scss&#125;'</span>,&#123;</div><div class="line">    <span class="attr">useSprite</span> : <span class="literal">true</span></div><div class="line">  &#125;)</div><div class="line">  .match(<span class="string">'::package'</span>, &#123;</div><div class="line">    <span class="attr">postpackager</span>: fis.plugin(<span class="string">'loader'</span>, &#123;</div><div class="line">      <span class="attr">allInOne</span>: &#123;</div><div class="line">        <span class="attr">js</span>: <span class="string">'j/auto_aio.js'</span>,</div><div class="line">        <span class="attr">css</span>: <span class="string">'c/auto_aio.css'</span></div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line">  .match(<span class="string">'**'</span>, &#123;</div><div class="line">    <span class="attr">deploy</span>: fis.plugin(<span class="string">'local-deliver'</span>, &#123;</div><div class="line">      <span class="attr">to</span>: FORMAL_OUTPUT_PATH</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="5-开始使用"><a href="#5-开始使用" class="headerlink" title="5.开始使用"></a>5.开始使用</h3><p>将fis-conf.js拷到项目文件夹下。一般项目文件夹结构如下：<br>    文件目录结构如下：<br>    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">└── 项目名称</div><div class="line">    ├── src</div><div class="line">    │    ├── h</div><div class="line">    │    ├── c</div><div class="line">    │    ├── j</div><div class="line">    │    ├── i</div><div class="line">    │    └── res</div><div class="line">    └── fis-conf.js</div></pre></td></tr></table></figure></p>
<h3 id="6-开发时开启浏览器自动同步刷新功能（类似browser-sync）"><a href="#6-开发时开启浏览器自动同步刷新功能（类似browser-sync）" class="headerlink" title="6. 开发时开启浏览器自动同步刷新功能（类似browser-sync）"></a>6. 开发时开启浏览器自动同步刷新功能（类似browser-sync）</h3><blockquote>
<p>a. 在命令行中进入到项目目录下。<br>b. 执行以下命令，然后浏览器会默认自动打开127.0.0.1:8080，若没有则要自行打开。<br>    <figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fis3 server <span class="built_in">start</span> -- <span class="built_in">type</span> node</div></pre></td></tr></table></figure></p>
<p>c. 命令行执行开启自动同步刷新功能<br>    <figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fis3 release -wL</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="7-编译测试包，当完成项目编码后，可以打测试包，放到线上测试环境中测试，测试包不会压缩代码、合并文件，以方便调试。"><a href="#7-编译测试包，当完成项目编码后，可以打测试包，放到线上测试环境中测试，测试包不会压缩代码、合并文件，以方便调试。" class="headerlink" title="7. 编译测试包，当完成项目编码后，可以打测试包，放到线上测试环境中测试，测试包不会压缩代码、合并文件，以方便调试。"></a>7. 编译测试包，当完成项目编码后，可以打测试包，放到线上测试环境中测试，测试包不会压缩代码、合并文件，以方便调试。</h3><blockquote>
<p>a. 在命令行中进入到项目目录下。<br>b. 命令行执行：<br>    <figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fis3 release test</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="8-编译正式包，当测试通过后，可以打正式包，此时就会压缩代码、合并文件。"><a href="#8-编译正式包，当测试通过后，可以打正式包，此时就会压缩代码、合并文件。" class="headerlink" title="8. 编译正式包，当测试通过后，可以打正式包，此时就会压缩代码、合并文件。"></a>8. 编译正式包，当测试通过后，可以打正式包，此时就会压缩代码、合并文件。</h3><blockquote>
<p>a. 在命令行中进入到项目目录下。<br>b. 命令行执行：<br>    <figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fis3 release dist</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="9-如果在线上遇到强缓存的情况，可以将配置文件中TEST-USE-HASH或FORMAL-USE-HASH置为true，开启文件指纹功能。"><a href="#9-如果在线上遇到强缓存的情况，可以将配置文件中TEST-USE-HASH或FORMAL-USE-HASH置为true，开启文件指纹功能。" class="headerlink" title="9.如果在线上遇到强缓存的情况，可以将配置文件中TEST_USE_HASH或FORMAL_USE_HASH置为true，开启文件指纹功能。"></a>9.如果在线上遇到强缓存的情况，可以将配置文件中TEST_USE_HASH或FORMAL_USE_HASH置为true，开启文件指纹功能。</h3><h3 id="10-使用rem自适应布局方案时，需要注意下面几点："><a href="#10-使用rem自适应布局方案时，需要注意下面几点：" class="headerlink" title="10.使用rem自适应布局方案时，需要注意下面几点："></a>10.使用rem自适应布局方案时，需要注意下面几点：</h3><blockquote>
<p>a. 编写css时，当遇到如1px边框，固定px大小的字体这种不需要使用rem自适应大小的属性时，在属性后面加<code>/*px*/</code>，详情参考<a href="https://github.com/songsiqi/px2rem" target="_blank" rel="external">https://github.com/songsiqi/px2rem</a><br>  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.selector</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">64px</span>; <span class="comment">/*px*/</span></div><div class="line">  <span class="attribute">font-size</span>: <span class="number">28px</span>; <span class="comment">/*px*/</span></div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>; <span class="comment">/*no*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> b. 请在CSS中加入默认字体大小：(竖屏情况下)<br>  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 默认是iphone6 */</span></div><div class="line"><span class="selector-tag">html</span>&#123; <span class="attribute">font-size</span>: <span class="number">50px</span>; &#125;</div><div class="line">@<span class="keyword">media</span> screen and (max-width:<span class="number">359px</span>) and (orientation:portrait) &#123;</div><div class="line">    <span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">46.667px</span>; &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 常见的安卓机 */</span></div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">360px</span>) and (max-width:<span class="number">374px</span>) and (orientation:portrait) &#123;</div><div class="line">    <span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">48px</span>; &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 某些冷门的安卓机 如nexus4 */</span></div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">384px</span>) and (max-width:<span class="number">399px</span>) and (orientation:portrait) &#123;</div><div class="line">    <span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">51.333px</span>; &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 某些冷门的安卓机 如nexus6 */</span></div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">400px</span>) and (max-width:<span class="number">413px</span>) and (orientation:portrait) &#123;</div><div class="line">    <span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">53.333px</span>; &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* iphone6 plus */</span></div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">414px</span>) and (max-width:<span class="number">431px</span>) and (orientation:portrait)&#123;</div><div class="line">    <span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">55.2px</span>; &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 以下是其它设备 */</span></div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">432px</span>) and (max-width:<span class="number">479px</span>) and (orientation:portrait)&#123;</div><div class="line">    <span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">57.6px</span>; &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">480px</span>)and (max-width:<span class="number">639px</span>) and (orientation:portrait)&#123;</div><div class="line">   <span class="selector-tag">html</span>&#123; <span class="attribute">font-size</span>: <span class="number">64px</span>;&#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">640px</span>) and (orientation:portrait)&#123;</div><div class="line">   <span class="selector-tag">html</span>&#123; <span class="attribute">font-size</span>: <span class="number">85.333px</span>;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>c. viewport通常设置为1即可。<br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>d.动态适配rem的值<br> (1) 若项目页面带滚动条，只需要根据宽度进行自适应的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">_initRem</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> pxUnit = <span class="number">100</span>;     <span class="comment">// 在px2rem中预设rem的值 即 1rem = ? px</span></div><div class="line">  <span class="keyword">var</span> designWid = <span class="number">750</span>;  <span class="comment">// 设计稿宽度</span></div><div class="line">  <span class="keyword">var</span> winWid = <span class="built_in">document</span>.body.clientWidth;</div><div class="line">  <span class="keyword">var</span> winHei = <span class="built_in">document</span>.body.clientHeight;</div><div class="line">  <span class="keyword">var</span> bl = winWid / designWid;</div><div class="line">  <span class="built_in">document</span>.querySelector(<span class="string">'html'</span>).style.fontSize = (bl * pxUnit) + <span class="string">'px'</span>;</div><div class="line">&#125;</div><div class="line">_initRem();</div></pre></td></tr></table></figure></p>
<p> (2) 若项目是单屏页面，吴滚动条时，还需要根据屏幕的宽高比例进行自适应：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">_initRem</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> pxUnit = <span class="number">100</span>;     <span class="comment">// 在px2rem中预设rem的值 即 1rem = ? px</span></div><div class="line">  <span class="keyword">var</span> designWid = <span class="number">750</span>;  <span class="comment">// 设计稿宽度</span></div><div class="line">  <span class="keyword">var</span> designHei = <span class="number">1206</span>; <span class="comment">// 设计稿高度</span></div><div class="line">  <span class="keyword">var</span> winWid = <span class="built_in">document</span>.body.clientWidth;</div><div class="line">  <span class="keyword">var</span> winHei = <span class="built_in">document</span>.body.clientHeight;</div><div class="line">  <span class="keyword">var</span> bl = winHei / winWid &lt; (designHei / designWid) ? winHei / designHei : winWid / designWid;</div><div class="line">  <span class="built_in">document</span>.querySelector(<span class="string">'html'</span>).style.fontSize = (bl * pxUnit) + <span class="string">'px'</span>;</div><div class="line">&#125;</div><div class="line">_initRem();</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;fis3配置快速开始指南，实现编译SASS(SCSS)，压缩JS、CSS、图片，PC端合雪碧图，移动端自动转换REM值，开发时浏览器自动同步的功能，一份代码编译适应多个环境等功能，满足日产活动项目的需求。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Javascript工厂模式</title>
    <link href="http://shiwah.me/2016/01/11/20160111_factoryMode/"/>
    <id>http://shiwah.me/2016/01/11/20160111_factoryMode/</id>
    <published>2016-01-11T15:00:00.000Z</published>
    <updated>2017-06-03T16:16:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近买了一本张容铭写的《JavaScript设计模式》来读读。<br>希望可以梳理和加深对JS代码的理解。<br>今天先来理解一下工厂模式。包括<code>简单工厂模式</code>、<code>工厂方法模式</code>、<code>抽象工厂模式</code><br><a id="more"></a></p>
<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p><code>简单工厂模式（Simple Factory）又叫静态工厂方法，由一个工厂对象决定创建某种产品对象类的实例。</code><br>以我的理解，这种设计模式的目的是：统一几个对象的创建入口，这样就可以抽取这几个对象创建时的共性（共用代码），同时可以由该工厂方法决定具体创建那个对象。</p>
<p>比如屏幕中有modal和pop两种弹出窗体，他们在打开前都需要获取window的width和height属性，那么我们可以通过一个openWin方法实现对两者的调用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> modal = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> openWin = <span class="function"><span class="keyword">function</span>(<span class="params">mode</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> width = <span class="built_in">window</span>.width;</div><div class="line">  <span class="keyword">var</span> height = <span class="built_in">window</span>.height;</div><div class="line">  <span class="keyword">if</span> (<span class="string">'modal'</span> == mode) &#123;</div><div class="line">    <span class="keyword">new</span> model(width, height);</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'pop'</span> == mode) &#123;</div><div class="line">    <span class="keyword">new</span> pop(width, height);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>在上述的模式中有这样一个小缺陷，比方说当系统中新增了一个类dialog，此时我们不仅需要写dialog相关的构造放，还需要在openWin中的判断多加一条，这样静态的方法似乎显得不是很灵活。</p>
<p>而工厂方法模式比之前的简单工厂模式进一步的抽取了共性，不仅是通过一个方法的调用获得两种对象（统一入口），而且要实现两种对象可以通过同一个类（即工厂类）new出来。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Factory = <span class="function"><span class="keyword">function</span>(<span class="params">type, content</span>) </span>&#123;</div><div class="line">  <span class="comment">// 先判断this是否指向Factory</span></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> Factory) &#123;</div><div class="line">    <span class="keyword">var</span> s = <span class="keyword">new</span> <span class="keyword">this</span>[type](content);</div><div class="line">    <span class="keyword">return</span> s;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Factory(type, content);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">Factory.prototype = &#123;</div><div class="line">  <span class="string">'modal'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">, <span class="string">'pop'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">, <span class="string">'dialog'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p><code>抽象工厂模式</code>通过对类的工厂抽象使其业务用于产品类簇的创建，而不负责创建某一类产品的实例。<br>比如在上面的工厂方法中，modal类还分为smallModal和bigModal两种子类，他们都有一个共同的属性type，那我们再把他们的共性抽取出来，作为一个抽象类，不用于实现。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 抽象工厂方法</span></div><div class="line"><span class="keyword">var</span> WinFactory = <span class="function"><span class="keyword">function</span>(<span class="params">subType, superType</span>) </span>&#123;</div><div class="line">  <span class="comment">// 判断抽象工厂中是否有该抽象类</span></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> WinFactory[superType] === <span class="string">'function'</span>) &#123;</div><div class="line">    <span class="comment">// 缓存类</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">    <span class="comment">// 继承父类的属性和方法</span></div><div class="line">    F.prototype = <span class="keyword">new</span> WinFactory[superType]();</div><div class="line">    <span class="comment">// 将子类的构造器指向子类</span></div><div class="line">    subType.constructor = subType;</div><div class="line">    <span class="comment">// 子类原型继承『父类』</span></div><div class="line">    subType.prototype = <span class="keyword">new</span> F();</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 不存在该抽象类</span></div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'未创建该抽象类'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">WinFactory.modal = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.type = <span class="string">'modal'</span>;</div><div class="line">&#125;</div><div class="line">WinFactory.modal.prototype = &#123;</div><div class="line">  <span class="attr">show</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象方法不能调用'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 生成一个smallModal子类</span></div><div class="line"><span class="keyword">var</span> smallModal = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125; </div><div class="line">WinFactory(smallModal, <span class="string">'modal'</span>);</div><div class="line">smallModal.prototype.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'show'</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> modal = <span class="keyword">new</span> smallModal();</div><div class="line"><span class="built_in">console</span>.log(modal.show());</div><div class="line"><span class="built_in">console</span>.log(modal.type);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近买了一本张容铭写的《JavaScript设计模式》来读读。&lt;br&gt;希望可以梳理和加深对JS代码的理解。&lt;br&gt;今天先来理解一下工厂模式。包括&lt;code&gt;简单工厂模式&lt;/code&gt;、&lt;code&gt;工厂方法模式&lt;/code&gt;、&lt;code&gt;抽象工厂模式&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>prototype.function与this.function的区别</title>
    <link href="http://shiwah.me/2016/01/08/20160108_prototype/"/>
    <id>http://shiwah.me/2016/01/08/20160108_prototype/</id>
    <published>2016-01-07T17:00:00.000Z</published>
    <updated>2016-01-07T17:00:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>当我们在用javascript中的function做面向对象开发时，可能会有这样的疑惑，<br>prototype.function与this.function都可以定义对象的方法，那二者有何区别呢？<br><a id="more"></a></p>
<h2 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h2><p>先用一段代码来说明二者的区别：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> actor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> param = <span class="number">1</span>;</div><div class="line">  <span class="keyword">this</span>.act = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> param;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">actor.prototype.play = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> param;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> man1 = <span class="keyword">new</span> actor();</div><div class="line"><span class="keyword">var</span> man2 = <span class="keyword">new</span> actor();</div><div class="line"><span class="built_in">console</span>.log(man1.act === man2.act);   <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log(man1.play === man2.play); <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(man1.act()); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(man1.play()); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<h2 id="方法指向的内存地址不同"><a href="#方法指向的内存地址不同" class="headerlink" title="方法指向的内存地址不同"></a>方法指向的内存地址不同</h2><p>此时我们会发现，man1、man2虽然是同一个『类』new出来的对象，但是他们的<code>act</code>方法却不相等，也就是说，两个对象的的act方法的各自占据一块内存区域。<br>而用<code>prototype</code>定义的<code>play</code>方法，则指向单一的同一块内存区域。</p>
<p><strong>由此可见，如果一个对象被实例化多次，prototype定义的方法相对会更节省内存。</strong></p>
<h2 id="闭包内的参数"><a href="#闭包内的参数" class="headerlink" title="闭包内的参数"></a>闭包内的参数</h2><p>当闭包中的param参数没有提供外露句柄时(如this.param = XXX)，play方法是获取不到它的。</p>
<h2 id="如何取舍"><a href="#如何取舍" class="headerlink" title="如何取舍"></a>如何取舍</h2><ol>
<li>如果我们定义的方法里经常需要调用闭包中的变量（如上面的param），这时候使用this.function会更加便捷。</li>
<li>当我们定义的类会生成多个对象，而对象中的某些方法，执行的过程中不需要太多的访问闭包中的参数，从性能优化的角度会优先考虑prototype。</li>
<li>当在单例模式下（即一个对象在程序中只保持一个实例），这时候两者定义的方法从内存消耗上基本上是持平的，因此主要参考第一条中的原则。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我们在用javascript中的function做面向对象开发时，可能会有这样的疑惑，&lt;br&gt;prototype.function与this.function都可以定义对象的方法，那二者有何区别呢？&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webaudio</title>
    <link href="http://shiwah.me/2016/01/07/20160106_webaudio/"/>
    <id>http://shiwah.me/2016/01/07/20160106_webaudio/</id>
    <published>2016-01-07T15:00:00.000Z</published>
    <updated>2017-03-19T10:23:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>HTML5除了提供一个最基础的audio标签之外，还额外提供了一个更高性能的音频播放api——webaudio。<br>可以用来实现如果用audio标签难以实现的高频、重叠的音效，如枪击游戏中的枪击声。</p>
<a id="more"></a>
<h2 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h2><p>在webaudio中，<br>我们可以创建一个<code>AudioContext</code>对象<br><code>AudioContext</code>中的<code>decodeAudioData</code>允许我们将<code>arrayBufer</code>格式的二进制流解码成为浏览器所支持的音频数据流。<br>此外，<code>AudioContext</code>还可以创建<code>AudioBufferSourceNode</code>对象，它包含了父类<code>AudioNode</code>中的属性和方法，即包括了我们需要用到的音频数据流的读取play方法。可以用来播放音频数据流。</p>
<p>利用webaudio播放音乐一般需要下面几步：</p>
<h2 id="1-加载音频文件读取为arrayBuffer格式的二进制流"><a href="#1-加载音频文件读取为arrayBuffer格式的二进制流" class="headerlink" title="1.加载音频文件读取为arrayBuffer格式的二进制流"></a>1.加载音频文件读取为arrayBuffer格式的二进制流</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  request.open(<span class="string">'GET'</span>, url, <span class="literal">true</span>);</div><div class="line">  request.responseType = <span class="string">'arraybuffer'</span>;</div><div class="line">  request.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arrayBuffer = request.response；</div><div class="line">    <span class="comment">// todo 去往下一步</span></div><div class="line">  &#125;;</div><div class="line">  request.send();</div></pre></td></tr></table></figure>
<h2 id="2-将arrayBuffer格式的二进制流读出成音频数据流"><a href="#2-将arrayBuffer格式的二进制流读出成音频数据流" class="headerlink" title="2.将arrayBuffer格式的二进制流读出成音频数据流"></a>2.将arrayBuffer格式的二进制流读出成音频数据流</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> context = <span class="keyword">new</span> (<span class="built_in">window</span>.AudioContext || <span class="built_in">window</span>.webkitAudioContext || <span class="built_in">window</span>.mozAudioContext)();</div><div class="line">  context.decodeAudioData(request.response, <span class="function"><span class="keyword">function</span>(<span class="params">buffer</span>) </span>&#123;</div><div class="line">  <span class="comment">// 去往下一步</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="3-创建AudioBufferSourceNode，播放音频数据流"><a href="#3-创建AudioBufferSourceNode，播放音频数据流" class="headerlink" title="3.创建AudioBufferSourceNode，播放音频数据流"></a>3.创建AudioBufferSourceNode，播放音频数据流</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> audio = context.createBufferSource(); <span class="comment">// 创建AudioBufferSourceNode</span></div><div class="line">audio.buffer = buffer; <span class="comment">// 设置数据流</span></div><div class="line">audio.connect(destination); <span class="comment">// 将AudioBufferSourceNode『部署』到播放终端上</span></div><div class="line"><span class="comment">// 下面三个方法都是执行播放动作，由于不同时期的webaudio的api差异很大，所以调用方法有所不同</span></div><div class="line"><span class="keyword">if</span> (audio.start) &#123;</div><div class="line">  audio.start(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (audio[<span class="string">'noteGrainOn'</span>]) &#123;</div><div class="line">  <span class="keyword">var</span> duration = audio.buffer.duration;</div><div class="line">  audio[<span class="string">'noteGrainOn'</span>](<span class="number">0</span>, <span class="number">0</span>, duration);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  audio[<span class="string">'noteOn'</span>](<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/shihuacivis/webaudio-demo" target="_blank" rel="external">github地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTML5除了提供一个最基础的audio标签之外，还额外提供了一个更高性能的音频播放api——webaudio。&lt;br&gt;可以用来实现如果用audio标签难以实现的高频、重叠的音效，如枪击游戏中的枪击声。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在iframe子窗口调用父级窗口方法</title>
    <link href="http://shiwah.me/2016/01/05/20160105_iframe/"/>
    <id>http://shiwah.me/2016/01/05/20160105_iframe/</id>
    <published>2016-01-05T12:00:00.000Z</published>
    <updated>2016-01-05T13:02:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>iframe子窗口调用父级窗口方法分为两种情况，跨越及同域调用</p>
<a id="more"></a>
<h2 id="iframe子窗口调用父级窗口"><a href="#iframe子窗口调用父级窗口" class="headerlink" title="iframe子窗口调用父级窗口"></a>iframe子窗口调用父级窗口</h2><p>假设父级窗口index.html中有一个<code>closeModal</code>方法，和一个iframe，我们想在iframe中调用这个方法。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"ifr"</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">closeModal</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// todo</span></div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当iframe打开的页面与父窗口在同一个域名下时，我们通过window.parent拿到父窗口的window句柄，从而调用到父窗口window句柄下的方法<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- iframe content --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="built_in">window</span>.parent.closeModal();</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>由于js对跨域权限做了限制，当iframe打开的是另一个域名下的地址时，我们可以通过下面这种方法“巧妙”的调用到父窗口下的方法——在iframe中再嵌入一层子iframe用于打开一个与父级同域名的页面，由于这个子iframe与父级同域，因此可以通过他调用我们需要的方法<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- iframe content --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"child"</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- child content --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="built_in">window</span>.parent.parent.closeModal();</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上述方法非常的“投机”，那么下面这种方法则可以说是名门正派了。</p>
<p>##HTML5中的postMessage<br>HTML5提供了新的通信api——<code>postMessage</code>，可以允许父容器与子容器间进行通信<br>那么实现的过程就如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"ifr"</span> <span class="attr">src</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">closeModal</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// todo</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="string">'closeModal'</span> == e.data &amp;&amp; closeModal();</div><div class="line">  &#125;,<span class="literal">false</span>);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>iframe中通过postMessage向父窗口发消息<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- iframe.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">  parent.postMessage(<span class="string">'closeModal'</span>, <span class="string">'*'</span>);</div><div class="line">  <span class="comment">/*</span></div><div class="line">    postMessage(data, origin);</div><div class="line">    参数：data    消息内容</div><div class="line">          origin  发送消息窗口的源（协议+主机+端口号）</div><div class="line">  */</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;iframe子窗口调用父级窗口方法分为两种情况，跨越及同域调用&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js在浏览器端对二进制流进行AES加密和解密</title>
    <link href="http://shiwah.me/2015/12/29/20151229_aes/"/>
    <id>http://shiwah.me/2015/12/29/20151229_aes/</id>
    <published>2015-12-29T13:00:00.000Z</published>
    <updated>2017-06-03T16:15:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近有一个项目，需要前端通过websocket与服务端连接，服务端直接向前端发二进制的数据协议包，但是这个协议包的内容是经过AES加密的，需要前端来在直接解密二进制流。</p>
<a id="more"></a>
<h2 id="开始解密"><a href="#开始解密" class="headerlink" title="开始解密"></a>开始解密</h2><p>简单了解一下所用的的AES加密算法，我们用的是AES的CFB加密方式，服务端会提供给我一个key和iv的二进制字节串。密文也是二进制字节串。</p>
<p>我用的加密/解密插件: <a href="http://code.google.com/p/crypto-js" target="_blank" rel="external">crypto-js</a></p>
<p>一般的应用场景下，key和iv以及密文都是字符串，按照网上的教程基本上很快就能搞出来了。<br><strong>这里只简述一下key、iv、密文均为二进制字节串的情况下怎么用crypto-js来解密。</strong></p>
<p>需要引进下面几个js：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"aes.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"mode-cfb.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"pad-nopadding.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib-typedarrays.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"enc-base64.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/lib/enc-u8array.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="comment">&lt;!-- 注意一下这个，并不在插件源文件中 --&gt;</span></div></pre></td></tr></table></figure></p>
<p>注意一下最后一个文件，是我从网上摘录的，在插件源文件中是没有的。内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">CryptoJS.enc.u8array = &#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Converts a word array to a Uint8Array.</div><div class="line">   *</div><div class="line">   * @param &#123;WordArray&#125; wordArray The word array.</div><div class="line">   *</div><div class="line">   * @return &#123;Uint8Array&#125; The Uint8Array.</div><div class="line">   *</div><div class="line">   * @static</div><div class="line">   *</div><div class="line">   * @example</div><div class="line">   *</div><div class="line">   *     var u8arr = CryptoJS.enc.u8array.stringify(wordArray);</div><div class="line">   */</div><div class="line">  stringify: <span class="function"><span class="keyword">function</span> (<span class="params">wordArray</span>) </span>&#123;</div><div class="line">      <span class="comment">// Shortcuts</span></div><div class="line">      <span class="keyword">var</span> words = wordArray.words;</div><div class="line">      <span class="keyword">var</span> sigBytes = wordArray.sigBytes;</div><div class="line">      <span class="comment">// Convert</span></div><div class="line">      <span class="keyword">var</span> u8 = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(sigBytes);</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; sigBytes; i++) &#123;</div><div class="line">          <span class="keyword">var</span> byte = (words[i &gt;&gt;&gt; <span class="number">2</span>] &gt;&gt;&gt; (<span class="number">24</span> - (i % <span class="number">4</span>) * <span class="number">8</span>)) &amp; <span class="number">0xff</span>;</div><div class="line">          u8[i]=byte;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> u8;</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Converts a Uint8Array to a word array.</div><div class="line">   *</div><div class="line">   * @param &#123;string&#125; u8Str The Uint8Array.</div><div class="line">   *</div><div class="line">   * @return &#123;WordArray&#125; The word array.</div><div class="line">   *</div><div class="line">   * @static</div><div class="line">   *</div><div class="line">   * @example</div><div class="line">   *</div><div class="line">   *     var wordArray = CryptoJS.enc.u8array.parse(u8arr);</div><div class="line">   */</div><div class="line">  parse: <span class="function"><span class="keyword">function</span> (<span class="params">u8arr</span>) </span>&#123;</div><div class="line">      <span class="comment">// Shortcut</span></div><div class="line">      <span class="keyword">var</span> len = u8arr.length;</div><div class="line">      <span class="comment">// Convert</span></div><div class="line">      <span class="keyword">var</span> words = [];</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">          words[i &gt;&gt;&gt; <span class="number">2</span>] |= (u8arr[i] &amp; <span class="number">0xff</span>) &lt;&lt; (<span class="number">24</span> - (i % <span class="number">4</span>) * <span class="number">8</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> CryptoJS.lib.WordArray.create(words, len);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>插件本身提供一个key、iv、明文均是WordArray的加密方法，而这个WordArray的数据格式长得非常像uint8数据，而<br>这个组件的组件的功能就是是uint8数组和WordArray之间的互相转换。<br>那么有了它我们就可以进行加解密了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 服务端提供的32位key</span></div><div class="line"><span class="keyword">var</span> akey = [<span class="number">0x26</span>,<span class="number">0xAF</span>,<span class="number">0xE2</span>,<span class="number">0x1A</span>,<span class="number">0x0C</span>,<span class="number">0x16</span>,<span class="number">0x73</span>,<span class="number">0x54</span>,<span class="number">0x13</span>,<span class="number">0xFD</span>,<span class="number">0x68</span>,<span class="number">0xDD</span>,<span class="number">0x8F</span>,<span class="number">0xA0</span>,<span class="number">0xB7</span>,<span class="number">0xC1</span>,<span class="number">0x57</span>,<span class="number">0xA6</span>,<span class="number">0x90</span>,<span class="number">0xFF</span>,<span class="number">0xCD</span>,<span class="number">0xB3</span>,<span class="number">0x54</span>,<span class="number">0x61</span>,<span class="number">0x10</span>,<span class="number">0x07</span>,<span class="number">0xD5</span>,<span class="number">0x7E</span>,<span class="number">0xDB</span>,<span class="number">0x1E</span>,<span class="number">0x4C</span>,<span class="number">0xE9</span>];</div><div class="line"><span class="comment">// 服务端提供的16位iv</span></div><div class="line"><span class="keyword">var</span> aiv = [<span class="number">0x15</span>,<span class="number">0x4C</span>,<span class="number">0xD3</span>,<span class="number">0x55</span>,<span class="number">0xFE</span>,<span class="number">0xA1</span>,<span class="number">0xFF</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x34</span>,<span class="number">0xAB</span>,<span class="number">0x22</span>,<span class="number">0x08</span>,<span class="number">0x4F</span>,<span class="number">0x13</span>,<span class="number">0x07</span>];</div><div class="line"></div><div class="line"><span class="comment">// 将key和iv转换成uint8数组</span></div><div class="line"><span class="keyword">var</span> keyBv = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(akey);</div><div class="line"><span class="keyword">var</span> ivBv = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(aiv);</div><div class="line"></div><div class="line"><span class="comment">// 将key和iv转换成WordArray</span></div><div class="line">keyWA = CryptoJS.enc.u8array.parse(keyBv);</div><div class="line">ivWA = CryptoJS.enc.u8array.parse(ivBv);</div><div class="line"></div><div class="line"><span class="comment">// 解密方法 传入密文的uint8数组</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">decryptU8arry</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> acontent = array;</div><div class="line">  <span class="comment">// 将密文转换成WordArray</span></div><div class="line">  contentWA = CryptoJS.enc.u8array.parse(acontent);</div><div class="line">  <span class="comment">// 插件要求密文是base64格式</span></div><div class="line">  <span class="keyword">var</span> dcBase64String = contentWA.toString(CryptoJS.enc.Base64);</div><div class="line">  <span class="comment">// 解密 选定mode是CFB类型，无偏移量</span></div><div class="line">  <span class="keyword">var</span> decrypted = CryptoJS.AES.decrypt(dcBase64String, keyWA, &#123; <span class="attr">iv</span>: ivWA,<span class="attr">mode</span>:CryptoJS.mode.CFB,<span class="attr">padding</span>:CryptoJS.pad.NoPadding&#125;);</div><div class="line">  <span class="comment">// 将解密后的明文转回uint8数组</span></div><div class="line">  <span class="keyword">var</span> bv = CryptoJS.enc.u8array.stringify(decrypted);</div><div class="line">  <span class="keyword">return</span> bv;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 加密方法 传入明文的uint8数组</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">encryptU8arry</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> acontent = array;</div><div class="line">  <span class="comment">// 将明文转换成WordArray</span></div><div class="line">  contentWA = CryptoJS.enc.u8array.parse(acontent);</div><div class="line">  <span class="comment">// 插件要求明文是base64格式</span></div><div class="line">  <span class="keyword">var</span> dcBase64String = contentWA.toString(CryptoJS.enc.Base64);</div><div class="line">  <span class="comment">// 加密 选定mode是CFB类型，无偏移量</span></div><div class="line">  <span class="keyword">var</span> encrypted = CryptoJS.AES.encrypt(contentWA, keyWA, &#123; <span class="attr">iv</span>: ivWA,<span class="attr">mode</span>:CryptoJS.mode.CFB,<span class="attr">padding</span>:CryptoJS.pad.NoPadding&#125;);</div><div class="line">  <span class="comment">// 将密文转回uint8数组</span></div><div class="line">  <span class="keyword">var</span> bv = CryptoJS.enc.u8array.stringify(encrypted.ciphertext);</div><div class="line">  <span class="keyword">return</span> bv;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由此可以对二进制流进行加密解密了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> aData = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"><span class="keyword">var</span> dv = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(aData);</div><div class="line"><span class="keyword">var</span> enu8 = encryptU8arry(dv); <span class="comment">// 加密后的二进制流</span></div><div class="line"><span class="built_in">console</span>.log(enu8);</div><div class="line"><span class="keyword">var</span> deu8 = decryptU8arry(enu8); <span class="comment">// 解密后的二进制流</span></div><div class="line"><span class="built_in">console</span>.log(deu8);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近有一个项目，需要前端通过websocket与服务端连接，服务端直接向前端发二进制的数据协议包，但是这个协议包的内容是经过AES加密的，需要前端来在直接解密二进制流。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TypeArray、ArrayBuffer、Blob的相互转换</title>
    <link href="http://shiwah.me/2015/12/29/20151229_arrayBuffer/"/>
    <id>http://shiwah.me/2015/12/29/20151229_arrayBuffer/</id>
    <published>2015-12-29T12:00:00.000Z</published>
    <updated>2017-06-03T16:42:07.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<ul>
<li><code>Blob</code>是现代浏览器中提供的能够装载二进制流（文件）的容器对象。</li>
<li><code>ArrayBuffer</code>是能够装载<code>Blob</code>（二进制流）数据的原始缓冲区，<code>ArrayBuffer</code>不能直接通过js读写。</li>
<li><code>TypeArray</code>是<code>ArrayBuffer</code>的一种类数组的视图对象，可以将<code>ArrayBuffer</code>按不同字节数读取成类似数组形式的数据类型，从而可以向读写数组元素一样，实现对<code>ArrayBuffer</code>数据的读写。常见的<code>TypeArray</code>包括<code>Uint8Array</code>,<code>Uint16Array</code>,<code>Uint32Array</code>等。<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="external">点这里查看所有的TypedArray</a></li>
</ul>
<p>所以我对三者的理解是： <code>Blob</code> &lt;-&gt; <code>ArrayBuffer</code> &lt;-&gt; <code>TypeArray</code> &lt;—-&gt; <code>Array</code><br>由于<code>TypeArray</code>和<code>Array</code>有些相似，因此往往我会选择在<code>TypeArray</code>这层做处理。<br>下面是<code>TypeArray</code>、<code>ArrayBuffer</code>和<code>Blob</code>之间相互转换的方法。</p>
<h2 id="websocket接收arrayBuffer"><a href="#websocket接收arrayBuffer" class="headerlink" title="websocket接收arrayBuffer"></a>websocket接收arrayBuffer</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* websocket的情况下二进制流的获取 */</span></div><div class="line"><span class="keyword">var</span> svip = <span class="string">'ws://127.0.0.1:8080'</span>;</div><div class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(svip);</div><div class="line">ws.binaryType = <span class="string">'arraybuffer'</span></div><div class="line">ws.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> message = e.data;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="blob轉arrayBuffer"><a href="#blob轉arrayBuffer" class="headerlink" title="blob轉arrayBuffer"></a>blob轉arrayBuffer</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bl = <span class="keyword">new</span> Blob(); <span class="comment">// bl是要转换的blob</span></div><div class="line"><span class="keyword">var</span> fr = <span class="keyword">new</span> FileReader();</div><div class="line">fr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> ab = <span class="keyword">this</span>.result; <span class="comment">// ab是转换后的结果</span></div><div class="line">&#125;</div><div class="line">fr.readAsArrayBuffer(bl);</div></pre></td></tr></table></figure>
<h2 id="ArrayBuffer-to-Blob-（ArrayBuffer转Blob）"><a href="#ArrayBuffer-to-Blob-（ArrayBuffer转Blob）" class="headerlink" title="ArrayBuffer to Blob （ArrayBuffer转Blob）"></a>ArrayBuffer to Blob （ArrayBuffer转Blob）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">32</span>);</div><div class="line"><span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([ab]); <span class="comment">// 注意必须包裹[]</span></div></pre></td></tr></table></figure>
<h2 id="ArrayBuffer-to-Uint8-（ArrayBuffer转Uint8数组）"><a href="#ArrayBuffer-to-Uint8-（ArrayBuffer转Uint8数组）" class="headerlink" title="ArrayBuffer to Uint8 （ArrayBuffer转Uint8数组）"></a>ArrayBuffer to Uint8 （ArrayBuffer转Uint8数组）</h2><p>Uint8数组可以直观的看到ArrayBuffer中每个字节（1字节 == 8位）的值。一般我们要将ArrayBuffer转成Uint类型数组后才能对其中的字节进行存取操作。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ab = arrayBuffer; <span class="comment">// arrayBuffer为要转换的值</span></div><div class="line"><span class="keyword">var</span> u8 = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(ab);</div></pre></td></tr></table></figure>
<h2 id="Uint8-to-ArrayBuffer（Uint数组转ArrayBuffer）"><a href="#Uint8-to-ArrayBuffer（Uint数组转ArrayBuffer）" class="headerlink" title="Uint8 to ArrayBuffer（Uint数组转ArrayBuffer）"></a>Uint8 to ArrayBuffer（Uint数组转ArrayBuffer）</h2><p>我们Uint8数组可以直观的看到ArrayBuffer中每个字节（1字节 == 8位）的值。一般我们要将ArrayBuffer转成Uint类型数组后才能对其中的字节进行存取操作。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> u8 = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>();</div><div class="line"><span class="keyword">var</span> ab = u8.buffer; <span class="comment">// ab即是u8对应的arrayBuffer</span></div></pre></td></tr></table></figure>
<h2 id="Array-to-ArrayBuffer（普通数组转ArrayBuffer）"><a href="#Array-to-ArrayBuffer（普通数组转ArrayBuffer）" class="headerlink" title="Array to ArrayBuffer（普通数组转ArrayBuffer）"></a>Array to ArrayBuffer（普通数组转ArrayBuffer）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">0x15</span>,<span class="number">0xFF</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x34</span>,<span class="number">0xAB</span>,<span class="number">0x11</span>];</div><div class="line"><span class="keyword">var</span> u8 = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(arr);</div><div class="line"><span class="keyword">var</span> ab = u8.buffer;</div><div class="line"><span class="built_in">console</span>.log(ab); <span class="comment">// ab为要解析的ArrayBuffer</span></div></pre></td></tr></table></figure>
<h2 id="获取-设置ArrayBuffer对应的数值"><a href="#获取-设置ArrayBuffer对应的数值" class="headerlink" title="获取/设置ArrayBuffer对应的数值"></a>获取/设置ArrayBuffer对应的数值</h2><p>一串ArrayBuffer是可以被“理解”为很多个值的，以下面这个值为例，</p>
<p>按照服务端的协议，这串数据流的格式如下：<br>1 unsign byte (1字节) + 1 unsign int (4字节) + 1 unsign short (2字节)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x03</span>];</div><div class="line"><span class="keyword">var</span> u8 = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(arr);</div><div class="line"><span class="keyword">var</span> ab = u8.buffer;</div><div class="line"><span class="built_in">console</span>.log(ab); <span class="comment">// ab为要解析的ArrayBuffer</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> u8 = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(ab, <span class="number">0</span>, <span class="number">1</span>); <span class="comment">// (arraybuffer, 字节解析的起点, 解析的长度)</span></div><div class="line"><span class="keyword">var</span> val_byte = u8[<span class="number">0</span>];</div><div class="line"><span class="built_in">console</span>.log(val_byte);</div><div class="line"></div><div class="line"><span class="comment">// 解析unsign int</span></div><div class="line"><span class="comment">// 由于Uint32Array的解析起点必须是4的整数倍，而在流中该数据的起点是1，所以选择先“裁剪”(slice)出要解析的流片段，再用Uint32去解析该片段</span></div><div class="line"><span class="keyword">var</span> u32buff = ab.slice(<span class="number">1</span>, <span class="number">5</span>);</div><div class="line"><span class="keyword">var</span> u32 = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(u32buff);</div><div class="line"><span class="keyword">var</span> val_uint = u32[<span class="number">0</span>];</div><div class="line"><span class="built_in">console</span>.log(val_uint);</div><div class="line"></div><div class="line"><span class="comment">// 解析unsign short</span></div><div class="line"><span class="keyword">var</span> u16buff = ab.slice(<span class="number">5</span>, <span class="number">7</span>);</div><div class="line"><span class="keyword">var</span> u16 = <span class="keyword">new</span> <span class="built_in">Uint16Array</span>(u16buff);</div><div class="line"><span class="keyword">var</span> val_short = u16[<span class="number">0</span>];</div><div class="line"><span class="built_in">console</span>.log(val_short);</div></pre></td></tr></table></figure>
<h2 id="TypeArray-to-Array"><a href="#TypeArray-to-Array" class="headerlink" title="TypeArray to Array"></a>TypeArray to Array</h2><p>在上文中可以看到，普通数组可以轻松的转换成TypeArray。<br>但TypeArray并不是Array的子集，所以它没有Array的许多方法，比如<code>push</code><br>TypeArray的方法参见：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="external">TypedArray的方法</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x03</span>];</div><div class="line"><span class="keyword">var</span> u8 = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(arr);</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> u8.push);</div></pre></td></tr></table></figure>
<p>所以需要进行转换。<br>TypeArray to Array的方法,在ES6中可以用Array.form实现 （<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="external">什么是Array.form</a>）</p>
<p>也可以比较简单的封装一下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Uint8Array2Array</span>(<span class="params">u8a</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> arr = [];</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; u8a.length; i++) &#123;</div><div class="line">		arr.push(u8a[i]);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Blob&lt;/code&gt;是现代浏览器中提供的能够装载二进制流（文件）的容器对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;是能够装载&lt;code&gt;Blob&lt;/code&gt;（二进制流）数据的原始缓
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于rem自适应布局方案的思考</title>
    <link href="http://shiwah.me/2015/12/20/20151220_rem/"/>
    <id>http://shiwah.me/2015/12/20/20151220_rem/</id>
    <published>2015-12-19T16:00:00.000Z</published>
    <updated>2015-12-21T14:35:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近大半年都在做cocos2d-js方面的项目，所以越来越少接触HTML的业务了，但最近机缘巧合要做一个关于rem分享，之前自己也看网上的一些方法，做了一些rem自适应的case。<br>这次又去对比了一下其它人（厂）的用法，对rem有了新的理解。</p>
<a id="more"></a>
<h2 id="为什么是rem"><a href="#为什么是rem" class="headerlink" title="为什么是rem"></a>为什么是rem</h2><p>首先，由于目前大部分团队的设计都只出一种分辨率的设计稿（一般是完美匹配iphone6分辨率），那么一般对于屏幕自适应的思路就是，根据设备屏幕实际的分辨率和设计稿的分辨率进行比较，对页面元素进等比缩放。</p>
<p>最早我们使用的是<code>绝对定位 + 百分比大小</code>的方案，但是这个方案有个明显的软肋是元素的高度不能很好的按百分比进行设置。<br>所以早期的自适应都只是对宽度进行自适应，而元素的高度往往是固定的。或者通过媒体查询进行针对性的适配。</p>
<p>但是随着iphone6的普及，随之而来的是设计稿尺寸的扩大。另外单页应用也越来越火（如各种招聘页面），同时手机设备也越来越多。人们需要寻找一种更好的方案。</p>
<p>我相信rem应该不是为了自适应而生的。rem最初应该只是一个类似于em一样表示相对于根元素字体大小的尺寸单位，即1rem = 1倍html根元素的字体大小，似乎只是为了解决em这个单位只能继承父元素的字体大小的问题。但是它具有下面两个非常重要的特性。</p>
<ul>
<li>与em的其它单位属性不同的是，rem的参照物只有根元素（html）一个。</li>
<li>另外，当根元素的字体大小发生变化时，浏览器会自动将所有元素进行重绘。</li>
</ul>
<p>有机智的人看中了它这种一对多的特性，即只要修改根元素（html标签）的字体大小，页面中所有元素的以rem为单位的css属性都会进行影响。而不需要多余js再去做元素扫描和属性筛选。</p>
<p>这种『一处修改，多处受用』的特点，赋予了原本静态的css样式动态变化的能力，仿佛赋予了css一个全局变量。<br>それでは，我们可以通过修改这个变量的值来一次性调整多个甚至全部元素的属性。</p>
<p><strong>另外，通过rem，我们还可以按高度进行等比例缩放，解决了业界一大痛点</strong></p>
<h2 id="rem的用法"><a href="#rem的用法" class="headerlink" title="rem的用法"></a>rem的用法</h2><p>正所谓『条条大路通罗马』，关于rem的用法的确很多。我总结了一下网上的一些教程、手机淘宝以及其它几个团队的方案，区别主要在下面两个地方：</p>
<ul>
<li>1、在工作流程上有所区别。</li>
<li>2、在根元素字体大小设定上有区别。</li>
</ul>
<h4 id="工作流上的区别"><a href="#工作流上的区别" class="headerlink" title="工作流上的区别"></a>工作流上的区别</h4><p>在手淘等自动化工具的使用率比较高团队中，前端人员在编写css样式时，是先「以px为单位」完成布局，再由自动化工具自动将这份px作单位的css样式转化成以rem作单位的css文件。</p>
<p>而比如我所在的团队，自动化工具的使用频率很低，因此更倾向于在编写css样式时，直接使用rem赋值。</p>
<p>这也就决定了在rem值的设定上会有一些区别。</p>
<h4 id="rem数值的设定"><a href="#rem数值的设定" class="headerlink" title="rem数值的设定"></a>rem数值的设定</h4><h5 id="手机淘宝的数值设定"><a href="#手机淘宝的数值设定" class="headerlink" title="手机淘宝的数值设定"></a>手机淘宝的数值设定</h5><p>手机淘宝的思路是 将设计稿的宽度认定为10rem。那么在750px的设计稿上来说，假如元素的设计宽度的150px,即屏幕宽度的10分之2，所以它的宽度是2rem。</p>
<h4 id="手动计算的rem数值设定"><a href="#手动计算的rem数值设定" class="headerlink" title="手动计算的rem数值设定"></a>手动计算的rem数值设定</h4><p>正如前文所说，对于没有自动化工具而需要手写css的我们来说，我们需要自行计算每个属性的rem的值。</p>
<p>以一个实际例子为例，一般现在主流的设计稿尺寸是750px宽，当我们要布局一个350px X 200px的元素时：</p>
<p>网上有一些教程会让大家将html的font-size设置为10px,那么该元素的样式就是<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span> &#123;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">10px</span>; </div><div class="line">&#125;</div><div class="line"><span class="selector-class">.ele</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">35rem</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">20rem</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>但是这个方案针对很坑爹啊！！！</strong><br>因为在<code>webkit</code>浏览器中，font-size的最小值是12px啊，因此rem的值就不准了！</p>
<p>所以有的人提出了改进的方案，将font-size设置为20px，上述最小字体的问题就得意解决了：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span> &#123;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">20px</span>; </div><div class="line">&#125;</div><div class="line"><span class="selector-class">.ele</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">17.5rem</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">10rem</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但美中不足的是，当布局时，我们还需要去一下 350 / 20 = 17.5，半年下来心算能力肯定要爆表了！</p>
<p>所以，我们寻求一个更好的数值，不仅没有最小字体的问题，还能更好的计算，那就是100px了。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span> &#123;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">100px</span>; </div><div class="line">&#125;</div><div class="line"><span class="selector-class">.ele</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">3.5rem</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">2rem</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="两者异同"><a href="#两者异同" class="headerlink" title="两者异同"></a>两者异同</h4><p>上面两种方法大同小异，区别主要在于参照物，淘宝的方案对比的是设计稿的宽度，而第二个方法则对比的是一个确切的px值。<br><strong>但从根本上说，两种方法实际上是通过比例的换算，对设计稿进行建模，由此得出的页面实际上是一个比例模型，而rem就变成了调整页面缩放比的入口。</strong>比如当我们设置根元素的字体大小放大一倍时，我们得到的就是放大一倍后的界面。同理当根元素字体缩小一倍，那得到的就是缩小一倍的界面。</p>
<p>那么，实际上，我们要做的就是：根据设备的实际屏幕宽度，调整html字体大小，让界面等比缩放到合适的尺寸。<br>怎么做呢？</p>
<h2 id="动态调整html字体大小"><a href="#动态调整html字体大小" class="headerlink" title="动态调整html字体大小"></a>动态调整html字体大小</h2><h4 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h4><p>一般的项目没有页面高度的限制时，我们可以直接通过媒体查询对常见的设备直接进行适配。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 默认是iphone6 */</span></div><div class="line"><span class="selector-tag">html</span>&#123; <span class="attribute">font-size</span>: <span class="number">50px</span>; &#125;</div><div class="line">@<span class="keyword">media</span> screen and (max-width:<span class="number">359px</span>) and (orientation:portrait) &#123;</div><div class="line">    <span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">46.667px</span>; &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 常见的安卓机 */</span></div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">360px</span>) and (max-width:<span class="number">374px</span>) and (orientation:portrait) &#123;</div><div class="line">    <span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">48px</span>; &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 某些冷门的安卓机 如nexus4 */</span></div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">384px</span>) and (max-width:<span class="number">399px</span>) and (orientation:portrait) &#123;</div><div class="line">    <span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">51.333px</span>; &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 某些冷门的安卓机 如nexus6 */</span></div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">400px</span>) and (max-width:<span class="number">413px</span>) and (orientation:portrait) &#123;</div><div class="line">    <span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">53.333px</span>; &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* iphone6 plus */</span></div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">414px</span>) and (max-width:<span class="number">431px</span>) and (orientation:portrait)&#123;</div><div class="line">    <span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">55.2px</span>; &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 以下是其它设备 */</span></div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">432px</span>) and (max-width:<span class="number">479px</span>) and (orientation:portrait)&#123;</div><div class="line">    <span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">57.6px</span>; &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">480px</span>)and (max-width:<span class="number">639px</span>) and (orientation:portrait)&#123;</div><div class="line">   <span class="selector-tag">html</span>&#123; <span class="attribute">font-size</span>: <span class="number">64px</span>;&#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">640px</span>) and (orientation:portrait)&#123;</div><div class="line">   <span class="selector-tag">html</span>&#123; <span class="attribute">font-size</span>: <span class="number">85.333px</span>;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="通过js动态调整"><a href="#通过js动态调整" class="headerlink" title="通过js动态调整"></a>通过js动态调整</h4><p>通过媒体查询只是能大致的对屏幕进行适配，但不能做到十分精准的适配。<br>另外，当我们在做一些单页应用时，需要把所有内容都装在一屏范围内，这就不可避免的考虑一些屏幕比较短的手机的情况了。</p>
<p>比如目前设计稿基本都是针对iphone6的尺寸进行设计（375*667）。那么如果按照宽度等比缩放时，iphone4s/4这种最高只有480px的短屏是装不完的。</p>
<p>それでは，这种情况下我们要根据屏幕高度进行缩放。</p>
<p>通过js实现如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在设计稿中通常我们会去掉微信浏览器头部的128px，所以设计稿页面高度认为是1206px</span></div><div class="line"><span class="keyword">var</span> px = $(<span class="built_in">window</span>).height() / $(<span class="built_in">window</span>).width() &lt; <span class="number">1.5</span> ? ($(<span class="built_in">window</span>).width() / <span class="number">750</span> * <span class="number">100</span> + <span class="string">'px'</span>) : $(<span class="built_in">window</span>).height() / <span class="number">1206</span> * <span class="number">100</span> + <span class="string">'px'</span>);</div><div class="line">$(<span class="string">'html'</span>).css(<span class="string">'font-size'</span>, px);</div></pre></td></tr></table></figure>
<p>这里不得不提一下<code>viewport</code>，通常情况下，我们把viewport的scale=1就可以应对绝大多数的页面了。<br>但是可能有一些同学也知道，<strong>在scale=1的情况下，ios这种视网膜屏幕（通常所说的1倍屏、2倍屏）是显示不了1px的细线的。</strong><br>首先在产品设计层面，如果可以避免这些细线的出现，那就可以少掉一些工作。<br>解决1px细线的办法其实不少。<br>这里我们可以参照淘宝的做法，当设备是ios设备时，根据屏幕的像素比，动态设置viewport<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ua = navigator.userAgent.toLowerCase();</div><div class="line"><span class="keyword">if</span> (<span class="regexp">/iphone|ipad|ipod/</span>.test(ua)) &#123;</div><div class="line">  <span class="keyword">var</span> sc = <span class="number">1</span> / <span class="built_in">window</span>.devicePixelRatio;</div><div class="line">  $(<span class="string">'meta[name="viewport"]'</span>).attr(<span class="string">'content'</span>, <span class="string">'initial-scale='</span>+ sc +<span class="string">', maximum-scale='</span>+ sc +<span class="string">', minimum-scale='</span>+ sc +<span class="string">', user-scalable=no'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>需要注意的是，<code>viewport</code>必须在<code>font-size</code>之前设置，否则在获取屏幕宽度时候取到的值不准确。</strong></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，rem的自适应方案的思路就是利用了rem这个相对尺寸的特性，将设计稿转化成为一个比例模型，然后再根据设备的屏幕尺寸，通过调整rem的实际大小（即根元素的字体大小），将这一比例模型缩放到合适的大小，进而实现屏幕自适应。</p>
<p>只是这个比例模型的参照系可能不一样（如有的以100px作为参照，而有的以屏幕宽度作为参照），另外，如何计算出这个比例模型的方式可能不一样（如有的团队使用自动化工具，而有的团队通过人工计算）。<br>那这些问题是留给每个团队自己去思考的了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近大半年都在做cocos2d-js方面的项目，所以越来越少接触HTML的业务了，但最近机缘巧合要做一个关于rem分享，之前自己也看网上的一些方法，做了一些rem自适应的case。&lt;br&gt;这次又去对比了一下其它人（厂）的用法，对rem有了新的理解。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>用cocos2d-js-lite快速开发H5游戏</title>
    <link href="http://shiwah.me/2015/12/01/20151220_cocos2dGame/"/>
    <id>http://shiwah.me/2015/12/01/20151220_cocos2dGame/</id>
    <published>2015-11-30T16:00:00.000Z</published>
    <updated>2015-12-20T14:31:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>cocos2d-js-lite是一个cocos2d的轻量化精简版本，只保留了cocos2d-js的一些核心方法。<br>它所包含的特性列表如下：</p>
<pre><code>+ Canvas渲染器 (不支持WebGL)
+ 场景和图层
+ 事件管理器
+ 计时器
+ 精灵和贴图
+ TTF文本
+ 声音
+ 动作
+ 菜单和菜单项
</code></pre><p>与cocos2d-js完整版一个最大的不同就是，lite版把引擎的所有模块都放到一个文件里，，开发者只需像引入一个jQuery库一样引入一个文件即可。<strong>另外，lite是基于纯原生js编写，所以无须像<code>白鹭引擎</code>（基于Typescript）要先经过编译才能在浏览器中打开，因此在开发体验上感觉与传统前端开发更为接近。</strong></p>
<a id="more"></a>
<p>从lite版包含的特性来看，它更适合开发轻度的H5游戏。</p>
<h2 id="为何要用cocos2d-js-lite"><a href="#为何要用cocos2d-js-lite" class="headerlink" title="为何要用cocos2d-js-lite"></a>为何要用cocos2d-js-lite</h2><p>在不使用游戏引擎的前提下，也可以用纯原生js + canvas + div + css制作出一款H5游戏。<br>所以所以要明白用这个游戏引擎能给我们带来什么好处。由此来决定我们需不需要它。</p>
<p>cocos下面几个特性可以提升游戏的开发进度和质量。</p>
<blockquote>
<ol>
<li>提供了资源预加载的方法，可以加载多种资源</li>
<li>可以非常简单的制作各种位移、拉伸、旋转等动画</li>
<li>提供了事件的监听和管理</li>
<li>提供了强大无脑的屏幕自适应方案</li>
<li>提供了高性能的声音及音效的播放功能</li>
<li>引擎仅300kb，对于H5应用可以接受</li>
</ol>
</blockquote>
<h2 id="cocos2d的世界中的元素"><a href="#cocos2d的世界中的元素" class="headerlink" title="cocos2d的世界中的元素"></a>cocos2d的世界中的元素</h2><p><strong>好戏开场了</strong></p>
<p>在制作游戏时，我们主要会用到下面四层元素：</p>
<blockquote>
<p>view：可以看作是一个视窗，即游戏内容的载体（可以比作舞台）。<br>Scene：舞台中一级容器就是场景。<br>Layer：场景中又可以分成很多『层』。<br>Sprite：每一个层中又可以包含很多个小的元素(如舞台上的角色）。</p>
</blockquote>
<p>跟HTML中的div盒模型做类比，以上元素的对应关系大致如下：</p>
<blockquote>
<p>view —— document、window<br>Scene —— html<br>Layer —— body<br>Sprite —— div、p等</p>
</blockquote>
<h2 id="引擎的游戏入口"><a href="#引擎的游戏入口" class="headerlink" title="引擎的游戏入口"></a>引擎的游戏入口</h2><h2 id="1-如何启动引擎"><a href="#1-如何启动引擎" class="headerlink" title="1.如何启动引擎"></a>1.如何启动引擎</h2><p>lite版本中启动引擎的方法非常简单，只需像引入jquery一样在html中引入’cocos2d-js-v3.7-lite.js’文件即可。<br>然后在在body中加入一个canvas元素，然后在游戏配置文件（即根目录下的project.json）的<code>id</code>字段中填入该canvas的id即可。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"cocos2d-js-v3.7-lite.js"</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"gameCanvas"</span> <span class="attr">width</span>=<span class="string">"750"</span> <span class="attr">height</span>=<span class="string">"1334"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="2-如何开启游戏"><a href="#2-如何开启游戏" class="headerlink" title="2.如何开启游戏"></a>2.如何开启游戏</h2><p>首先看看游戏配置文件（即根目录下的project.json）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"debugMode"</span>     : <span class="number">1</span>,</div><div class="line">    <span class="string">"frameRate"</span>     : <span class="number">60</span>,</div><div class="line">    <span class="string">"id"</span>            : <span class="string">"gameCanvas"</span>,</div><div class="line">    <span class="string">"renderMode"</span>    : <span class="number">1</span>,</div><div class="line">    <span class="string">"showFPS"</span>       : <span class="literal">true</span>,</div><div class="line">    <span class="string">"jsList"</span>        : [</div><div class="line">      <span class="string">"j/GameScene.js"</span></div><div class="line">    , <span class="string">"j/StartScene.js"</span></div><div class="line">    , <span class="string">"j/GameControler.js"</span></div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以在该文件中设置调试模式、帧数、渲染模式、是否显示FPS信息等等。</p>
<p>可以看demo中的index.html,当游戏引擎文件加载完毕时，会触发window.onload事件，然后我们就可以通过run方法来启动游戏了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">cc.game.run();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当游戏开始run后，它首先根游戏的配置文件进行初始化设置调试魔术、帧数、渲染模式等，然后加载配置文件的「jsList」中的js文件。一般这些js文件就是游戏的各个模块。<br>当这些js文件都加载完毕后，就会触发一个cc.game.onStart事件，这时候游戏就算启动完毕了。<br>当然，当游戏onStart完毕后，引擎只是提供了一块随时待命的舞台（即canvas），我们还需要自己去做一些适配、资源加载等准备工作，最后再进入游戏的初始场景。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">cc.game.onStart = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">// 检测浏览器环境，如果是ios下则启动retina模式，有助于增强引擎渲染效果（可选项）</span></div><div class="line">  <span class="keyword">if</span> (cc.sys.IOS || cc.sys.OS_OSX) &#123;</div><div class="line">    cc.view.enableRetina(<span class="literal">true</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 设置游戏的预设大小（即设计稿大小）和适配方案</span></div><div class="line">  cc.view.setDesignResolutionSize(<span class="number">750</span>, <span class="number">1334</span>, cc.ResolutionPolicy.EXACT_FIT);</div><div class="line">  <span class="comment">// 让游戏随着浏览器屏幕大小伸缩变化</span></div><div class="line">  cc.view.resizeWithBrowserSize(<span class="literal">true</span>);</div><div class="line">  <span class="comment">//加载静态资源，包括图片、声音、字体等资源，res_list是一个包含资源路径的数组</span></div><div class="line">  cc.LoaderScene.preload(res_list, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </div><div class="line">      cc.director.runScene(<span class="keyword">new</span> GameScene());</div><div class="line">  &#125;, <span class="keyword">this</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="自适应方案"><a href="#自适应方案" class="headerlink" title="自适应方案"></a>自适应方案</h2><p>引擎提供了屏幕的五种适配方案，我们只需要设置好游戏预设的大小（即设计稿的大小）以及<a href="http://http://www.cocos2d-x.org/docs/manual/framework/html5/v2/resolution-policy-design/zh" target="_blank" rel="external">适配的方案</a>, 引擎就会自动完成游戏适配工作。<br>与此同时，我们在游戏中对元素的布局可以完全根据设计稿来1：1的制作，而再也不用自己费心去做适配的计算和处理啦！<br>比如这个游戏的设计稿是iphone6的屏幕大小，然后我选用的适配方案是全拉伸到覆盖屏幕的全部区域。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cc.view.setDesignResolutionSize(<span class="number">750</span>, <span class="number">1334</span>, cc.ResolutionPolicy.EXACT_FIT);</div></pre></td></tr></table></figure></p>
<h2 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h2><p>引擎自带了一个预加载模块（页面），只需要调用cc.LoaderScene.preload即可。</p>
<p>但是这个preload的界面默认会有cocos2d的logo呀，这样似乎不太好看呀。<br>这时候我们可以打开引擎的源文件，然后搜索<code>_loaderImage</code>，把这个图片（base64格式）替换成自己的图片。<br>同理，还可以将preload加载时显示的文字和其它属性进行修改。这里不多做扩展。</p>
<p><strong>当然也可以通过cc.Loader.load方法完全自定义一个加载模块</strong></p>
<p>当资源加载完毕后，我们可以调用cc.director.runScene()进入某以个场景，如上面代码中的GameScene。</p>
<h2 id="游戏场景-Scene"><a href="#游戏场景-Scene" class="headerlink" title="游戏场景 Scene"></a>游戏场景 Scene</h2><p>在开启一个场景(Scene)前,我们要先定义它，首先用cc.Scene.extend方法返回一个Scene对象，<br>这里的entend类似java等oop语言中的<code>继承</code>的概念……<br>简单的说就是通过这个方法，新生成的这个类就具备了跟<code>原始类</code>（cc.Scene）的属性和方法。同时我们可以对原始类中定义书属性和方法进行<code>重写</code>。<br>比如下面的代码中，我们对onEnter方法进行了重写。<br>onEnter是Scene的入口方法，当我们new一个Scene时会首先进入这个方法（类似Java中的Main）。通常我习惯在这个时候对将Layer元素插入到Scene中。</p>
<p>但要注意这里不能省去调用this._super()方法，这个方法的含义是去继承父类的<code>构造函数</code>（即cc.Scene的构造函数），将GameScene类<code>实例化</code>，当我们把类实例化之后，才能愉快的调用（访问）它的各个方法和变量。</p>
<p>简单的说，在进入场景时，我们要先初始化场景，调用this._super(),然后再进行其它操作。 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> GameScene = cc.Scene.extend(&#123;</div><div class="line">  <span class="attr">onEnter</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>._super();</div><div class="line">&#125;）</div></pre></td></tr></table></figure>
<h2 id="场景分层-Layer"><a href="#场景分层-Layer" class="headerlink" title="场景分层 Layer"></a>场景分层 Layer</h2><p>Scene的下一层容器即为Layer，当然，Scene也可以直接插入Sprite元素。<br><strong>实际上cocos2d中这些元素都只是一个虚构的概念，从属关系并没有这么严格，除了scene必须作为第一层容器之外，sprite<br>、layer等层级都没有严格的规定，</strong></p>
<p>比如sprite可以直接插入到一个Scene中，而Sprite也可以插入到另一个Sprite中。</p>
<p>Layer和Sprite也有一定的区别：</p>
<blockquote>
<ol>
<li>Layer容器默认大小是全屏（即一个全空的Layer默认和屏幕一样大），而Sprite默认大小为0x0。</li>
<li>Layer容器的的锚点默认在容器的左下角，而Sprite的锚点则在的中点（水平和垂直的中点）</li>
</ol>
</blockquote>
<p>这里讲到一个<code>锚点</code>的概念，实际上就是元素布局对齐时的基准点。<br>说到基准点，首先回到HTML和CSS的世界的定位系统，当我们用 <code>绝对定位 + left + top</code> 的组合对div进行定位时，div的锚点（基准点）就是div的左上角啦，而整个世界的定位的坐标系的出发点就是视窗的左上角，这时候我们所定义的left和top值就是div的左上角相对于视窗左上角的距离了。所以按前端习惯的工作流，我们在切设计稿时所测量的距离一般都是元素跟设计稿左上角的距离。</p>
<p>那么回到cocos的世界，不得不说，cocos的定位系统就是很反前端的，首先这个世界的坐标系默认出发点是左下角，也就是说，当我们要对元素进行布局时，默认的参考点就变成设计稿的左下角了。其次，更坑爹的是，当元素是Sprite时，你要量的距离不是设计稿左下角到元素左下角的距离，而是到元素中点的距离。<br>由于这个锚点会影响到元素的运动和裁切等功能，所以这个设定可能会让习惯了HTML世界开发的前端感到难以接受……</p>
<p>纯天然的Layer默认是透明的，当我们想创建一个带颜色的Layer时，可以继承一个Layer的派生类LayerColor，这样就可以生生成一个带背景色的Layer了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bg = <span class="keyword">new</span> cc.LayerColor(cc.color(<span class="number">42</span>, <span class="number">89</span>, <span class="number">132</span>));</div><div class="line">bg.setContentSize(<span class="number">100</span>,<span class="number">200</span>);</div><div class="line">bg.setPosition(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line"><span class="keyword">this</span>.addChild(bg);</div></pre></td></tr></table></figure></p>
<p>另外提一下cc.color这个方法，它可以返回一个cocos中默认的颜色数据，所以你用RGB的值（<code>cc.color(R, G, B)</code>）或者十六进制的形式（<code>cc.color(#000000)</code>）都可以生成颜色，非常方便。<br>此外cocos还提供了类似的一些方法，都会返回cocos默认的数据格式，比如：</p>
<pre><code>1. cc.p() 返回元素定位数据
2. cc.size() 返回元素大小数据
3. cc.rect() 返回要一个矩形选区的数据（类似ps中的选区概念）
</code></pre><h2 id="精灵元素-Sprite"><a href="#精灵元素-Sprite" class="headerlink" title="精灵元素 Sprite"></a>精灵元素 Sprite</h2><p>精灵就是游戏中最基本的元素了，常用的精灵包括Sprite（显示图片）、LabelTTF（显示图片）、和MenuItemSprite（显示按钮）。</p>
<h3 id="生成Sprite"><a href="#生成Sprite" class="headerlink" title="生成Sprite"></a>生成Sprite</h3><p>Sprite生成的方法跟Layer类似，我们在create方法中传入图片的路径，即可得到该图片相对应的Sprite。<br>注意到create方法中的第二个参数rect，可以有cc.rect(x, y, width,height)获得，rect是一个矩形选区的概念，如果传入该值，那么引擎就会从传入的图片中截取选中区域的图片。<br>因此，雪碧图在游戏开发时非常好用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.hand = cc.Sprite.create(oRes[<span class="string">'hand'</span>][<span class="string">'src'</span>], rect);</div><div class="line"><span class="keyword">this</span>.hand.setPosition(size.width / <span class="number">2</span> + <span class="number">100</span>, oRes[<span class="string">'hand'</span>][<span class="string">'height'</span>] / <span class="number">2</span>);</div><div class="line"><span class="keyword">this</span>.addChild(<span class="keyword">this</span>.hand);</div></pre></td></tr></table></figure></p>
<h3 id="生成LabelTTF"><a href="#生成LabelTTF" class="headerlink" title="生成LabelTTF"></a>生成LabelTTF</h3><p>LabelTTF似乎已经是lite版本中动态显示图片的唯一方案了，在生成一个LabelTTF对象时，我们可以指定它的内容、所用的字体（ttf格式的字体或者系统自带字体）、字体大小、元素所占区域大小、对齐方式等等）;<br>然后我们可以通过getString方法和setString获取、设置label的内容；<br>还可以通过setColor设置文字的颜色。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.lbMoney = cc.LabelTTF.create(<span class="string">'0'</span>, <span class="string">'Arial'</span>, <span class="number">64</span>, cc.size(<span class="number">200</span>, <span class="number">64</span>), cc.TEXT_ALIGNMENT_RIGHT);</div><div class="line"><span class="keyword">this</span>.lbMoney.setPosition(size.width / <span class="number">2</span>  + <span class="number">50</span>, size.height / <span class="number">2</span> + <span class="number">455</span>);</div><div class="line"><span class="keyword">this</span>.lbMoney.setColor(cc.color(<span class="string">'#2a5984'</span>))</div><div class="line"><span class="keyword">this</span>.addChild(<span class="keyword">this</span>.lbMoney, <span class="number">1</span>);</div><div class="line"><span class="keyword">this</span>.lbMoney.setString(nData);</div></pre></td></tr></table></figure></p>
<h2 id="生成按钮"><a href="#生成按钮" class="headerlink" title="生成按钮"></a>生成按钮</h2><p>由于引擎基于canvas绘制，所以绘制的元素就不能逐一的绑定通常我们所认知的click、hover等这些html世界中的事件。<br>所以按钮似乎是cocos世界里唯一可以个简单的一对一绑定点击事件的方法了。<br>在cocos中按钮又叫菜单，它的结构必须是这样的 菜单（menu） -》 菜单项（menuItem）<br>因此我们首先要生成1个和多个menuItem，然后再把它（们）添加到menu（类似于Layer）中，这样每个menuItem才能发挥作用。<br>首先在创建item时，item分为两种方法：</p>
<ol>
<li><p>MenuItemSprite</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sp1 = cc.Sprite.create(oRes1[<span class="string">'src'</span>], rect1);</div><div class="line"><span class="keyword">var</span> sp2 = cc.Sprite.create(oRes2[<span class="string">'src'</span>], rect2);</div><div class="line"><span class="keyword">var</span> mis = cc.MenuItemSprite.create(sp1, sp2, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	</div><div class="line">&#125;, <span class="keyword">this</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>MenuItemImage</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oRes = sResName;</div><div class="line"><span class="keyword">var</span> mii = cc.MenuItemImage.create(oRes[<span class="string">'src'</span>], oRes[<span class="string">'src'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>所以机智的你一定知道怎样做文字的按钮啦，两个LabelTTF完事：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sp1 = cc.LabelTTF.create(<span class="string">'start'</span>, <span class="string">'Arial'</span>, <span class="number">64</span>, cc.size(<span class="number">100</span>, <span class="number">64</span>), cc.TEXT_ALIGNMENT_RIGHT);</div><div class="line">sp2 = cc.LabelTTF.create(<span class="string">'start'</span>, <span class="string">'Arial'</span>, <span class="number">64</span>, cc.size(<span class="number">100</span>, <span class="number">64</span>), cc.TEXT_ALIGNMENT_RIGHT);</div><div class="line"><span class="keyword">var</span> mi = cc.MenuItemSprite.create(sp1, sp2, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">1111</span>);</div><div class="line">&#125;, <span class="keyword">this</span>);</div><div class="line"><span class="keyword">var</span> me = cc.Menu.create(mi);</div></pre></td></tr></table></figure></p>
<h2 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h2><p>cocos中的动作是引擎的一大优势，用起来非常简单，以位移动作为例：<br>以cc.moveBy方法可以创建一个相对位移的动作，比如这样先相对Y轴唯一40px;<br>然后FadeIn和FadeOut顾名思义是淡入淡出的动作。<br>然后注意到spawn方法，这个返回的是多个动作同时执行的效果。<br>而Sequence方法则可以返回多个动作按顺序依次执行的效果。</p>
<p>当想要在某些动作之后想执行某个方法时，可以用cc.callFunc生成一个callback对象，加入到sequenece对象中即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m0 = cc.FadeIn.create(<span class="number">0.3</span>);</div><div class="line"><span class="keyword">var</span> m1 = cc.moveBy(<span class="number">.3</span>, cc.p(<span class="number">0</span>,<span class="number">40</span>));</div><div class="line"><span class="keyword">var</span> m2 = cc.moveBy(<span class="number">.3</span>, cc.p(<span class="number">0</span>, <span class="number">10</span>));</div><div class="line"><span class="keyword">var</span> m3 = cc.FadeOut.create(<span class="number">0.7</span>);</div><div class="line"><span class="keyword">var</span> m4 = cc.Spawn.create(m0, m1);</div><div class="line"><span class="keyword">var</span> m5 = cc.Spawn.create(m2, m3);</div><div class="line"><span class="keyword">var</span> m6 = cc.moveBy(<span class="number">.3</span>, cc.p(<span class="number">0</span>, <span class="number">-50</span>));</div><div class="line"><span class="keyword">var</span> callback = <span class="keyword">new</span> cc.CallFunc(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">// todo</span></div><div class="line">&#125;, self);</div><div class="line"><span class="keyword">var</span> m = cc.Sequence.create(m4, m5, m6, callback);</div></pre></td></tr></table></figure>
<h2 id="事件监听和碰撞检测"><a href="#事件监听和碰撞检测" class="headerlink" title="事件监听和碰撞检测"></a>事件监听和碰撞检测</h2><p>前面提到过，游戏中事件监听很难单独对某个元素绑定事件，所以得转变一下思路。<br>当我们要监听某些元素的touch等一系列事件时，<br>首先我们可以监听到的是整个窗口的touchbegan、onTouchesMoved、onTouchesEnded等事件，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">cc.eventManager.addListener(&#123;</div><div class="line">  <span class="attr">event</span>: cc.EventListener.TOUCH_ONE_BY_ONE</div><div class="line">, <span class="attr">swallowTouches</span>: <span class="literal">true</span></div><div class="line">, <span class="attr">onTouchBegan</span>: <span class="function"><span class="keyword">function</span>(<span class="params">touch, event</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> location = touch.getLocation();</div><div class="line">    <span class="keyword">var</span> oRealLc = self.convertToNodeSpace(location);</div><div class="line">    <span class="keyword">var</span> _x = oRealLc.x;</div><div class="line">    <span class="keyword">var</span> _y = oRealLc.y;</div><div class="line">    <span class="comment">// sth to do</span></div><div class="line">  &#125;</div><div class="line">&#125;, <span class="keyword">this</span>);</div><div class="line">cc.eventManager.addListener(&#123;</div><div class="line">  <span class="attr">prevTouchId</span>: <span class="number">-1</span></div><div class="line">, <span class="attr">swallowTouches</span>: <span class="literal">true</span></div><div class="line">, <span class="attr">event</span>: cc.EventListener.TOUCH_ALL_AT_ONCE</div><div class="line">, <span class="attr">onTouchesMoved</span>:<span class="function"><span class="keyword">function</span> (<span class="params">touches, event</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> touch = touches[<span class="number">0</span>];</div><div class="line">    <span class="keyword">var</span> location = touch.getLocation();</div><div class="line">    <span class="keyword">var</span> oRealLc = self.convertToNodeSpace(location);</div><div class="line">    <span class="keyword">var</span> _x = oRealLc.x;</div><div class="line">    <span class="keyword">var</span> _y = oRealLc.y;</div><div class="line">    <span class="comment">// sth to do</span></div><div class="line">  &#125;</div><div class="line">, <span class="attr">onTouchesEnded</span>: <span class="function"><span class="keyword">function</span>(<span class="params">touches, event</span>)</span>&#123;</div><div class="line">    <span class="comment">// sth to do</span></div><div class="line">  &#125;</div><div class="line">&#125;, <span class="keyword">this</span>);</div></pre></td></tr></table></figure></p>
<p>然后我们可以判断事件的触发点是否在我们要绑定的元素上。<br>所以问题就变成了，如何判断某个坐标点是否在某个元素显示的区域上，<br>这个问题其实和检测两个元素是否发生碰撞类似，都会用到一个rectContainsPoint的方法，首先用cc.rect获取要判断的元素的矩形选中区域，然后oPoint为事件触发的坐标点，那么这个方法即可返回oPoint是否再oRect中了（上面的代码中中convertToNodeSpace可以将坐标点转化成指定元素为基准的坐标点）;</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oRect = cc.rect(startX, startY, w, h);</div><div class="line"><span class="keyword">var</span> oPoint = cc.p(_x, _y);</div><div class="line">cc.rectContainsPoint(oRect, oPoint)</div></pre></td></tr></table></figure>
<h2 id="播放声音"><a href="#播放声音" class="headerlink" title="播放声音"></a>播放声音</h2><p>传入参数：声音url、是否循环<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cc.audioEngine.playEffect(sSoundUrl, <span class="literal">false</span>);</div><div class="line">cc.audioEngine.playMusic(sSoundUrl, <span class="literal">false</span>);</div></pre></td></tr></table></figure></p>
<h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>定时器也是cocos中一个非常方便的功能，当然也可以用其它方法实现。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cc.director.getScheduler().scheduleCallbackForTarget(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">// sth to do</span></div><div class="line">&#125;, <span class="number">1</span>, <span class="number">0</span> , <span class="number">1</span>);</div></pre></td></tr></table></figure></p>
<h2 id="简单总结优缺点"><a href="#简单总结优缺点" class="headerlink" title="简单总结优缺点"></a>简单总结优缺点</h2><p><em>首先要吐槽一下lite版本不支持的2个实用功能</em></p>
<blockquote>
<ol>
<li>不支持位图字体labelBMFont方法</li>
<li>不支持从plist生成元素（当然传统前端并不知道这有啥用）</li>
</ol>
</blockquote>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><blockquote>
<ol>
<li>框架轻巧，适合web方向的游戏开发</li>
<li>系统功能完善，提供了预加载、截取雪碧图、绘图、动画、事件监听管理、定时器等调用方法非常简单的方法</li>
</ol>
</blockquote>
<p>很多缺点都是见仁见智的，这里我只举几个我认为比较硬伤的问题。</p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><blockquote>
<ol>
<li><p>引擎将需要引入的js文件罗列在一个project.json的文件中，而这个json文件是在引擎启动后再通过XHR加载的，加之引擎本身的版本号管理功能不是很完善，很容易由于现代浏览器强力的缓存机制而造成项目文件不易更替。因此不适合用在需要经常变更版本或代码的游戏上，当然这点可以通过修改引擎源码解决。</p>
</li>
<li><p>引擎的预加载方法没有提供回调，当资源加载失败时不能很好的做一些补救措施。举一个实际碰到的问题：在我们的项目中用到了CDN的加速方案，这时候图片其实都是访问CDN获取的，但是由于<strong>某些坑爹的网络提供商的流氓拦截</strong>、<strong>用户使用了某些网络加速器</strong>、<strong>CDN有万分之几的访问失败几率</strong>造成CDN上的图片资源不能正常加载，这个时候引擎就有可能会报错了。而实际上这时候我们更希望引擎能够做一些<code>回源</code>的处理，访问源服务器上的资源，这样出错而造成游戏不能玩的几率可能会大大降低。当然这点也可以通过修改引擎解决……</p>
</li>
<li><p>自适应方案看上去很厉害，但是在一些特殊运用时还是不尽如人意，比如想在竖屏环境下自动将横版游戏旋转过来，就不是很好做，通过自适应方案得出来的结果也会怪怪的。感兴趣的可以自己试试。</p>
</li>
<li><p>声音加载时在安卓手机上有bug，会在加载时把音效播放出来……</p>
</li>
</ol>
</blockquote>
<h3 id="demo地址"><a href="#demo地址" class="headerlink" title="demo地址"></a>demo地址</h3><p><strong><em> <a href="https://github.com/shihuacivis/gameCountMoney" target="_blank" rel="external">DEMO的github地址</a> </em></strong></p>
<p><strong>未完待续</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cocos2d-js-lite是一个cocos2d的轻量化精简版本，只保留了cocos2d-js的一些核心方法。&lt;br&gt;它所包含的特性列表如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+ Canvas渲染器 (不支持WebGL)
+ 场景和图层
+ 事件管理器
+ 计时器
+ 精灵和贴图
+ TTF文本
+ 声音
+ 动作
+ 菜单和菜单项
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;与cocos2d-js完整版一个最大的不同就是，lite版把引擎的所有模块都放到一个文件里，，开发者只需像引入一个jQuery库一样引入一个文件即可。&lt;strong&gt;另外，lite是基于纯原生js编写，所以无须像&lt;code&gt;白鹭引擎&lt;/code&gt;（基于Typescript）要先经过编译才能在浏览器中打开，因此在开发体验上感觉与传统前端开发更为接近。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式在代码中的一些运用</title>
    <link href="http://shiwah.me/2015/11/18/20150918_codeBeter/"/>
    <id>http://shiwah.me/2015/11/18/20150918_codeBeter/</id>
    <published>2015-11-17T16:00:00.000Z</published>
    <updated>2017-06-03T16:37:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近有一张神图，大意是产品说『此处功能日后必改，不要写死』</p>
<p>间接的吐槽了产品狗就是喜欢糊逼改需求，因此我们的代码千万不能写成hardcode。</p>
<p>也许你曾经听过hardcode，有的人用它来形容很难懂的代码，很形象，你的代码很硬，所以不能适应变化。</p>
<p>而这里我想说的是一种编码习惯：</p>
<p><strong>将程序体中要调用的变量直接写死代码中。</strong><br><a id="more"></a></p>
<p>比如我们要计算一个边长是100的正方形面积：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">100</span> * <span class="number">100</span>;</div></pre></td></tr></table></figure></p>
<p>因为我们会习惯性的认为100是一个确定的值，我们就直接用数字里表明，而不是一个变量。</p>
<p>那么这个时候就会带来两个问题：</p>
<ol>
<li>100这个数值的含义不清楚。当代码交到别人手上，或者过了一段时间后自己再回来看时，可能就不清楚这个100是什么意思了。这就变成了传说中的<code>magic number</code>；</li>
<li>如果有一天，正方形的边长变了，是不是就要把数值改变了呢？假设这个边长在程序中多个地方进行运算，与此同时如果程序中有其它变量的值也是100，那么改起来就头疼了；</li>
</ol>
<p>所以一个良好的编程习惯就是少用hardcode。这会让你的代码质量（可读性、复用性等）有一个质的飞跃</p>
<p><strong>注意，避免hardcode是一种编程的思想，而不是简单的把数值变量化</strong></p>
<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>首先要先清楚去除hardcode的目的：</p>
<blockquote>
<ol>
<li>让代码更加语义化。让自己/他人在阅读（审查）代码时都能很快的看懂某一个变量、方法等的意思；</li>
<li>提高代码的复用性。在去除hardcode的过程中，其实我们已经将数值相同的变量的入口提取出来（抽取共性），这样就只需要一处修改、多处受用了。</li>
<li>提高效率。避免在编码过程中认为输错某些字符而出错……</li>
</ol>
</blockquote>
<h2 id="几个经典的应用："><a href="#几个经典的应用：" class="headerlink" title="几个经典的应用："></a>几个经典的应用：</h2><h3 id="ajax的url"><a href="#ajax的url" class="headerlink" title="ajax的url"></a>ajax的url</h3><p>很多时候某个请求地址的用途很难从url字面看懂（如a.php），如果我们将其提取出来，放到一个oUrl[‘getUserInfo’]对象中。<br>那么首先它的作用就可以从字面上理解了，getUserInfo嘛。<br>其实还有一个更大好处，在实际项目中，当前后端分工明确时，前端常常需要自己测试ajax模块，而不是直接去调实际PHP给出的接口（又或者说前端往往先于PHP开发），当我们在本地测试时，ajax的请求地址就和线上的不同了。<br>如果我们采取这种写法，将地址的配置参数暴露出来，当我们提交给PHP后，他只需要修改这几个配置项就可以了。而不需要再改我们的js代码了。<br>假如程序中很多个（假设10个）模块都需要访问a.php调数据，那么如果有一天，接口的地址换了（比如上面这种前后端分离后前端交付js给php后的情景），那么我就不需要10个模块都一一的去改。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oUrl = &#123;</div><div class="line">  <span class="string">'getUserInfo'</span>: <span class="string">'a.php'</span></div><div class="line">, <span class="string">'setUserInfo'</span>: <span class="string">'b.php'</span></div><div class="line">&#125;;</div><div class="line">$ajax(&#123;</div><div class="line">  <span class="string">'url'</span>: oUrl[<span class="string">'getUserInfo'</span>]</div><div class="line">, <span class="string">'type'</span>: <span class="string">'GET'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><p>ajax的例子中已经把优点说的很明显了，下面再分享一种在事件绑定中的应用：<br>我们知道，在pc端我们的点击事件一般都是绑定click，而移动端我们为了更快的响应则往往绑定touchstart事件，于是就会发现在pc端上调试touchstart事件不太方便而在移动端click又不是我们想要的结果。</p>
<p>因此，我们把要绑定的事件抽取成变量，先判断系统环境然后再给变量赋值，这样就可以快捷的在pc和手机上切换啦。(判断方法仅供参考)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fCheckMoblie</span>(<span class="params"></span>)  </span></div><div class="line">&#123;  </div><div class="line">  <span class="keyword">var</span> aUserAgentInfo = navigator.userAgent;  </div><div class="line">  <span class="keyword">var</span> aMoblieAgent = [<span class="string">'Android'</span>, <span class="string">'iPhone'</span>, <span class="string">'SymbianOS'</span>, <span class="string">'Windows Phone'</span>, <span class="string">'iPad'</span>, <span class="string">'iPod'</span>];</div><div class="line">  <span class="keyword">var</span> bFlag = <span class="literal">false</span>;  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aMoblieAgent.length; i++) &#123;  </div><div class="line">     <span class="keyword">if</span> (aUserAgentInfo.indexOf(Agents[i]) &gt; <span class="number">0</span>) &#123; </div><div class="line">      bFlag = <span class="literal">true</span>; </div><div class="line">      <span class="keyword">break</span>; </div><div class="line">     &#125;  </div><div class="line">  &#125;  </div><div class="line">  <span class="keyword">return</span> bFlag;  </div><div class="line">&#125; </div><div class="line"><span class="keyword">var</span> bMobile = fCheckMoblie();</div><div class="line"><span class="keyword">var</span> sClickType = bMobile ? <span class="string">'touchstart'</span> : <span class="string">'click'</span>;</div><div class="line">$(<span class="string">'#aaa'</span>).on(sClickType, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">// todo</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="思路拓展-——-抽取方法（代码片段）"><a href="#思路拓展-——-抽取方法（代码片段）" class="headerlink" title="思路拓展 —— 抽取方法（代码片段）"></a>思路拓展 —— 抽取方法（代码片段）</h3><p>上面两个案例可以看到将变量提取出来的优点，其实这样的思路不仅对于变量受用，对于方法（或者是一整段的逻辑代码）也同样适用。</p>
<p>我们刚开始接触一些业务复杂的js时可能都会写过下面几种代码：</p>
<ul>
<li><ol>
<li>超级多的if else<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">functon aaa(sCity) &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="string">'shanghai'</span> == sCity) &#123;</div><div class="line">    <span class="comment">// 这里是50行逻辑代码代码</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'beijing'</span> == sCity) &#123;</div><div class="line">    / 这里是<span class="number">50</span>行逻辑代码代码</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'guangzhou'</span> == sCity) &#123;</div><div class="line">    / 这里是<span class="number">50</span>行逻辑代码代码</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'hangzhou'</span> == sCity) &#123;</div><div class="line">    / 这里是<span class="number">50</span>行逻辑代码代码</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'nanning'</span> == sCity) &#123;</div><div class="line">    / 这里是<span class="number">50</span>行逻辑代码代码</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<p>上面这种一个分多种情况处理的逻辑代码，假设每个情况50行，当你写完后要进行调试修改代码时发现滚轮内心几乎是崩溃的。这种现象很常见，因为和有可能在开始编码时不能预见逻辑会如此复杂。但客观的说这样的代码可读性略差。</p>
<p><strong>有的人会说这种情况换 <code>switch case</code> 会更好</strong><br>但其实如果每种情况要里有几十行上百行代码时这么写其实是换汤不换药的。</p>
<p>一种更为推荐的写法，假如只有<code>shanghai</code> 、 <code>beijing</code>等这5种情况，那么我们先将这这些情况的逻辑代码抽取出来：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">oFunc = &#123;</div><div class="line">  <span class="string">'shanghai'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// 上海的50行</span></div><div class="line">  &#125;</div><div class="line">, <span class="string">'beijing'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// 50行</span></div><div class="line">  &#125;</div><div class="line">, <span class="string">'guangzhou'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// 50行</span></div><div class="line">  &#125;</div><div class="line">, <span class="string">'hangzhou'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// 50行</span></div><div class="line">  &#125;</div><div class="line">, <span class="string">'nanning'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// 50行</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params">sCity</span>) </span>&#123;</div><div class="line">  oFunc[sCity]();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这时候aaa这个方法就轻便了很多了，而原来数十行的代码段也有了自己的方法，这时候就可以多处去调用相同的代码片段了。如果这时候你下意识的想去看看oFunc中的五个方法是不是再可以抽取共同的模块（代码片段）那么基本上就已经溜的飞起了。</p>
<ul>
<li><ol>
<li>重复写很多相似的代码<br>当页面中要处理很多元素时，就经常会遇到这种情况。</li>
</ol>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Person();</div><div class="line">a.name = <span class="string">'name1'</span>;</div><div class="line">a.gender = <span class="string">'man'</span>;</div><div class="line">a.age = <span class="string">'18'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Person();</div><div class="line">b.name = <span class="string">'name1'</span>;</div><div class="line">b.gender = <span class="string">'man'</span>;</div><div class="line">b.age = <span class="string">'18'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Person();</div><div class="line">c.name = <span class="string">'name1'</span>;</div><div class="line">c.gender = <span class="string">'man'</span>;</div><div class="line">c.age = <span class="string">'18'</span>;</div></pre></td></tr></table></figure>
<p>其实处理的这三个元素所进行的工序是一毛一样的。一般遇到这种情况，超过三段相同的代码时就可以考虑进行封装了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">funtion fCreatePerson(name, gender, age) &#123;</div><div class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> Person();</div><div class="line">  o.name = name;</div><div class="line">  o.gender = gender;</div><div class="line">  o.age = age;</div><div class="line">  <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = fCreatePerson(<span class="string">'name1'</span>, <span class="string">'man'</span>, <span class="string">'18'</span>);</div><div class="line"><span class="keyword">var</span> b = fCreatePerson(<span class="string">'name1'</span>, <span class="string">'man'</span>, <span class="string">'18'</span>);</div><div class="line"><span class="keyword">var</span> c = fCreatePerson(<span class="string">'name1'</span>, <span class="string">'man'</span>, <span class="string">'18'</span>);</div></pre></td></tr></table></figure>
<p>上面这种情况普遍出现在某些匿名函数中，比如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#btn1'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  a = $(<span class="keyword">this</span>).data(<span class="string">'abc'</span>);</div><div class="line">  alert(a);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="string">'#btn2'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  a = $(<span class="keyword">this</span>).data(<span class="string">'abc'</span>);</div><div class="line">  alert(a);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>刚开始往往会被匿名函数牵着鼻子走，习惯性的把逻辑代码都写在这个匿名function中。<br>而实际上，按照本文的思路，这段匿名函数其实可以抽出来写……</p>
<h3 id="脑洞大开-CSS也行？"><a href="#脑洞大开-CSS也行？" class="headerlink" title="脑洞大开 CSS也行？"></a>脑洞大开 CSS也行？</h3><p>其实这个是胡扯啦，css这种静态的stylesheet基本上不存在变量这种说法啦~<br>基本上就是你在css里定义了多少，那么页面上就显示多少了。<br>不过直至rem的出现。<br>rem在这里就可以看成是一个预设的变量啦，它的默认值是根元素的font-size。<br>当页面加载后，你可以修个font-size的大小，这时候，所有基于rem设置大小的值都会响应啦。<br>是不是很叼？？？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近有一张神图，大意是产品说『此处功能日后必改，不要写死』&lt;/p&gt;
&lt;p&gt;间接的吐槽了产品狗就是喜欢糊逼改需求，因此我们的代码千万不能写成hardcode。&lt;/p&gt;
&lt;p&gt;也许你曾经听过hardcode，有的人用它来形容很难懂的代码，很形象，你的代码很硬，所以不能适应变化。&lt;/p&gt;
&lt;p&gt;而这里我想说的是一种编码习惯：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;将程序体中要调用的变量直接写死代码中。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>cocos2d-js-lite自定义预加载页面</title>
    <link href="http://shiwah.me/2015/11/15/20151220_preload/"/>
    <id>http://shiwah.me/2015/11/15/20151220_preload/</id>
    <published>2015-11-14T16:00:00.000Z</published>
    <updated>2015-12-20T09:02:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>用cocos2d-js-lite开发H5游戏非常的方便，然后引擎本身提供的preload模块个性化支持非常的差，必须修改引擎的源码才可以进行定制。</p>
<p>另外，加载游戏引擎文件可能也需要一些额外的时间，所以这时候的白屏状态似乎也不是很友好。</p>
<p>因此我更倾向于用HTML搭建加载的界面，页面一打开就能显示加载页面和进度。这时候只需要想办法实现一个静默预加载（无界面），并能拿到加载进度的动态显示出来就可以了。</p>
<a id="more"></a>
<p>好在引擎确实提供了这样一个静默预加载的方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// aRes是需要加载的文件列表</span></div><div class="line">cc.loader.load(aRes, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 每加载完一个文件会执行一次</span></div><div class="line">  <span class="keyword">var</span> total = <span class="built_in">arguments</span>[<span class="number">1</span>]; <span class="comment">// 总文件数</span></div><div class="line">  <span class="keyword">var</span> cur = <span class="built_in">arguments</span>[<span class="number">2</span>]; <span class="comment">// 已经加载的文件数</span></div><div class="line">  <span class="keyword">var</span> nProgress = <span class="built_in">Math</span>.floor(<span class="number">100</span> * (cur / total)); <span class="comment">// 加载完成的百分比计算</span></div><div class="line">  <span class="keyword">var</span> str = nProgress +<span class="string">'%'</span>;</div><div class="line">  $progress.innerHTML = str;</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">// 加载所有文件后执行的回调</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'loadFinish'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用cocos2d-js-lite开发H5游戏非常的方便，然后引擎本身提供的preload模块个性化支持非常的差，必须修改引擎的源码才可以进行定制。&lt;/p&gt;
&lt;p&gt;另外，加载游戏引擎文件可能也需要一些额外的时间，所以这时候的白屏状态似乎也不是很友好。&lt;/p&gt;
&lt;p&gt;因此我更倾向于用HTML搭建加载的界面，页面一打开就能显示加载页面和进度。这时候只需要想办法实现一个静默预加载（无界面），并能拿到加载进度的动态显示出来就可以了。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>用CSS3画一个奥迪车标</title>
    <link href="http://shiwah.me/2015/10/30/20151030_css3AudiLogo/"/>
    <id>http://shiwah.me/2015/10/30/20151030_css3AudiLogo/</id>
    <published>2015-10-29T16:00:00.000Z</published>
    <updated>2015-12-20T06:41:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>又要到周末啦，今天下班路上突然脑洞大开，作为一个有『汽车情怀』的前端，竟然没有做过汽车相关专题的玩意，于是就想到了做一个车标LOGO。</p>
<p>说到车标，当然是要先做我心爱的奥迪啦！</p>
<a id="more"></a>
<p>下面是实现思路：</p>
<p>首先是HTML结构： </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span>AUDI<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后是CSS：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.logo</span> &#123;</div><div class="line">	<span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>大功告成！so easy！</strong></p>
<p><strong>纳尼？我裤子都脱了你就让我看这个？？？</strong></p>
<p>开个玩笑。。。</p>
<p>本文将涉及下面几个知识点： </p>
<blockquote>
<ol>
<li>CSS3画圆形、圆环</li>
<li>通过transform实现水平和垂直居中</li>
<li>rem的响应式解决方案</li>
<li>CSS3渐变滤镜</li>
</ol>
</blockquote>
<p>下面进入正题。</p>
<p>先一睹为快: <a href="http://demo.qpdiy.com/sh/vehicleLogo/" target="_blank" rel="external">点我看线上demo</a></p>
<p>首先讲大致的思路：</p>
<p>奥迪嘛，四个圈咯。</p>
<p>那么要做的就是画4个圆环， 想做得逼真一点，就要再给圆环加上渐变阴影了。</p>
<p>ok，那么解决的步奏就是：</p>
<blockquote>
<ol>
<li>画圆环</li>
<li>给圆环加渐变阴影</li>
<li>四个圆环定位布局</li>
</ol>
</blockquote>
<p>思路清晰之后就开始了。</p>
<h2 id="画圆环"><a href="#画圆环" class="headerlink" title="画圆环"></a>画圆环</h2><p>CSS3还没有强大到自动无脑画圆环，所以智慧的劳动人民们一般是这样实现的：</p>
<h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><p>假设要画一个灰色的圆环，那么：</p>
<ol>
<li>画一个大的灰色的圆；</li>
<li>再画一个和背景同色的圆，居中盖在灰色的圆环上。<br>那么这样看上去就是一个中空的灰色圆环啦。</li>
</ol>
<h3 id="如何画圆"><a href="#如何画圆" class="headerlink" title="如何画圆"></a>如何画圆</h3><p>这里有一个基础的技巧： </p>
<p>将一个 正方形div（width和height相等）的 圆角属性设为 50% 即可 获得一个直径 = width 的圆</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.cirle</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="开始画我心爱的奥迪环了"><a href="#开始画我心爱的奥迪环了" class="headerlink" title="开始画我心爱的奥迪环了"></a>开始画我心爱的奥迪环了</h3><p>首先我们要模仿的LOGO大概如下面这张图：</p>
<p><img src="/img/2015091101.jpg" alt="cmd-markdown-logo"></p>
<p>每个奥迪环的最外层的表面可以看做一个环，然后内侧也是一个环，所以每个奥迪环里其实要画两个环。<br>所以HTML结构可以考虑设置如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo-circle-wrap l1"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"circle-fir"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"circle-sec"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"circle-thi"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>要画两个圆环，所以每个奥迪环要配置三个圆形： </p>
<p>第一层是家族式外壳， 第二层是大众爹的动力总成，第三层是自我标榜的内饰……</p>
<p>圆环基本结构画好后，开始在渐变上作文章了。</p>
<p>CSS3中提供了线性渐变滤镜可以用于div的背景中，以后再详细分析这一属性，感兴趣的可以自己查一下。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">linear-gradient</span>(0<span class="selector-tag">deg</span>, <span class="selector-id">#000000</span> <span class="selector-class">.5</span>%, <span class="selector-tag">transparent</span> 35%);</div></pre></td></tr></table></figure>
<p>下面就是整个圆面实现的css了，我这里用了rem的自适应方案，不太清楚rem的同学可以自行了解一下。。。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.logo-circle-wrap</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">5rem</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">5rem</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.circle-fir</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">width</span>: <span class="number">5rem</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">5rem</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">border</span>: .<span class="number">05rem</span> solid <span class="number">#6f6f6f</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#ebebeb</span>;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(15deg, #000000 .5%, transparent 35%);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.circle-fir</span> <span class="selector-class">.circle-sec</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#232323</span>;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">4rem</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">4rem</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">border</span>: .<span class="number">1rem</span> solid <span class="number">#efefef</span>;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(33deg, #888888 10%, #454545 66.7%, transparent);</div><div class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-50%, -50%);</div><div class="line">          <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.circle-fir</span> <span class="selector-class">.circle-thi</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">3.5rem</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">3.5rem</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-50%, -50%);</div><div class="line">          <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>画完了一个圆，其它的就都依样画葫芦啦。<br>将四个圆位置调整一下</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.logo-circle-wrap</span><span class="selector-class">.l1</span> &#123;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0rem</span>; </div><div class="line">&#125;</div><div class="line"><span class="selector-class">.logo-circle-wrap</span><span class="selector-class">.l2</span> &#123;</div><div class="line">  <span class="attribute">left</span>: <span class="number">3rem</span>; </div><div class="line">&#125;</div><div class="line"><span class="selector-class">.logo-circle-wrap</span><span class="selector-class">.l3</span> &#123;</div><div class="line">  <span class="attribute">left</span>: <span class="number">6rem</span>; </div><div class="line">&#125;</div><div class="line"><span class="selector-class">.logo-circle-wrap</span><span class="selector-class">.l4</span> &#123;</div><div class="line">  <span class="attribute">left</span>: <span class="number">9rem</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="div覆盖解决方案"><a href="#div覆盖解决方案" class="headerlink" title="div覆盖解决方案"></a>div覆盖解决方案</h3><p>这时候就发现一个蛋疼的问题了，后面的奥迪环会将前一个奥迪环的右半部分遮住。<br>这时候第一反映就是要死要死要死了，因为这些奥迪环本来就是由三层结构叠加起来了，想做圆环内部背景透明似乎不可行。</p>
<p>这时候奥迪的好友『丰田』上线了，正所谓『车到山前必有路，有路必有丰田车』（广告费请洽门卫李大爷）</p>
<p>既然背景不透明，就在后面的环上再画上前一个环的右半部分。这样看起来就像是透明的了。</p>
<p>然而问题又来了，怎样只画一部分圆环呢？</p>
<p>你可能想到，在后面的环里再嵌入一个大环，然后把一部分遮住就可以了。</p>
<p>我确实是这么做的，再内层环里设置overflow:hidden，然后嵌入的环通过transform属性拉到和前一个环同一位置。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo-circle-wrap l2"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"circle-fir"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"circle-sec"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"circle-thi"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 第一个环的右半部分 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo-circle-wrap part part1"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"circle-fir"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"circle-sec"</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"circle-thi"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 第一个环的右半部分 end --&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="selector-class">.circle-fir</span> <span class="selector-class">.circle-thi</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">3.5rem</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">3.5rem</span>;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-50%, -50%);</div><div class="line">          <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.logo-circle-wrap</span><span class="selector-class">.part</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">5rem</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">5rem</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-3.75rem, -.7rem);</div><div class="line">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(-3.75rem, -.7rem);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>大功告成！</p>
<p>线上的DEMO地址:<a href="http://shihuacivis.github.io/css3audi/" target="_blank" rel="external">点我看线上demo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又要到周末啦，今天下班路上突然脑洞大开，作为一个有『汽车情怀』的前端，竟然没有做过汽车相关专题的玩意，于是就想到了做一个车标LOGO。&lt;/p&gt;
&lt;p&gt;说到车标，当然是要先做我心爱的奥迪啦！&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTML5中计时器的三种方案</title>
    <link href="http://shiwah.me/2015/10/11/20151111_h5Timer/"/>
    <id>http://shiwah.me/2015/10/11/20151111_h5Timer/</id>
    <published>2015-10-10T16:00:00.000Z</published>
    <updated>2015-12-20T09:00:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>在做HTML5游戏或者单页应用时我们常常需要使用到计时器模块，比如游戏中的倒计时功能。</p>
<a id="more"></a>
<h2 id="常规方案"><a href="#常规方案" class="headerlink" title="常规方案"></a>常规方案</h2><p>最常见的计时器方案一般无非<code>setTimeout</code>和<code>setInterval</code>，基本上已经被玩坏了……<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> nTimeCount = <span class="number">15</span>;</div><div class="line"></div><div class="line"><span class="comment">// setTimeout</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fCountTime</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (nTimeCount &gt; <span class="number">0</span>) &#123;</div><div class="line">    nTimeCount--;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      fCountTime();</div><div class="line">    &#125;, <span class="number">1000</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'时间到'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">fCountTime();</div><div class="line"></div><div class="line"><span class="comment">// setInterval</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fCountTime</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (nTimeCount &gt; <span class="number">0</span>) &#123;</div><div class="line">    nTimeCount--;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    clearInterval(timer);</div><div class="line">    timer = <span class="literal">null</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'时间到'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  fCountTime();</div><div class="line">&#125;, <span class="number">1000</span>);</div></pre></td></tr></table></figure></p>
<h2 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h2><p>在pc上看，这样的实现方法并没有太大的问题，然而到了移动端似乎就会出现下面两个问题。</p>
<ol>
<li>在移动端上，如IOS，当用户拖曳整张页面时，页面是停止渲染工作的，这时候setTimeout和setInterval也会随之暂停，那么当用户拖曳结束时，时间可能就已经延迟了不少。</li>
<li>在一些性能相对已经比较慢的手机上玩一些相对操作比较多、画面更新幅度大的游戏时，如IOS7下的iphone4s，会出现页面卡顿，以导致setTimeout、setInterval触发时间延迟被拖慢的问题。</li>
</ol>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>首先解决第一个问题，这个利用简单nTimeCount计数器的方案在setTimeout和setInterval有不可靠（这里指不能保证每一秒执行一次）的风险时，显然是不靠谱的，靠谱的方案还是得根据准确的时间进行判断。以setTimeout为例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> nTimeCount = <span class="number">15</span>;</div><div class="line"><span class="keyword">var</span> nStartTime = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> nEndTime = <span class="number">0</span>;</div><div class="line"><span class="comment">// setTimeout</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fCountTime</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="number">0</span> == nStartTime) &#123;</div><div class="line">    nStartTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 初始化记下开始计时的时间戳</span></div><div class="line">  &#125;</div><div class="line">  nEndTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 初始化记下开始计时的时间戳</span></div><div class="line">  nPassSec = <span class="built_in">Math</span>.floor((nEndTime - nStartTime) / <span class="number">1000</span>); <span class="comment">// 时间戳相减获得pass的毫秒数， /1000向下取整获得过去的秒数</span></div><div class="line">  nTimeCount -= nPassSec; <span class="comment">// 时间总数减去pass的秒数获得所剩的时间</span></div><div class="line">  <span class="keyword">if</span> (nTimeCount &gt; <span class="number">0</span>) &#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      fCountTime();</div><div class="line">    &#125;, <span class="number">1000</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'时间到'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">fCountTime();</div></pre></td></tr></table></figure></p>
<p>这样似乎可以保证时间至少相对靠谱了，那么来考虑第二个问题——性能问题。<br>当然，这时候可以适当降低setTimout的时间片来减少性能对计时的影响，但似乎<strong>HTML5已经推出了更好的解决方案</strong>。</p>
<h2 id="这才是重点"><a href="#这才是重点" class="headerlink" title="这才是重点"></a>这才是重点</h2><p>这里要推出的方法是HTML5中的新方法:<br>requestAnimationFrame， 它可以在浏览器每渲染一帧后立即执行回调，而不会像setTimeout一样有延迟风险。<br>现代浏览器在正常情况下每秒会渲染60帧画面，也就是会执行60次requestAnimationFrame的回调，你可以把它等价为一个16.7毫秒的setTimeout模式。<br>下面是一个兼容性的解决方案，并定义了一个计时器，<br>可以满足每一秒、每一帧都有对应回调可以调用，同时还有暂停、继续计时的功能：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 先将api进行兼容性封装</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> lastTime = <span class="number">0</span>;</div><div class="line">  <span class="keyword">var</span> vendors = [<span class="string">'webkit'</span>, <span class="string">'moz'</span>];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; vendors.length &amp;&amp; !<span class="built_in">window</span>.requestAnimationFrame; ++x) &#123;</div><div class="line">    <span class="built_in">window</span>.requestAnimationFrame = <span class="built_in">window</span>[vendors[x] + <span class="string">'RequestAnimationFrame'</span>];</div><div class="line">    <span class="built_in">window</span>.cancelAnimationFrame = <span class="built_in">window</span>[vendors[x] + <span class="string">'CancelAnimationFrame'</span>] ||    <span class="comment">// Webkit中此取消方法的名字变了</span></div><div class="line">                                  <span class="built_in">window</span>[vendors[x] + <span class="string">'CancelRequestAnimationFrame'</span>];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!<span class="built_in">window</span>.requestAnimationFrame) &#123;</div><div class="line">    <span class="built_in">window</span>.requestAnimationFrame = <span class="function"><span class="keyword">function</span>(<span class="params">callback, element</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> currTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">      <span class="keyword">var</span> timeToCall = <span class="built_in">Math</span>.max(<span class="number">0</span>, <span class="number">16.7</span> - (currTime - lastTime));</div><div class="line">      <span class="keyword">var</span> id = <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        callback(currTime + timeToCall);</div><div class="line">      &#125;, timeToCall);</div><div class="line">      lastTime = currTime + timeToCall;</div><div class="line">      <span class="keyword">return</span> id;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (!<span class="built_in">window</span>.cancelAnimationFrame) &#123;</div><div class="line">    <span class="built_in">window</span>.cancelAnimationFrame = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">      clearTimeout(id);</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;());</div><div class="line"></div><div class="line"><span class="comment">// 定义一个计时器对象</span></div><div class="line"><span class="keyword">var</span> _timeCount = &#123;</div><div class="line">  <span class="attr">restTime</span>: <span class="number">0</span></div><div class="line">, <span class="attr">totalTime</span>: <span class="number">0</span></div><div class="line">, <span class="attr">startTime</span>: <span class="number">0</span></div><div class="line">, <span class="attr">dormant</span>: <span class="literal">false</span></div><div class="line">, <span class="attr">count</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> self = _timeCount;</div><div class="line">    <span class="keyword">if</span>(self.dormant) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">var</span> cur = +<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">    <span class="keyword">var</span> s = self.totalTime - <span class="built_in">Math</span>.floor((cur - self.startTime)/<span class="number">1000</span>);</div><div class="line">    <span class="keyword">if</span>(s != self.restTime)&#123;</div><div class="line">      self.restTime--;</div><div class="line">      self.secPass();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(self.restTime != <span class="number">0</span>)&#123;</div><div class="line">      requestAnimationFrame(_timeCount.inter);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      _timeCount.finish();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">, <span class="attr">inter</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 每帧执行的回调</span></div><div class="line">    _timeCount.count();</div><div class="line">  &#125;</div><div class="line">, <span class="attr">secPass</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 每秒执行的回调</span></div><div class="line">  &#125;</div><div class="line">, <span class="attr">pause</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 暂停</span></div><div class="line">    <span class="keyword">this</span>.dormant = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">this</span>.totalTime = <span class="keyword">this</span>.restTime;</div><div class="line">  &#125;</div><div class="line">, <span class="attr">keepOn</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 继续计时</span></div><div class="line">    <span class="keyword">this</span>.startTime = +<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">    <span class="keyword">this</span>.dormant = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">this</span>.count();</div><div class="line">  &#125;</div><div class="line">, <span class="attr">finish</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 时间到</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然而，网上有一些大神也指出，requestAnimationFrame的性能其实并没有比setTimeout高到哪里去，甚至还不如后者，不过，年轻人嘛，不就应该多多尝试新事物吗？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做HTML5游戏或者单页应用时我们常常需要使用到计时器模块，比如游戏中的倒计时功能。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js中的面向对象</title>
    <link href="http://shiwah.me/2015/10/11/20151011_jsprototype/"/>
    <id>http://shiwah.me/2015/10/11/20151011_jsprototype/</id>
    <published>2015-10-10T16:00:00.000Z</published>
    <updated>2017-06-03T16:36:30.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="function是js中的一等公民"><a href="#function是js中的一等公民" class="headerlink" title="function是js中的一等公民"></a>function是js中的一等公民</h2><p>我们会发现js中一些基础的对象实质上也是function</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Number</span>)</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">String</span>)</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Function</span>)</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Object</span>)</div></pre></td></tr></table></figure>
<h2 id="function用于面向对象"><a href="#function用于面向对象" class="headerlink" title="function用于面向对象"></a>function用于面向对象</h2><p>说到对象，我们首先想到要有一个类，然后把类进行实例化得到对象。<br>而function就是我们所要的类（class）了。<br>比如下面这段代码，我们定义了一个Person类，然后传入<code>字面量</code>参数实例化了一个对象——sh。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">opt</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = opt.name;</div><div class="line">	<span class="keyword">this</span>.gender = opt.gender;</div><div class="line">	<span class="keyword">this</span>.skill = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> sh = <span class="keyword">new</span> Person(&#123;<span class="attr">name</span>:<span class="string">'shihua'</span>, <span class="attr">gender</span>: <span class="string">'man'</span>&#125;);</div><div class="line"><span class="built_in">console</span>.log(sh);</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> sh);</div></pre></td></tr></table></figure>
<p>通过console可以看到新生成的sh其实是一个Object,然而细心的人会发现，它除了我么自己定义的属性方法外，还多了一个<code>__proto__</code>的对象。这个就涉及了function中的一大精华原型链了。</p>
<h2 id="js中的原型链"><a href="#js中的原型链" class="headerlink" title="js中的原型链"></a>js中的原型链</h2><p>关于js中的原型链网上已经很多详细的解释了，之前也大概知道可以用prototype的方法给对象添加方法，比如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">opt</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = opt.name;</div><div class="line">	<span class="keyword">this</span>.gender = opt.gender;</div><div class="line">&#125;</div><div class="line">Person.prototype.skill = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div></pre></td></tr></table></figure>
<p><em>这样Person就具有skill方法。但其实用下面这种方式定义，也可以达到目的。</em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">opt</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = opt.name;</div><div class="line">	<span class="keyword">this</span>.gender = opt.gender;</div><div class="line">	<span class="keyword">this</span>.skill = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以我一直不是特别明白prototype方法的意义。<br>但其实细心的人会发现，用这种方法时，skill所指向的方法的内存地址是不一样的。<br>也就是说，当我们用后一种类时，每创建一个对象，都会在内存中新创建一个skill方法。这样显然是很影响性能的。<br>然而，如果是用prototype添加的skill方法，指向的内存地址则是一致的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">opt</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = opt.name;</div><div class="line">	<span class="keyword">this</span>.gender = opt.gender;</div><div class="line">	<span class="keyword">this</span>.skill = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Person(&#123;<span class="attr">name</span>:<span class="string">'aa'</span>, <span class="attr">gender</span>: <span class="string">'a'</span>&#125;);</div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Person(&#123;<span class="attr">name</span>:<span class="string">'aa'</span>, <span class="attr">gender</span>: <span class="string">'a'</span>&#125;);</div><div class="line"><span class="built_in">console</span>.log(a.skill === b.skill);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Human</span>(<span class="params">opt</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = opt.name;</div><div class="line">	<span class="keyword">this</span>.gender = opt.gender;</div><div class="line">&#125;</div><div class="line">Human.prototype.skill = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="keyword">var</span> a1 = <span class="keyword">new</span> Human(&#123;<span class="attr">name</span>:<span class="string">'aa'</span>, <span class="attr">gender</span>: <span class="string">'a'</span>&#125;);</div><div class="line"><span class="keyword">var</span> b1 = <span class="keyword">new</span> Human(&#123;<span class="attr">name</span>:<span class="string">'aa'</span>, <span class="attr">gender</span>: <span class="string">'a'</span>&#125;);</div><div class="line"><span class="built_in">console</span>.log(a1.skill === b1.skill);</div></pre></td></tr></table></figure>
<p>显然prototype才是更佳的做法。<br>那么就得说到prototype的运作原理了，当我们new一个对象时，会赋予其一个<code>__proto__</code>的属性，用于指向它的基类，使其具有基类的方法的指针，而子类自身实质上是不具有这些方法的。<br>当我们访问子类时，若其本身不具有这个属性和方法，则会根据<code>__proto__</code>向上一级去寻找，若上一级也不具有，则会依此去更上一级搜寻。<br>而prototype就是自主配置<code>__proto__</code>的入口。<br>这样就不会造成内存浪费，而对象方法也更易于被<code>继承</code>。</p>
<h2 id="js中实现extend"><a href="#js中实现extend" class="headerlink" title="js中实现extend"></a>js中实现extend</h2><p>有时候我们想在某个类的基础上派生出一个新的类，使其具有新的属性方法，同时不影响原有类。在java中我们把这个方法叫extend。在js中，extend的实现方法如下，klass就是我们要的具有extend功能的类</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> klass = <span class="function"><span class="keyword">function</span>(<span class="params">opts</span>) </span>&#123;</div><div class="line">&#125;;</div><div class="line">klass.extend = <span class="function"><span class="keyword">function</span>(<span class="params">opt</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> child = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">	<span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">this</span>.constructor = child();</div><div class="line">	&#125;;</div><div class="line">	F.prototype = <span class="keyword">this</span>.prototype;</div><div class="line">	<span class="keyword">var</span> o = <span class="keyword">new</span> F();</div><div class="line">	child.prototype = o;</div><div class="line">	<span class="comment">// 拓展新方法</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> opt) &#123;</div><div class="line">		child.prototype[attr] = opt[attr];</div><div class="line">	&#125;</div><div class="line">	child.prototype.__super__ = <span class="keyword">this</span>.prototype;</div><div class="line">	<span class="keyword">return</span> child;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;function是js中的一等公民&quot;&gt;&lt;a href=&quot;#function是js中的一等公民&quot; class=&quot;headerlink&quot; title=&quot;function是js中的一等公民&quot;&gt;&lt;/a&gt;function是js中的一等公民
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js实现基于发布/订阅机制的事件管理器（观察者模式）</title>
    <link href="http://shiwah.me/2015/09/10/20150910_subPub/"/>
    <id>http://shiwah.me/2015/09/10/20150910_subPub/</id>
    <published>2015-09-09T16:00:00.000Z</published>
    <updated>2017-06-03T16:37:13.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>处理事件是web前端开发中出现最频繁的业务之一。在处理这类业务时，我们通常的思路就是基本是这样的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'btn'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    a.show();</div><div class="line">    b.hide();</div><div class="line">    c.hide();</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>btn发生点击事件（事件触发）， 然后去分别执行a、b、c模块下的对应事件。这样是没有什么大问题的。<br>但设想一下下面3种情况：</p>
<ol>
<li>假如程序很大，很多模块，btn的这个事件要去触发100个模块下对应的不同的事件……</li>
<li>今天btn可能只触发3个模块的方法，假如明天业务调整还要去触发d模块的功能……</li>
<li>当btn触发时，c模块处于忙碌中不能响应，那势必btn与c模块要有业务上的交集，所以写btn的开发者可能还要去了解c模块的运行逻辑……</li>
</ol>
<h2 id="为什么需要发布-订阅"><a href="#为什么需要发布-订阅" class="headerlink" title="为什么需要发布/订阅"></a>为什么需要发布/订阅</h2><p>那么这个情况下就适合使用发布/订阅机制（pub/sub）进行事件管理。<br>发布/订阅也被称之为观察者模式。我要用观察者模式于事件管理中主要是为了满足以下诉求：<br>我希望模块与模块之间更加的独立。A模块不需要知道B模块中具体的执行逻辑，它只要知道我触发了btn事件，你B模块能知道我触发了并做你自己该做的事就可以了。<br>以此来首先确保我开发A模块时不需要了解我应该调用B模块的那个函数方法。另外，将来加入B模块、C模块时，A模块基本不用进行太多业务调整。</p>
<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>宏观来看，观察者模式其实有点类似于一个管理者，它手上有一份名单，知道谁谁谁订阅了事件A，当事件A发生之后只需要通知这个管理者，管理者就会杜泽去通知订阅了事件A的受众，而受众和事件的触发者之间不需要了解彼此。<br>那么我们就需要完成以下几个功能：</p>
<ol>
<li>存取订阅关系的数据（Data）</li>
<li>订阅事件（sub）</li>
<li>发布事件（pub）</li>
<li>取消订阅（unsub）</li>
</ol>
<p>首先，订阅关系基本上是 ‘事件 —— 订阅者队列’ 这样的对应形式。<br>其次，在js中订阅者实际上想知道发生的某件事件，然后要去执行方法，因此事件对应的队列的存的都是要去执行function<br>因此我们可以考虑将订阅者（function）存于一个数组中，然后利用js的object的键值特性保存这些队列。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">oList = &#123;</div><div class="line">  <span class="string">'事件A'</span>: [functionA, functionB]</div><div class="line">, <span class="string">'事件B'</span>: [functionC, functionD]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样看来就很好理解了：</p>
<ol>
<li>订阅事件（sub）：将对应事件的数组中push一个要执行的function（<code>引用类型</code>，实际上是指向function的内存地址）</li>
<li>发布事件（pub）：把对应数组中的function都执行一遍</li>
<li>取消订阅（unsub）： 将对应的function从数组中移除</li>
</ol>
<h2 id="jQuery实现"><a href="#jQuery实现" class="headerlink" title="jQuery实现"></a>jQuery实现</h2><p>如果环境中有jQuery，那么实现观察者模式的方法很简单，我们可以将订阅关系数据存到$({}) 这个jQuery对象中，赋予其trigger、on、off方法。用trigger、on方法可以轻松实现上述发布和订阅的功能。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">+<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</div><div class="line">  <span class="comment">// 订阅一个事件管理器对象</span></div><div class="line">  <span class="built_in">window</span>.EventCenter = &#123;</div><div class="line">    <span class="attr">o</span>: $(&#123;&#125;)</div><div class="line">  , <span class="attr">sub</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">      self.o.on.apply(self.o, <span class="built_in">arguments</span>);</div><div class="line">    &#125;</div><div class="line">  , <span class="attr">unsub</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">      self.o.off.apply(self.o, <span class="built_in">arguments</span>);</div><div class="line">    &#125;</div><div class="line">  , <span class="attr">pub</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">      self.o.trigger.apply(self.o, <span class="built_in">arguments</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;(jQuery);</div></pre></td></tr></table></figure></p>
<h2 id="原生js实现"><a href="#原生js实现" class="headerlink" title="原生js实现"></a>原生js实现</h2><p>原生js中由于没有封装on、off这两个实用的方法，因此实现起来相对要费力一些。<br>特别在取消订阅这个功能上回发现一个历史性的深坑：<br>最早的时候我实现unsub的思路是去遍历数组，判断数组元素（function）是否与所选的function相等……<br>那么问题就来了，如何判断function相同（等）……<br>网上有大神说将function硬转成字符串判断，这种做法在一定情况下是可行的，但是并不是100%准确。<br>所以这个问题搁置了大半年。<br>直到最近我用jQuery的实现版本发现并没有出现function判断不准的问题，于是我潜心研究了一下jQuery的实现思路……<br>发现它相当聪（wei）明(suo)的引入了一个guid的概念（global unique id）,通过guid来识别方法，当一个function AAA订阅一个事件时，它会悄悄的在AAA里”种”下一个guid属性，它的值是唯一的，后期jQuery都是通过这个guid来识别方法，而不是硬转字符串的方法（stupid）<br>所以，这个问题解决了……<br><strong>所以说jQuery大法好啊！</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> EventManager = &#123;</div><div class="line">  <span class="attr">_listeners</span>: &#123;&#125;</div><div class="line">, <span class="attr">guid</span>: <span class="number">1</span></div><div class="line">, <span class="attr">sub</span>: <span class="function"><span class="keyword">function</span>(<span class="params">type, fn</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>._listeners[type] === <span class="string">"undefined"</span>) &#123;</div><div class="line">      <span class="keyword">this</span>._listeners[type] = [];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn === <span class="string">"function"</span>) &#123;</div><div class="line">      <span class="keyword">this</span>._listeners[type].push(fn);</div><div class="line">      fn.guid = <span class="keyword">this</span>.guid;</div><div class="line">      <span class="keyword">this</span>.guid++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line">, <span class="attr">pub</span>: <span class="function"><span class="keyword">function</span>(<span class="params">type, data</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arrayEvent = <span class="keyword">this</span>._listeners[type];</div><div class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (arrayEvent <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>, length=arrayEvent.length; i &lt; length; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> arrayEvent[i] === <span class="string">"function"</span>) &#123;</div><div class="line">          arrayEvent[i].apply(<span class="keyword">this</span>, args);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line">, <span class="attr">unsub</span>: <span class="function"><span class="keyword">function</span>(<span class="params">type, fn</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arrayEvent = <span class="keyword">this</span>._listeners[type];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> type === <span class="string">"string"</span> &amp;&amp; arrayEvent <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> fn === <span class="string">"function"</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>, length=arrayEvent.length; i &lt; length; i+=<span class="number">1</span>)&#123;</div><div class="line">          <span class="keyword">if</span> (arrayEvent[i].guid === fn.guid) &#123;</div><div class="line">            <span class="comment">// 通过guid识别function</span></div><div class="line">            <span class="keyword">this</span>._listeners[type].splice(i, <span class="number">1</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>._listeners[type];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;处理事件是web前端开发中出现最频繁的业务之一。在处理这类业务时，我们通常的思路就是基本是这样的：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mysql按中文首字母进行排序</title>
    <link href="http://shiwah.me/2015/09/10/20150910_mysqlSortName/"/>
    <id>http://shiwah.me/2015/09/10/20150910_mysqlSortName/</id>
    <published>2015-09-09T16:00:00.000Z</published>
    <updated>2017-06-03T16:44:34.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>用gbk编码进行排序，其中name是用户中文名字段</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> <span class="string">`tb_member`</span> </div><div class="line"><span class="keyword">WHERE</span> <span class="number">1</span> </div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">CONVERT</span>( <span class="string">`name`</span> <span class="keyword">USING</span> gbk ) </div><div class="line"><span class="keyword">COLLATE</span> gbk_chinese_ci <span class="keyword">ASC</span>;</div></pre></td></tr></table></figure>
<p><code>written in 2014/10 本文搬运自LOFTER，让LOFTER纯粹po图！</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;用gbk编码进行排序，其中name是用户中文名字段&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div
    
    </summary>
    
    
  </entry>
  
</feed>
